ARM GAS  /tmp/ccfRjGDx.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB57:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*
   3:Src/main.c    ****  * Otter-Iron  -  Stm32f072 based soldering iron.
   4:Src/main.c    ****  * Copyright (C) 2020 Jan Henrik Hemsing
   5:Src/main.c    ****  *
   6:Src/main.c    ****  * This program is free software: you can redistribute it and/or modify it
   7:Src/main.c    ****  * under the terms of the GNU General Public License as published by the Free
   8:Src/main.c    ****  * Software Foundation, either version 3 of the License, or (at your option)
   9:Src/main.c    ****  * any later version.
  10:Src/main.c    ****  *
  11:Src/main.c    ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  12:Src/main.c    ****  * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
  13:Src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  14:Src/main.c    ****  * more details.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * You should have received a copy of the GNU General Public License along with
  17:Src/main.c    ****  * this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "font.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** // Enable serial printing via CDC, quite buggy
  24:Src/main.c    **** //#define ENABLESERIAL
  25:Src/main.c    **** // Enable Current display, shows up after a few millisecconds instead of temp-target
  26:Src/main.c    **** #define DISPLAYCURRENT
  27:Src/main.c    **** 
  28:Src/main.c    **** #define FILT(a, b, c) ((a) * (c) + (b) * ((1.0f) - (c)))
  29:Src/main.c    **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  30:Src/main.c    **** 
  31:Src/main.c    **** #define TTIP_AVG_FILTER 0.98f
  32:Src/main.c    **** #define MIN_DUTY 0
  33:Src/main.c    **** uint16_t MAX_DUTY = 150;
  34:Src/main.c    **** 
ARM GAS  /tmp/ccfRjGDx.s 			page 2


  35:Src/main.c    **** ADC_HandleTypeDef hadc;
  36:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  37:Src/main.c    **** 
  38:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  39:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  40:Src/main.c    **** 
  41:Src/main.c    **** TIM_HandleTypeDef htim1;
  42:Src/main.c    **** TIM_HandleTypeDef htim3;
  43:Src/main.c    **** 
  44:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  45:Src/main.c    **** 
  46:Src/main.c    **** USBD_HandleTypeDef USBD_Device;
  47:Src/main.c    **** 
  48:Src/main.c    **** void SystemClock_Config(void);
  49:Src/main.c    **** static void MX_GPIO_Init(void);
  50:Src/main.c    **** static void MX_ADC_Init(void);
  51:Src/main.c    **** static void MX_DMA_Init(void);
  52:Src/main.c    **** static void MX_I2C1_Init(void);
  53:Src/main.c    **** static void MX_I2C2_Init(void);
  54:Src/main.c    **** static void MX_TIM1_Init(void);
  55:Src/main.c    **** static void TIM3_Init(void);
  56:Src/main.c    **** static void MX_IWDG_Init(void);
  57:Src/main.c    **** 
  58:Src/main.c    **** void reg(void);
  59:Src/main.c    **** void disp_init(void);
  60:Src/main.c    **** void refresh(void);
  61:Src/main.c    **** void clear_screen(void);
  62:Src/main.c    **** void set_screen(void);
  63:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color);
  64:Src/main.c    **** void draw_char(unsigned char  c, uint8_t x, uint8_t y, uint8_t brightness);
  65:Src/main.c    **** void draw_string(const unsigned char * str, uint8_t x, uint8_t y, uint8_t brightness);
  66:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color);
  67:Src/main.c    **** void USB_printfloat(float _buf);
  68:Src/main.c    **** 
  69:Src/main.c    **** struct status_t{
  70:Src/main.c    ****   float ttip;
  71:Src/main.c    ****   float ttipavg;
  72:Src/main.c    ****   float uin;
  73:Src/main.c    ****   float iin;
  74:Src/main.c    ****   float imax;
  75:Src/main.c    ****   float tref;
  76:Src/main.c    ****   uint8_t writeFlash;
  77:Src/main.c    ****   uint8_t button[2];
  78:Src/main.c    **** #ifdef DISPLAYCURRENT
  79:Src/main.c    ****   uint8_t timeout;
  80:Src/main.c    **** #endif
  81:Src/main.c    **** }s = {.writeFlash = 0, .imax = 1.1f};
  82:Src/main.c    **** 
  83:Src/main.c    **** struct reg_t{
  84:Src/main.c    ****   float target;
  85:Src/main.c    ****   float error;
  86:Src/main.c    ****   float errorprior;
  87:Src/main.c    ****   float ierror;
  88:Src/main.c    ****   float imax;
  89:Src/main.c    ****   float derror;
  90:Src/main.c    ****   int16_t duty;
  91:Src/main.c    ****   float cycletime;
ARM GAS  /tmp/ccfRjGDx.s 			page 3


  92:Src/main.c    ****   float Kp;
  93:Src/main.c    ****   float Ki;
  94:Src/main.c    ****   float Kd;
  95:Src/main.c    ****   float deadband;
  96:Src/main.c    **** }r = {.Kp = 0.3f,.Ki = 0.13f,.Kd = 0.3f,.cycletime = 0.0005f,.imax=200.0f,.target=220.0f,.deadband=
  97:Src/main.c    **** 
  98:Src/main.c    **** struct tipcal_t{
  99:Src/main.c    ****   float offset;
 100:Src/main.c    ****   float coefficient;
 101:Src/main.c    **** } tipcal = {.offset = 120, .coefficient = 92};
 102:Src/main.c    **** 
 103:Src/main.c    **** static uint16_t ADC_raw[4];
 104:Src/main.c    **** 
 105:Src/main.c    **** extern uint8_t UserTxBuffer[APP_TX_DATA_SIZE];/* Received Data over UART (CDC interface) are stored
 106:Src/main.c    **** uint32_t sendDataUSB;
 107:Src/main.c    **** 
 108:Src/main.c    **** int main(void)
 109:Src/main.c    **** {
 110:Src/main.c    ****   HAL_Init();
 111:Src/main.c    **** 
 112:Src/main.c    ****   SystemClock_Config();
 113:Src/main.c    **** 
 114:Src/main.c    ****   MX_GPIO_Init();
 115:Src/main.c    ****   MX_DMA_Init();
 116:Src/main.c    ****   MX_ADC_Init();
 117:Src/main.c    ****   MX_I2C1_Init();
 118:Src/main.c    ****   MX_I2C2_Init();
 119:Src/main.c    ****   MX_TIM1_Init();
 120:Src/main.c    ****   TIM3_Init();
 121:Src/main.c    **** 
 122:Src/main.c    **** 
 123:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 124:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 125:Src/main.c    **** 
 126:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_raw, 4);
 127:Src/main.c    **** 
 128:Src/main.c    ****   HAL_Delay(20);
 129:Src/main.c    ****   disp_init();
 130:Src/main.c    ****   HAL_Delay(150);
 131:Src/main.c    ****   clear_screen();
 132:Src/main.c    ****   // DFU bootloader
 133:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 134:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 135:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 8 ,1);
 136:Src/main.c    ****     refresh();
 137:Src/main.c    ****     HAL_Delay(40);
 138:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 139:Src/main.c    ****     NVIC_SystemReset();
 140:Src/main.c    ****   } else {
 141:Src/main.c    ****     draw_string("Otter-Iron", 15, 1 ,1);
 142:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 143:Src/main.c    ****     refresh();
 144:Src/main.c    **** #ifdef ENABLESERIAL
 145:Src/main.c    ****     //start USB CDC
 146:Src/main.c    ****     USBD_Init(&USBD_Device, &VCP_Desc, 0);
 147:Src/main.c    ****     USBD_RegisterClass(&USBD_Device, &USBD_CDC);
 148:Src/main.c    ****     USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
ARM GAS  /tmp/ccfRjGDx.s 			page 4


 149:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 150:Src/main.c    ****     USBD_Start(&USBD_Device);
 151:Src/main.c    **** #endif
 152:Src/main.c    **** #ifdef DISPLAYCURRENT
 153:Src/main.c    ****       s.timeout = 20;
 154:Src/main.c    **** #endif
 155:Src/main.c    ****   }
 156:Src/main.c    **** 
 157:Src/main.c    ****   HAL_Delay(1000);
 158:Src/main.c    ****   MX_IWDG_Init();
 159:Src/main.c    **** 
 160:Src/main.c    ****   r.target = *((uint16_t *) 0x0800e400);
 161:Src/main.c    ****   if(r.target > 400) r.target = 220;  //initial temp set
 162:Src/main.c    **** 
 163:Src/main.c    ****   while (1)
 164:Src/main.c    ****   {
 165:Src/main.c    ****     HAL_Delay(50);
 166:Src/main.c    **** 
 167:Src/main.c    ****     //UI
 168:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B1_Pin);
 169:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 170:Src/main.c    **** 
 171:Src/main.c    ****     if(s.button[0] == 1){
 172:Src/main.c    ****       r.target -= 5;
 173:Src/main.c    ****       s.writeFlash = 1;
 174:Src/main.c    ****       HAL_Delay(40);
 175:Src/main.c    ****     }
 176:Src/main.c    **** 
 177:Src/main.c    ****     if(s.button[1] == 1){
 178:Src/main.c    ****       r.target += 5;
 179:Src/main.c    ****       s.writeFlash = 1;
 180:Src/main.c    ****       HAL_Delay(40);
 181:Src/main.c    ****     }
 182:Src/main.c    **** 
 183:Src/main.c    ****     r.target = CLAMP(r.target, 20, 400);
 184:Src/main.c    **** 
 185:Src/main.c    ****     if(s.writeFlash == 1){
 186:Src/main.c    ****       HAL_FLASH_Unlock();
 187:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 188:Src/main.c    ****       FLASH->AR = 0x0800e400;
 189:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 190:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 191:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 192:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 193:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 194:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 195:Src/main.c    ****         HAL_FLASH_Lock();
 196:Src/main.c    ****         s.writeFlash = 0;
 197:Src/main.c    ****       }
 198:Src/main.c    ****       #ifdef DISPLAYCURRENT
 199:Src/main.c    ****             s.timeout = 12;
 200:Src/main.c    ****       #endif
 201:Src/main.c    ****     }
 202:Src/main.c    **** 
 203:Src/main.c    **** #ifdef ENABLESERIAL
 204:Src/main.c    ****     // send temperature via USB CDC
 205:Src/main.c    ****     USB_printfloat(r.error);
ARM GAS  /tmp/ccfRjGDx.s 			page 5


 206:Src/main.c    **** #endif
 207:Src/main.c    **** 
 208:Src/main.c    ****     //super shitty display code
 209:Src/main.c    ****     char str1[10] = "          ";
 210:Src/main.c    ****     char str2[10] = "          ";
 211:Src/main.c    ****     char str3[10] = "          ";
 212:Src/main.c    ****     char str4[10] = "          ";
 213:Src/main.c    ****     sprintf(str1, "%d C   ", (uint16_t)r.target);
 214:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 215:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 216:Src/main.c    ****     sprintf(str4, "%d.%d A", (uint16_t)s.iin,(uint16_t)((s.iin-(uint16_t)s.iin)*10.0f));
 217:Src/main.c    **** 
 218:Src/main.c    ****     clear_screen();
 219:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 220:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 221:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 222:Src/main.c    **** #ifdef DISPLAYCURRENT
 223:Src/main.c    ****     if(s.timeout == 0){
 224:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 225:Src/main.c    ****     } else {
 226:Src/main.c    ****       s.timeout--;
 227:Src/main.c    ****     }
 228:Src/main.c    **** #endif
 229:Src/main.c    **** 
 230:Src/main.c    ****     for(uint16_t i = 0; i <=  CLAMP(r.error*3.0f,0,30); i++){
 231:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 232:Src/main.c    ****     }
 233:Src/main.c    **** 
 234:Src/main.c    ****     refresh();
 235:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 236:Src/main.c    ****   }
 237:Src/main.c    **** }
 238:Src/main.c    **** 
 239:Src/main.c    **** // Main PID+two-way controller and ADC readout
 240:Src/main.c    **** void reg(void) {
 241:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 242:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 243:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 244:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 245:Src/main.c    **** 
 246:Src/main.c    ****   s.ttipavg = FILT(s.ttipavg, s.ttip, TTIP_AVG_FILTER);
 247:Src/main.c    **** 
 248:Src/main.c    ****   // Check if within deadband, decide on two-way or PID control
 249:Src/main.c    ****   if(s.ttipavg >= r.target-r.deadband && s.ttipavg <= r.target+r.deadband){
 250:Src/main.c    ****     r.error = r.target - s.ttipavg;
 251:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 252:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 253:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 254:Src/main.c    ****     r.duty = (r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror)*MAX_DUTY;
 255:Src/main.c    ****     r.errorprior = r.error;
 256:Src/main.c    ****   } else {
 257:Src/main.c    ****     if(s.ttipavg <= r.target){
 258:Src/main.c    ****       r.duty = MAX_DUTY;
 259:Src/main.c    ****       r.error = 12.0;
 260:Src/main.c    ****     } else {
 261:Src/main.c    ****       r.duty = MIN_DUTY;
 262:Src/main.c    ****       r.error = 0.0;
ARM GAS  /tmp/ccfRjGDx.s 			page 6


 263:Src/main.c    ****     }
 264:Src/main.c    ****   }
 265:Src/main.c    **** 
 266:Src/main.c    ****   r.duty = CLAMP(r.duty, MIN_DUTY, MAX_DUTY); // Clamp to duty cycle
 267:Src/main.c    **** 
 268:Src/main.c    ****   if(s.iin > s.imax && r.duty > 100){ // Current limiting
 269:Src/main.c    ****     MAX_DUTY = r.duty - 1;
 270:Src/main.c    ****     r.duty -= 100;
 271:Src/main.c    ****   } else {
 272:Src/main.c    ****     MAX_DUTY++;
 273:Src/main.c    ****     if(MAX_DUTY >= 3990) MAX_DUTY = 3990;
 274:Src/main.c    ****   }
 275:Src/main.c    **** 
 276:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r.duty);
 277:Src/main.c    **** 
 278:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4050);
 279:Src/main.c    **** }
 280:Src/main.c    **** 
 281:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //send USB cdc data
 282:Src/main.c    **** {
 283:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 284:Src/main.c    ****   {
 285:Src/main.c    ****     sendDataUSB = 0;
 286:Src/main.c    **** 
 287:Src/main.c    ****     USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[0], APP_TX_DATA_SIZE);
 288:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 289:Src/main.c    ****   }
 290:Src/main.c    **** }
 291:Src/main.c    **** 
 292:Src/main.c    **** void USB_printfloat(float _buf){
 293:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 294:Src/main.c    ****   sprintf(UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_buf)*10.0f));
 295:Src/main.c    ****   sendDataUSB = 1;
 296:Src/main.c    **** }
 297:Src/main.c    **** 
 298:Src/main.c    **** 
 299:Src/main.c    **** // init code sequence by Ralim, thanks alot!
 300:Src/main.c    **** #define DEVICEADDR_OLED   (0x3c<<1)
 301:Src/main.c    **** #define OLED_WIDTH        96
 302:Src/main.c    **** #define FRAMEBUFFER_START 17
 303:Src/main.c    **** uint8_t screenBuffer[16 + (OLED_WIDTH * 2) + 10];  // The data buffer
 304:Src/main.c    **** const uint8_t REFRESH_COMMANDS[17] = { 0x80, 0xAF, 0x80, 0x21, 0x80, 0x20, 0x80, 0x7F, 0x80, 0xC0, 
 305:Src/main.c    **** uint8_t OLED_Setup_Array[] = {
 306:Src/main.c    **** 0x80, 0xAE, /*Display off*/
 307:Src/main.c    **** 0x80, 0xD5, /*Set display clock divide ratio / osc freq*/
 308:Src/main.c    **** 0x80, 0x52, /*Divide ratios*/
 309:Src/main.c    **** 0x80, 0xA8, /*Set Multiplex Ratio*/
 310:Src/main.c    **** 0x80, 0x0F, /*16 == max brightness,39==dimmest*/
 311:Src/main.c    **** 0x80, 0xC0, /*Set COM Scan direction*/
 312:Src/main.c    **** 0x80, 0xD3, /*Set vertical Display offset*/
 313:Src/main.c    **** 0x80, 0x00, /*0 Offset*/
 314:Src/main.c    **** 0x80, 0x40, /*Set Display start line to 0*/
 315:Src/main.c    **** 0x80, 0xA0, /*Set Segment remap to normal*/
 316:Src/main.c    **** 0x80, 0x8D, /*Charge Pump*/
 317:Src/main.c    **** 0x80, 0x14, /*Charge Pump settings*/
 318:Src/main.c    **** 0x80, 0xDA, /*Set VCOM Pins hardware config*/
 319:Src/main.c    **** 0x80, 0x02, /*Combination 2*/
ARM GAS  /tmp/ccfRjGDx.s 			page 7


 320:Src/main.c    **** 0x80, 0x81, /*Contrast*/
 321:Src/main.c    **** 0x80, 0x33, /*^51*/
 322:Src/main.c    **** 0x80, 0xD9, /*Set pre-charge period*/
 323:Src/main.c    **** 0x80, 0xF1, /*Pre charge period*/
 324:Src/main.c    **** 0x80, 0xDB, /*Adjust VCOMH regulator ouput*/
 325:Src/main.c    **** 0x80, 0x30, /*VCOM level*/
 326:Src/main.c    **** 0x80, 0xA4, /*Enable the display GDDR*/
 327:Src/main.c    **** 0x80, 0XA6, /*Normal display*/
 328:Src/main.c    **** 0x80, 0x20, /*Memory Mode*/
 329:Src/main.c    **** 0x80, 0x00, /*Wrap memory*/
 330:Src/main.c    **** 0x80, 0xAF /*Display on*/
 331:Src/main.c    **** };
 332:Src/main.c    **** //not Ralim anymore
 333:Src/main.c    **** void disp_init(void) {
 334:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 335:Src/main.c    ****   uint16_t _cnt = 0;
 336:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 337:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 338:Src/main.c    **** }
 339:Src/main.c    **** 
 340:Src/main.c    **** void refresh(void) {
 341:Src/main.c    ****   uint16_t _cnt = 0;
 342:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 343:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 344:Src/main.c    **** }
 345:Src/main.c    **** 
 346:Src/main.c    **** void clear_screen(void) {
 347:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 348:Src/main.c    **** }
 349:Src/main.c    **** void set_screen(void) {
 350:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 351:Src/main.c    **** }
 352:Src/main.c    **** 
 353:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color){
 354:Src/main.c    ****   for(int i = 0; i <= h; i++){
 355:Src/main.c    ****     write_pixel(x, y+i, color);
 356:Src/main.c    ****   }
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color){
 360:Src/main.c    ****   if(x>95 || y >15){
 361:Src/main.c    ****     return;
 362:Src/main.c    ****   }
 363:Src/main.c    ****   if(color == 1){
 364:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 365:Src/main.c    ****   } else if (color == 0){
 366:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 367:Src/main.c    ****   }
 368:Src/main.c    **** }
 369:Src/main.c    **** 
 370:Src/main.c    **** #define CHAR_WIDTH 6
 371:Src/main.c    **** #define CHAR_HEIGHT 8
 372:Src/main.c    **** void draw_char(unsigned char c, uint8_t x, uint8_t y, uint8_t brightness) {
 373:Src/main.c    ****     c = c & 0x7F;
 374:Src/main.c    ****     if (c < ' ') {
 375:Src/main.c    ****         c = 0;
 376:Src/main.c    ****     } else {
ARM GAS  /tmp/ccfRjGDx.s 			page 8


 377:Src/main.c    ****         c -= ' ';
 378:Src/main.c    ****     }
 379:Src/main.c    ****     uint8_t * chr = font[c];
 380:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 381:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 382:Src/main.c    ****             if (chr[j] & (1<<i)) {
 383:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 384:Src/main.c    ****             } else {
 385:Src/main.c    ****                 write_pixel(x+j, y+i, 0);
 386:Src/main.c    ****             }
 387:Src/main.c    ****         }
 388:Src/main.c    ****     }
 389:Src/main.c    **** }
 390:Src/main.c    **** 
 391:Src/main.c    **** void draw_string(const unsigned char* str, uint8_t x, uint8_t y, uint8_t brightness) {
 392:Src/main.c    ****     while (*str) {
 393:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 394:Src/main.c    ****         x += CHAR_WIDTH;
 395:Src/main.c    ****     }
 396:Src/main.c    **** }
 397:Src/main.c    **** 
 398:Src/main.c    **** void SystemClock_Config(void)
 399:Src/main.c    **** {
 400:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 401:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 402:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 403:Src/main.c    **** 
 404:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 405:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 406:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 407:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 408:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 409:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 410:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 411:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 412:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 413:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 414:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 415:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 416:Src/main.c    **** 
 417:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 418:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 419:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 420:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 421:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 422:Src/main.c    **** 
 423:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 424:Src/main.c    **** 
 425:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 426:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 427:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 428:Src/main.c    **** 
 429:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 430:Src/main.c    **** }
 431:Src/main.c    **** 
 432:Src/main.c    **** static void MX_ADC_Init(void)
 433:Src/main.c    **** {
ARM GAS  /tmp/ccfRjGDx.s 			page 9


 434:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 435:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 436:Src/main.c    **** 
 437:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 438:Src/main.c    **** 
 439:Src/main.c    ****   hadc.Instance = ADC1;
 440:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 441:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 442:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 443:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 444:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 445:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 446:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 447:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 448:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 449:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 450:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 451:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 452:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 453:Src/main.c    ****   HAL_ADC_Init(&hadc);
 454:Src/main.c    **** 
 455:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 456:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 457:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 458:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 459:Src/main.c    **** 
 460:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 461:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 462:Src/main.c    **** 
 463:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 464:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 465:Src/main.c    **** 
 466:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 467:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 468:Src/main.c    **** 
 469:Src/main.c    ****   HAL_ADC_MspInit(&hadc);
 470:Src/main.c    **** }
 471:Src/main.c    **** 
 472:Src/main.c    **** static void MX_I2C1_Init(void)
 473:Src/main.c    **** {
 474:Src/main.c    **** 
 475:Src/main.c    ****   hi2c1.Instance = I2C1;
 476:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 477:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 478:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 479:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 480:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 481:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 482:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 483:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 484:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 485:Src/main.c    **** 
 486:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 487:Src/main.c    **** 
 488:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 489:Src/main.c    **** }
 490:Src/main.c    **** 
ARM GAS  /tmp/ccfRjGDx.s 			page 10


 491:Src/main.c    **** static void MX_I2C2_Init(void)
 492:Src/main.c    **** {
 493:Src/main.c    **** 
 494:Src/main.c    ****   hi2c2.Instance = I2C2;
 495:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 496:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 497:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 498:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 499:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 500:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 501:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 502:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 503:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 504:Src/main.c    **** 
 505:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 506:Src/main.c    **** 
 507:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 508:Src/main.c    **** }
 509:Src/main.c    **** 
 510:Src/main.c    **** static void MX_IWDG_Init(void)
 511:Src/main.c    **** {
 512:Src/main.c    ****   hiwdg.Instance = IWDG;
 513:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 514:Src/main.c    ****   hiwdg.Init.Window = 4095;
 515:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 516:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 517:Src/main.c    **** }
 518:Src/main.c    **** 
 519:Src/main.c    **** static void TIM3_Init(void)
 520:Src/main.c    **** {
 521:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 522:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 523:Src/main.c    **** 
 524:Src/main.c    ****   /*
 525:Src/main.c    ****        + Period = 10000 - 1
 526:Src/main.c    ****        + Prescaler = ((8000000/2)/10000) - 1
 527:Src/main.c    **** 
 528:Src/main.c    ****   */
 529:Src/main.c    ****   htim3.Instance = TIM3;
 530:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 531:Src/main.c    ****   htim3.Init.Prescaler = 399;
 532:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 533:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 534:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 535:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 536:Src/main.c    ****   {
 537:Src/main.c    ****     /* Initialization Error */
 538:Src/main.c    ****     Error_Handler();
 539:Src/main.c    ****   }
 540:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 541:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 542:Src/main.c    **** }
 543:Src/main.c    **** 
 544:Src/main.c    **** static void MX_TIM1_Init(void)
 545:Src/main.c    **** {
 546:Src/main.c    **** 
 547:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
ARM GAS  /tmp/ccfRjGDx.s 			page 11


 548:Src/main.c    **** 
 549:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 550:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 551:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 552:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 553:Src/main.c    **** 
 554:Src/main.c    ****   htim1.Instance = TIM1;
 555:Src/main.c    ****   htim1.Init.Prescaler = 8; // 2048
 556:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 557:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 558:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 559:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 560:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 561:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 562:Src/main.c    **** 
 563:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 564:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 565:Src/main.c    **** 
 566:Src/main.c    ****   HAL_TIM_PWM_Init(&htim1);
 567:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 568:Src/main.c    **** 
 569:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 570:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 571:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 572:Src/main.c    **** 
 573:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 574:Src/main.c    ****   sConfigOC.Pulse = 0;
 575:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 576:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 577:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 578:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 579:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 580:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 581:Src/main.c    **** 
 582:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 583:Src/main.c    ****   sConfigOC.Pulse = 10;
 584:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 585:Src/main.c    **** 
 586:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 587:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 588:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 589:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 590:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 591:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 592:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 593:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 594:Src/main.c    **** 
 595:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 596:Src/main.c    **** }
 597:Src/main.c    **** /*
 598:Src/main.c    **** static void MX_TIM2_Init(void)
 599:Src/main.c    **** {
 600:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 601:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 602:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 603:Src/main.c    **** 
 604:Src/main.c    ****   htim2.Instance = TIM2;
ARM GAS  /tmp/ccfRjGDx.s 			page 12


 605:Src/main.c    ****   htim2.Init.Prescaler = 2096;
 606:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 607:Src/main.c    ****   htim2.Init.Period = 4096;
 608:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 609:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 610:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 611:Src/main.c    **** 
 612:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 613:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 614:Src/main.c    **** 
 615:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 616:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 617:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 618:Src/main.c    **** 
 619:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 620:Src/main.c    ****   sConfigOC.Pulse = 30;
 621:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 622:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 623:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 624:Src/main.c    **** 
 625:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 626:Src/main.c    **** 
 627:Src/main.c    **** }
 628:Src/main.c    **** */
 629:Src/main.c    **** 
 630:Src/main.c    **** static void MX_DMA_Init(void)
 631:Src/main.c    **** {
 632:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 633:Src/main.c    **** 
 634:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 635:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 636:Src/main.c    **** 
 637:Src/main.c    ****   HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 638:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 639:Src/main.c    ****   /*
 640:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 641:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 642:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 643:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 644:Src/main.c    ****   */
 645:Src/main.c    **** 
 646:Src/main.c    **** }
 647:Src/main.c    **** 
 648:Src/main.c    **** static void MX_GPIO_Init(void)
 649:Src/main.c    **** {
  25              		.loc 1 649 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
ARM GAS  /tmp/ccfRjGDx.s 			page 13


  37              		.cfi_def_cfa_offset 48
 650:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 650 0
  39 0004 1022     		movs	r2, #16
  40 0006 0021     		movs	r1, #0
  41 0008 04A8     		add	r0, sp, #16
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
  44              	.LBB8:
 651:Src/main.c    **** 
 652:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  45              		.loc 1 652 0
  46 000e 1D4B     		ldr	r3, .L2
  47 0010 5969     		ldr	r1, [r3, #20]
  48 0012 8020     		movs	r0, #128
  49 0014 8002     		lsls	r0, r0, #10
  50 0016 0143     		orrs	r1, r0
  51 0018 5961     		str	r1, [r3, #20]
  52 001a 5A69     		ldr	r2, [r3, #20]
  53 001c 0240     		ands	r2, r0
  54 001e 0092     		str	r2, [sp]
  55 0020 009A     		ldr	r2, [sp]
  56              	.LBE8:
  57              	.LBB9:
 653:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  58              		.loc 1 653 0
  59 0022 5969     		ldr	r1, [r3, #20]
  60 0024 8020     		movs	r0, #128
  61 0026 C002     		lsls	r0, r0, #11
  62 0028 0143     		orrs	r1, r0
  63 002a 5961     		str	r1, [r3, #20]
  64 002c 5A69     		ldr	r2, [r3, #20]
  65 002e 0240     		ands	r2, r0
  66 0030 0192     		str	r2, [sp, #4]
  67 0032 019A     		ldr	r2, [sp, #4]
  68              	.LBE9:
  69              	.LBB10:
 654:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  70              		.loc 1 654 0
  71 0034 5A69     		ldr	r2, [r3, #20]
  72 0036 8021     		movs	r1, #128
  73 0038 0903     		lsls	r1, r1, #12
  74 003a 0A43     		orrs	r2, r1
  75 003c 5A61     		str	r2, [r3, #20]
  76 003e 5B69     		ldr	r3, [r3, #20]
  77 0040 0B40     		ands	r3, r1
  78 0042 0293     		str	r3, [sp, #8]
  79 0044 029B     		ldr	r3, [sp, #8]
  80              	.LBE10:
 655:Src/main.c    **** 
 656:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  81              		.loc 1 656 0
  82 0046 1823     		movs	r3, #24
  83 0048 0393     		str	r3, [sp, #12]
 657:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 658:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  84              		.loc 1 658 0
ARM GAS  /tmp/ccfRjGDx.s 			page 14


  85 004a 0225     		movs	r5, #2
  86 004c 0595     		str	r5, [sp, #20]
 659:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  87              		.loc 1 659 0
  88 004e 9020     		movs	r0, #144
  89 0050 03A9     		add	r1, sp, #12
  90 0052 C005     		lsls	r0, r0, #23
  91 0054 FFF7FEFF 		bl	HAL_GPIO_Init
  92              	.LVL1:
 660:Src/main.c    **** 
 661:Src/main.c    ****   GPIO_InitStruct.Pin = B1_1_Pin;
  93              		.loc 1 661 0
  94 0058 8023     		movs	r3, #128
  95 005a 9B01     		lsls	r3, r3, #6
  96 005c 0393     		str	r3, [sp, #12]
 662:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  97              		.loc 1 662 0
  98 005e 0024     		movs	r4, #0
  99 0060 0494     		str	r4, [sp, #16]
 663:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 100              		.loc 1 663 0
 101 0062 0595     		str	r5, [sp, #20]
 664:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 102              		.loc 1 664 0
 103 0064 03A9     		add	r1, sp, #12
 104 0066 0848     		ldr	r0, .L2+4
 105 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL2:
 665:Src/main.c    **** 
 666:Src/main.c    **** 
 667:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
 107              		.loc 1 667 0
 108 006c 8023     		movs	r3, #128
 109 006e 5B01     		lsls	r3, r3, #5
 110 0070 0393     		str	r3, [sp, #12]
 668:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 111              		.loc 1 668 0
 112 0072 0494     		str	r4, [sp, #16]
 669:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 669 0
 114 0074 0594     		str	r4, [sp, #20]
 670:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 115              		.loc 1 670 0
 116 0076 03A9     		add	r1, sp, #12
 117 0078 0448     		ldr	r0, .L2+8
 118 007a FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL3:
 671:Src/main.c    **** 
 672:Src/main.c    **** }
 120              		.loc 1 672 0
 121 007e 09B0     		add	sp, sp, #36
 122              		@ sp needed
 123 0080 30BD     		pop	{r4, r5, pc}
 124              	.L3:
 125 0082 C046     		.align	2
 126              	.L2:
 127 0084 00100240 		.word	1073876992
ARM GAS  /tmp/ccfRjGDx.s 			page 15


 128 0088 00080048 		.word	1207961600
 129 008c 00040048 		.word	1207960576
 130              		.cfi_endproc
 131              	.LFE57:
 133              		.section	.text.MX_DMA_Init,"ax",%progbits
 134              		.align	1
 135              		.syntax unified
 136              		.code	16
 137              		.thumb_func
 138              		.fpu softvfp
 140              	MX_DMA_Init:
 141              	.LFB56:
 631:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 142              		.loc 1 631 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146 0000 00B5     		push	{lr}
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 4
 149              		.cfi_offset 14, -4
 150 0002 83B0     		sub	sp, sp, #12
 151              	.LCFI3:
 152              		.cfi_def_cfa_offset 16
 153              	.LBB11:
 632:Src/main.c    **** 
 154              		.loc 1 632 0
 155 0004 0D4A     		ldr	r2, .L5
 156 0006 5169     		ldr	r1, [r2, #20]
 157 0008 0123     		movs	r3, #1
 158 000a 1943     		orrs	r1, r3
 159 000c 5161     		str	r1, [r2, #20]
 160 000e 5269     		ldr	r2, [r2, #20]
 161 0010 1340     		ands	r3, r2
 162 0012 0193     		str	r3, [sp, #4]
 163 0014 019B     		ldr	r3, [sp, #4]
 164              	.LBE11:
 634:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 165              		.loc 1 634 0
 166 0016 0022     		movs	r2, #0
 167 0018 0021     		movs	r1, #0
 168 001a 0920     		movs	r0, #9
 169 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 170              	.LVL4:
 635:Src/main.c    **** 
 171              		.loc 1 635 0
 172 0020 0920     		movs	r0, #9
 173 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 174              	.LVL5:
 637:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 175              		.loc 1 637 0
 176 0026 0022     		movs	r2, #0
 177 0028 0021     		movs	r1, #0
 178 002a 1020     		movs	r0, #16
 179 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 180              	.LVL6:
 638:Src/main.c    ****   /*
ARM GAS  /tmp/ccfRjGDx.s 			page 16


 181              		.loc 1 638 0
 182 0030 1020     		movs	r0, #16
 183 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 184              	.LVL7:
 646:Src/main.c    **** 
 185              		.loc 1 646 0
 186 0036 03B0     		add	sp, sp, #12
 187              		@ sp needed
 188 0038 00BD     		pop	{pc}
 189              	.L6:
 190 003a C046     		.align	2
 191              	.L5:
 192 003c 00100240 		.word	1073876992
 193              		.cfi_endproc
 194              	.LFE56:
 196              		.section	.text.MX_ADC_Init,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.code	16
 200              		.thumb_func
 201              		.fpu softvfp
 203              	MX_ADC_Init:
 204              	.LFB50:
 433:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 205              		.loc 1 433 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 24
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 70B5     		push	{r4, r5, r6, lr}
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 16
 212              		.cfi_offset 4, -16
 213              		.cfi_offset 5, -12
 214              		.cfi_offset 6, -8
 215              		.cfi_offset 14, -4
 216 0002 86B0     		sub	sp, sp, #24
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 40
 219              	.LBB12:
 434:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 220              		.loc 1 434 0
 221 0004 274B     		ldr	r3, .L8
 222 0006 5A69     		ldr	r2, [r3, #20]
 223 0008 0126     		movs	r6, #1
 224 000a 3243     		orrs	r2, r6
 225 000c 5A61     		str	r2, [r3, #20]
 226 000e 5A69     		ldr	r2, [r3, #20]
 227 0010 3240     		ands	r2, r6
 228 0012 0192     		str	r2, [sp, #4]
 229 0014 019A     		ldr	r2, [sp, #4]
 230              	.LBE12:
 231              	.LBB13:
 435:Src/main.c    **** 
 232              		.loc 1 435 0
 233 0016 9A69     		ldr	r2, [r3, #24]
 234 0018 8021     		movs	r1, #128
 235 001a 8900     		lsls	r1, r1, #2
ARM GAS  /tmp/ccfRjGDx.s 			page 17


 236 001c 0A43     		orrs	r2, r1
 237 001e 9A61     		str	r2, [r3, #24]
 238 0020 9B69     		ldr	r3, [r3, #24]
 239 0022 0B40     		ands	r3, r1
 240 0024 0293     		str	r3, [sp, #8]
 241 0026 029B     		ldr	r3, [sp, #8]
 242              	.LBE13:
 437:Src/main.c    **** 
 243              		.loc 1 437 0
 244 0028 0C22     		movs	r2, #12
 245 002a 0021     		movs	r1, #0
 246 002c 03A8     		add	r0, sp, #12
 247 002e FFF7FEFF 		bl	memset
 248              	.LVL8:
 439:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 249              		.loc 1 439 0
 250 0032 1D4C     		ldr	r4, .L8+4
 251 0034 1D4B     		ldr	r3, .L8+8
 252 0036 2360     		str	r3, [r4]
 440:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 253              		.loc 1 440 0
 254 0038 0025     		movs	r5, #0
 255 003a 6560     		str	r5, [r4, #4]
 441:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 256              		.loc 1 441 0
 257 003c A560     		str	r5, [r4, #8]
 442:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 258              		.loc 1 442 0
 259 003e E560     		str	r5, [r4, #12]
 443:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 260              		.loc 1 443 0
 261 0040 2661     		str	r6, [r4, #16]
 444:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 262              		.loc 1 444 0
 263 0042 0823     		movs	r3, #8
 264 0044 6361     		str	r3, [r4, #20]
 445:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 265              		.loc 1 445 0
 266 0046 A561     		str	r5, [r4, #24]
 446:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 267              		.loc 1 446 0
 268 0048 E561     		str	r5, [r4, #28]
 447:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 269              		.loc 1 447 0
 270 004a 2562     		str	r5, [r4, #32]
 448:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 271              		.loc 1 448 0
 272 004c 6562     		str	r5, [r4, #36]
 449:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 273              		.loc 1 449 0
 274 004e 3833     		adds	r3, r3, #56
 275 0050 A362     		str	r3, [r4, #40]
 450:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 276              		.loc 1 450 0
 277 0052 8023     		movs	r3, #128
 278 0054 DB00     		lsls	r3, r3, #3
 279 0056 E362     		str	r3, [r4, #44]
ARM GAS  /tmp/ccfRjGDx.s 			page 18


 451:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 280              		.loc 1 451 0
 281 0058 2663     		str	r6, [r4, #48]
 452:Src/main.c    ****   HAL_ADC_Init(&hadc);
 282              		.loc 1 452 0
 283 005a 6663     		str	r6, [r4, #52]
 453:Src/main.c    **** 
 284              		.loc 1 453 0
 285 005c 2000     		movs	r0, r4
 286 005e FFF7FEFF 		bl	HAL_ADC_Init
 287              	.LVL9:
 455:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 288              		.loc 1 455 0
 289 0062 0395     		str	r5, [sp, #12]
 456:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 290              		.loc 1 456 0
 291 0064 8023     		movs	r3, #128
 292 0066 5B01     		lsls	r3, r3, #5
 293 0068 0493     		str	r3, [sp, #16]
 457:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 294              		.loc 1 457 0
 295 006a 0623     		movs	r3, #6
 296 006c 0593     		str	r3, [sp, #20]
 458:Src/main.c    **** 
 297              		.loc 1 458 0
 298 006e 03A9     		add	r1, sp, #12
 299 0070 2000     		movs	r0, r4
 300 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 301              	.LVL10:
 460:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 302              		.loc 1 460 0
 303 0076 0396     		str	r6, [sp, #12]
 461:Src/main.c    **** 
 304              		.loc 1 461 0
 305 0078 03A9     		add	r1, sp, #12
 306 007a 2000     		movs	r0, r4
 307 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 308              	.LVL11:
 463:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 309              		.loc 1 463 0
 310 0080 0223     		movs	r3, #2
 311 0082 0393     		str	r3, [sp, #12]
 464:Src/main.c    **** 
 312              		.loc 1 464 0
 313 0084 03A9     		add	r1, sp, #12
 314 0086 2000     		movs	r0, r4
 315 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 316              	.LVL12:
 466:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 317              		.loc 1 466 0
 318 008c 0523     		movs	r3, #5
 319 008e 0393     		str	r3, [sp, #12]
 467:Src/main.c    **** 
 320              		.loc 1 467 0
 321 0090 03A9     		add	r1, sp, #12
 322 0092 2000     		movs	r0, r4
 323 0094 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  /tmp/ccfRjGDx.s 			page 19


 324              	.LVL13:
 469:Src/main.c    **** }
 325              		.loc 1 469 0
 326 0098 2000     		movs	r0, r4
 327 009a FFF7FEFF 		bl	HAL_ADC_MspInit
 328              	.LVL14:
 470:Src/main.c    **** 
 329              		.loc 1 470 0
 330 009e 06B0     		add	sp, sp, #24
 331              		@ sp needed
 332 00a0 70BD     		pop	{r4, r5, r6, pc}
 333              	.L9:
 334 00a2 C046     		.align	2
 335              	.L8:
 336 00a4 00100240 		.word	1073876992
 337 00a8 00000000 		.word	hadc
 338 00ac 00240140 		.word	1073816576
 339              		.cfi_endproc
 340              	.LFE50:
 342              		.section	.text.MX_I2C1_Init,"ax",%progbits
 343              		.align	1
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 347              		.fpu softvfp
 349              	MX_I2C1_Init:
 350              	.LFB51:
 473:Src/main.c    **** 
 351              		.loc 1 473 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355 0000 10B5     		push	{r4, lr}
 356              	.LCFI6:
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 4, -8
 359              		.cfi_offset 14, -4
 475:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 360              		.loc 1 475 0
 361 0002 0D4C     		ldr	r4, .L11
 362 0004 0D4B     		ldr	r3, .L11+4
 363 0006 2360     		str	r3, [r4]
 476:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 364              		.loc 1 476 0
 365 0008 0D4B     		ldr	r3, .L11+8
 366 000a 6360     		str	r3, [r4, #4]
 477:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 367              		.loc 1 477 0
 368 000c 0023     		movs	r3, #0
 369 000e A360     		str	r3, [r4, #8]
 478:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 370              		.loc 1 478 0
 371 0010 0122     		movs	r2, #1
 372 0012 E260     		str	r2, [r4, #12]
 479:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 373              		.loc 1 479 0
 374 0014 2361     		str	r3, [r4, #16]
ARM GAS  /tmp/ccfRjGDx.s 			page 20


 480:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 375              		.loc 1 480 0
 376 0016 6361     		str	r3, [r4, #20]
 481:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 377              		.loc 1 481 0
 378 0018 A361     		str	r3, [r4, #24]
 482:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 379              		.loc 1 482 0
 380 001a E361     		str	r3, [r4, #28]
 483:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 381              		.loc 1 483 0
 382 001c 2362     		str	r3, [r4, #32]
 484:Src/main.c    **** 
 383              		.loc 1 484 0
 384 001e 2000     		movs	r0, r4
 385 0020 FFF7FEFF 		bl	HAL_I2C_Init
 386              	.LVL15:
 486:Src/main.c    **** 
 387              		.loc 1 486 0
 388 0024 0021     		movs	r1, #0
 389 0026 2000     		movs	r0, r4
 390 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 391              	.LVL16:
 488:Src/main.c    **** }
 392              		.loc 1 488 0
 393 002c 0021     		movs	r1, #0
 394 002e 2000     		movs	r0, r4
 395 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 396              	.LVL17:
 489:Src/main.c    **** 
 397              		.loc 1 489 0
 398              		@ sp needed
 399 0034 10BD     		pop	{r4, pc}
 400              	.L12:
 401 0036 C046     		.align	2
 402              	.L11:
 403 0038 00000000 		.word	hi2c1
 404 003c 00540040 		.word	1073763328
 405 0040 0E090020 		.word	536873230
 406              		.cfi_endproc
 407              	.LFE51:
 409              		.section	.text.MX_I2C2_Init,"ax",%progbits
 410              		.align	1
 411              		.syntax unified
 412              		.code	16
 413              		.thumb_func
 414              		.fpu softvfp
 416              	MX_I2C2_Init:
 417              	.LFB52:
 492:Src/main.c    **** 
 418              		.loc 1 492 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422 0000 10B5     		push	{r4, lr}
 423              	.LCFI7:
 424              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccfRjGDx.s 			page 21


 425              		.cfi_offset 4, -8
 426              		.cfi_offset 14, -4
 494:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 427              		.loc 1 494 0
 428 0002 0D4C     		ldr	r4, .L14
 429 0004 0D4B     		ldr	r3, .L14+4
 430 0006 2360     		str	r3, [r4]
 495:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 431              		.loc 1 495 0
 432 0008 0D4B     		ldr	r3, .L14+8
 433 000a 6360     		str	r3, [r4, #4]
 496:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 434              		.loc 1 496 0
 435 000c 0023     		movs	r3, #0
 436 000e A360     		str	r3, [r4, #8]
 497:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 437              		.loc 1 497 0
 438 0010 0122     		movs	r2, #1
 439 0012 E260     		str	r2, [r4, #12]
 498:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 440              		.loc 1 498 0
 441 0014 2361     		str	r3, [r4, #16]
 499:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 442              		.loc 1 499 0
 443 0016 6361     		str	r3, [r4, #20]
 500:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 444              		.loc 1 500 0
 445 0018 A361     		str	r3, [r4, #24]
 501:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 446              		.loc 1 501 0
 447 001a E361     		str	r3, [r4, #28]
 502:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 448              		.loc 1 502 0
 449 001c 2362     		str	r3, [r4, #32]
 503:Src/main.c    **** 
 450              		.loc 1 503 0
 451 001e 2000     		movs	r0, r4
 452 0020 FFF7FEFF 		bl	HAL_I2C_Init
 453              	.LVL18:
 505:Src/main.c    **** 
 454              		.loc 1 505 0
 455 0024 0021     		movs	r1, #0
 456 0026 2000     		movs	r0, r4
 457 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 458              	.LVL19:
 507:Src/main.c    **** }
 459              		.loc 1 507 0
 460 002c 0021     		movs	r1, #0
 461 002e 2000     		movs	r0, r4
 462 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 463              	.LVL20:
 508:Src/main.c    **** 
 464              		.loc 1 508 0
 465              		@ sp needed
 466 0034 10BD     		pop	{r4, pc}
 467              	.L15:
 468 0036 C046     		.align	2
ARM GAS  /tmp/ccfRjGDx.s 			page 22


 469              	.L14:
 470 0038 00000000 		.word	hi2c2
 471 003c 00580040 		.word	1073764352
 472 0040 5D3E3020 		.word	540032605
 473              		.cfi_endproc
 474              	.LFE52:
 476              		.section	.text.TIM3_Init,"ax",%progbits
 477              		.align	1
 478              		.syntax unified
 479              		.code	16
 480              		.thumb_func
 481              		.fpu softvfp
 483              	TIM3_Init:
 484              	.LFB54:
 520:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 485              		.loc 1 520 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 24
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 10B5     		push	{r4, lr}
 490              	.LCFI8:
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 4, -8
 493              		.cfi_offset 14, -4
 494 0002 86B0     		sub	sp, sp, #24
 495              	.LCFI9:
 496              		.cfi_def_cfa_offset 32
 497              	.LBB14:
 521:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 498              		.loc 1 521 0
 499 0004 124A     		ldr	r2, .L17
 500 0006 D169     		ldr	r1, [r2, #28]
 501 0008 0223     		movs	r3, #2
 502 000a 1943     		orrs	r1, r3
 503 000c D161     		str	r1, [r2, #28]
 504 000e D269     		ldr	r2, [r2, #28]
 505 0010 1340     		ands	r3, r2
 506 0012 0193     		str	r3, [sp, #4]
 507 0014 019B     		ldr	r3, [sp, #4]
 508              	.LBE14:
 522:Src/main.c    **** 
 509              		.loc 1 522 0
 510 0016 1022     		movs	r2, #16
 511 0018 0021     		movs	r1, #0
 512 001a 02A8     		add	r0, sp, #8
 513 001c FFF7FEFF 		bl	memset
 514              	.LVL21:
 529:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 515              		.loc 1 529 0
 516 0020 0C4C     		ldr	r4, .L17+4
 517 0022 0D4B     		ldr	r3, .L17+8
 518 0024 2360     		str	r3, [r4]
 530:Src/main.c    ****   htim3.Init.Prescaler = 399;
 519              		.loc 1 530 0
 520 0026 0D4B     		ldr	r3, .L17+12
 521 0028 E360     		str	r3, [r4, #12]
 531:Src/main.c    ****   htim3.Init.ClockDivision = 0;
ARM GAS  /tmp/ccfRjGDx.s 			page 23


 522              		.loc 1 531 0
 523 002a 9023     		movs	r3, #144
 524 002c FF33     		adds	r3, r3, #255
 525 002e 6360     		str	r3, [r4, #4]
 532:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 526              		.loc 1 532 0
 527 0030 0023     		movs	r3, #0
 528 0032 2361     		str	r3, [r4, #16]
 533:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 529              		.loc 1 533 0
 530 0034 A360     		str	r3, [r4, #8]
 534:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 531              		.loc 1 534 0
 532 0036 A361     		str	r3, [r4, #24]
 535:Src/main.c    ****   {
 533              		.loc 1 535 0
 534 0038 2000     		movs	r0, r4
 535 003a FFF7FEFF 		bl	HAL_TIM_Base_Init
 536              	.LVL22:
 540:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 537              		.loc 1 540 0
 538 003e 8023     		movs	r3, #128
 539 0040 5B01     		lsls	r3, r3, #5
 540 0042 0293     		str	r3, [sp, #8]
 541:Src/main.c    **** }
 541              		.loc 1 541 0
 542 0044 02A9     		add	r1, sp, #8
 543 0046 2000     		movs	r0, r4
 544 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 545              	.LVL23:
 542:Src/main.c    **** 
 546              		.loc 1 542 0
 547 004c 06B0     		add	sp, sp, #24
 548              		@ sp needed
 549 004e 10BD     		pop	{r4, pc}
 550              	.L18:
 551              		.align	2
 552              	.L17:
 553 0050 00100240 		.word	1073876992
 554 0054 00000000 		.word	htim3
 555 0058 00040040 		.word	1073742848
 556 005c 0F270000 		.word	9999
 557              		.cfi_endproc
 558              	.LFE54:
 560              		.section	.text.MX_TIM1_Init,"ax",%progbits
 561              		.align	1
 562              		.syntax unified
 563              		.code	16
 564              		.thumb_func
 565              		.fpu softvfp
 567              	MX_TIM1_Init:
 568              	.LFB55:
 545:Src/main.c    **** 
 569              		.loc 1 545 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 88
 572              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccfRjGDx.s 			page 24


 573 0000 70B5     		push	{r4, r5, r6, lr}
 574              	.LCFI10:
 575              		.cfi_def_cfa_offset 16
 576              		.cfi_offset 4, -16
 577              		.cfi_offset 5, -12
 578              		.cfi_offset 6, -8
 579              		.cfi_offset 14, -4
 580 0002 96B0     		sub	sp, sp, #88
 581              	.LCFI11:
 582              		.cfi_def_cfa_offset 104
 583              	.LBB15:
 547:Src/main.c    **** 
 584              		.loc 1 547 0
 585 0004 334A     		ldr	r2, .L20
 586 0006 9169     		ldr	r1, [r2, #24]
 587 0008 8020     		movs	r0, #128
 588 000a 0001     		lsls	r0, r0, #4
 589 000c 0143     		orrs	r1, r0
 590 000e 9161     		str	r1, [r2, #24]
 591 0010 9369     		ldr	r3, [r2, #24]
 592 0012 0340     		ands	r3, r0
 593 0014 0193     		str	r3, [sp, #4]
 594 0016 019B     		ldr	r3, [sp, #4]
 595              	.LBE15:
 549:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 596              		.loc 1 549 0
 597 0018 1022     		movs	r2, #16
 598 001a 0021     		movs	r1, #0
 599 001c 12A8     		add	r0, sp, #72
 600 001e FFF7FEFF 		bl	memset
 601              	.LVL24:
 550:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 602              		.loc 1 550 0
 603 0022 0822     		movs	r2, #8
 604 0024 0021     		movs	r1, #0
 605 0026 10A8     		add	r0, sp, #64
 606 0028 FFF7FEFF 		bl	memset
 607              	.LVL25:
 551:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 608              		.loc 1 551 0
 609 002c 1C22     		movs	r2, #28
 610 002e 0021     		movs	r1, #0
 611 0030 09A8     		add	r0, sp, #36
 612 0032 FFF7FEFF 		bl	memset
 613              	.LVL26:
 552:Src/main.c    **** 
 614              		.loc 1 552 0
 615 0036 1C22     		movs	r2, #28
 616 0038 0021     		movs	r1, #0
 617 003a 02A8     		add	r0, sp, #8
 618 003c FFF7FEFF 		bl	memset
 619              	.LVL27:
 554:Src/main.c    ****   htim1.Init.Prescaler = 8; // 2048
 620              		.loc 1 554 0
 621 0040 254D     		ldr	r5, .L20+4
 622 0042 264B     		ldr	r3, .L20+8
 623 0044 2B60     		str	r3, [r5]
ARM GAS  /tmp/ccfRjGDx.s 			page 25


 555:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 624              		.loc 1 555 0
 625 0046 0823     		movs	r3, #8
 626 0048 6B60     		str	r3, [r5, #4]
 556:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 627              		.loc 1 556 0
 628 004a 0024     		movs	r4, #0
 629 004c AC60     		str	r4, [r5, #8]
 557:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 630              		.loc 1 557 0
 631 004e 8026     		movs	r6, #128
 632 0050 7601     		lsls	r6, r6, #5
 633 0052 EE60     		str	r6, [r5, #12]
 558:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 634              		.loc 1 558 0
 635 0054 2C61     		str	r4, [r5, #16]
 559:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 636              		.loc 1 559 0
 637 0056 6C61     		str	r4, [r5, #20]
 560:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 638              		.loc 1 560 0
 639 0058 7833     		adds	r3, r3, #120
 640 005a AB61     		str	r3, [r5, #24]
 561:Src/main.c    **** 
 641              		.loc 1 561 0
 642 005c 2800     		movs	r0, r5
 643 005e FFF7FEFF 		bl	HAL_TIM_Base_Init
 644              	.LVL28:
 563:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 645              		.loc 1 563 0
 646 0062 1296     		str	r6, [sp, #72]
 564:Src/main.c    **** 
 647              		.loc 1 564 0
 648 0064 12A9     		add	r1, sp, #72
 649 0066 2800     		movs	r0, r5
 650 0068 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 651              	.LVL29:
 566:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 652              		.loc 1 566 0
 653 006c 2800     		movs	r0, r5
 654 006e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 655              	.LVL30:
 567:Src/main.c    **** 
 656              		.loc 1 567 0
 657 0072 2800     		movs	r0, r5
 658 0074 FFF7FEFF 		bl	HAL_TIM_OC_Init
 659              	.LVL31:
 569:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 660              		.loc 1 569 0
 661 0078 1094     		str	r4, [sp, #64]
 570:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 662              		.loc 1 570 0
 663 007a 1194     		str	r4, [sp, #68]
 571:Src/main.c    **** 
 664              		.loc 1 571 0
 665 007c 10A9     		add	r1, sp, #64
 666 007e 2800     		movs	r0, r5
ARM GAS  /tmp/ccfRjGDx.s 			page 26


 667 0080 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 668              	.LVL32:
 573:Src/main.c    ****   sConfigOC.Pulse = 0;
 669              		.loc 1 573 0
 670 0084 6023     		movs	r3, #96
 671 0086 0993     		str	r3, [sp, #36]
 574:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 672              		.loc 1 574 0
 673 0088 0A94     		str	r4, [sp, #40]
 575:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 674              		.loc 1 575 0
 675 008a 0B94     		str	r4, [sp, #44]
 576:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 676              		.loc 1 576 0
 677 008c 0C94     		str	r4, [sp, #48]
 577:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 678              		.loc 1 577 0
 679 008e 0D94     		str	r4, [sp, #52]
 578:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 680              		.loc 1 578 0
 681 0090 0E94     		str	r4, [sp, #56]
 579:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 682              		.loc 1 579 0
 683 0092 0F94     		str	r4, [sp, #60]
 580:Src/main.c    **** 
 684              		.loc 1 580 0
 685 0094 0022     		movs	r2, #0
 686 0096 09A9     		add	r1, sp, #36
 687 0098 2800     		movs	r0, r5
 688 009a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 689              	.LVL33:
 582:Src/main.c    ****   sConfigOC.Pulse = 10;
 690              		.loc 1 582 0
 691 009e 7023     		movs	r3, #112
 692 00a0 0993     		str	r3, [sp, #36]
 583:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 693              		.loc 1 583 0
 694 00a2 663B     		subs	r3, r3, #102
 695 00a4 0A93     		str	r3, [sp, #40]
 584:Src/main.c    **** 
 696              		.loc 1 584 0
 697 00a6 0C22     		movs	r2, #12
 698 00a8 09A9     		add	r1, sp, #36
 699 00aa 2800     		movs	r0, r5
 700 00ac FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 701              	.LVL34:
 586:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 702              		.loc 1 586 0
 703 00b0 0294     		str	r4, [sp, #8]
 587:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 704              		.loc 1 587 0
 705 00b2 0394     		str	r4, [sp, #12]
 588:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 706              		.loc 1 588 0
 707 00b4 0494     		str	r4, [sp, #16]
 589:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 708              		.loc 1 589 0
ARM GAS  /tmp/ccfRjGDx.s 			page 27


 709 00b6 0594     		str	r4, [sp, #20]
 590:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 710              		.loc 1 590 0
 711 00b8 0694     		str	r4, [sp, #24]
 591:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 712              		.loc 1 591 0
 713 00ba 8023     		movs	r3, #128
 714 00bc 9B01     		lsls	r3, r3, #6
 715 00be 0793     		str	r3, [sp, #28]
 592:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 716              		.loc 1 592 0
 717 00c0 0894     		str	r4, [sp, #32]
 593:Src/main.c    **** 
 718              		.loc 1 593 0
 719 00c2 02A9     		add	r1, sp, #8
 720 00c4 2800     		movs	r0, r5
 721 00c6 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 722              	.LVL35:
 595:Src/main.c    **** }
 723              		.loc 1 595 0
 724 00ca 2800     		movs	r0, r5
 725 00cc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 726              	.LVL36:
 596:Src/main.c    **** /*
 727              		.loc 1 596 0
 728 00d0 16B0     		add	sp, sp, #88
 729              		@ sp needed
 730 00d2 70BD     		pop	{r4, r5, r6, pc}
 731              	.L21:
 732              		.align	2
 733              	.L20:
 734 00d4 00100240 		.word	1073876992
 735 00d8 00000000 		.word	htim1
 736 00dc 002C0140 		.word	1073818624
 737              		.cfi_endproc
 738              	.LFE55:
 740              		.section	.text.MX_IWDG_Init,"ax",%progbits
 741              		.align	1
 742              		.syntax unified
 743              		.code	16
 744              		.thumb_func
 745              		.fpu softvfp
 747              	MX_IWDG_Init:
 748              	.LFB53:
 511:Src/main.c    ****   hiwdg.Instance = IWDG;
 749              		.loc 1 511 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753 0000 10B5     		push	{r4, lr}
 754              	.LCFI12:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 4, -8
 757              		.cfi_offset 14, -4
 512:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 758              		.loc 1 512 0
 759 0002 0548     		ldr	r0, .L23
ARM GAS  /tmp/ccfRjGDx.s 			page 28


 760 0004 054B     		ldr	r3, .L23+4
 761 0006 0360     		str	r3, [r0]
 513:Src/main.c    ****   hiwdg.Init.Window = 4095;
 762              		.loc 1 513 0
 763 0008 0023     		movs	r3, #0
 764 000a 4360     		str	r3, [r0, #4]
 514:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 765              		.loc 1 514 0
 766 000c 044B     		ldr	r3, .L23+8
 767 000e C360     		str	r3, [r0, #12]
 515:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 768              		.loc 1 515 0
 769 0010 8360     		str	r3, [r0, #8]
 516:Src/main.c    **** }
 770              		.loc 1 516 0
 771 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 772              	.LVL37:
 517:Src/main.c    **** 
 773              		.loc 1 517 0
 774              		@ sp needed
 775 0016 10BD     		pop	{r4, pc}
 776              	.L24:
 777              		.align	2
 778              	.L23:
 779 0018 00000000 		.word	hiwdg
 780 001c 00300040 		.word	1073754112
 781 0020 FF0F0000 		.word	4095
 782              		.cfi_endproc
 783              	.LFE53:
 785              		.global	__aeabi_ui2f
 786              		.global	__aeabi_f2d
 787              		.global	__aeabi_ddiv
 788              		.global	__aeabi_dmul
 789              		.global	__aeabi_dsub
 790              		.global	__aeabi_d2f
 791              		.global	__aeabi_i2f
 792              		.global	__aeabi_fsub
 793              		.global	__aeabi_fmul
 794              		.global	__aeabi_fdiv
 795              		.global	__aeabi_fadd
 796              		.global	__aeabi_i2d
 797              		.global	__aeabi_dadd
 798              		.global	__aeabi_fcmpge
 799              		.global	__aeabi_fcmple
 800              		.global	__aeabi_fcmpgt
 801              		.global	__aeabi_fcmplt
 802              		.global	__aeabi_f2iz
 803              		.section	.text.reg,"ax",%progbits
 804              		.align	1
 805              		.global	reg
 806              		.syntax unified
 807              		.code	16
 808              		.thumb_func
 809              		.fpu softvfp
 811              	reg:
 812              	.LFB38:
 240:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
ARM GAS  /tmp/ccfRjGDx.s 			page 29


 813              		.loc 1 240 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 8
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 818              	.LCFI13:
 819              		.cfi_def_cfa_offset 20
 820              		.cfi_offset 4, -20
 821              		.cfi_offset 5, -16
 822              		.cfi_offset 6, -12
 823              		.cfi_offset 7, -8
 824              		.cfi_offset 14, -4
 825 0002 C646     		mov	lr, r8
 826 0004 00B5     		push	{lr}
 827              	.LCFI14:
 828              		.cfi_def_cfa_offset 24
 829              		.cfi_offset 8, -24
 830 0006 82B0     		sub	sp, sp, #8
 831              	.LCFI15:
 832              		.cfi_def_cfa_offset 32
 241:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 833              		.loc 1 241 0
 834 0008 944F     		ldr	r7, .L48
 835 000a F888     		ldrh	r0, [r7, #6]
 836 000c FFF7FEFF 		bl	__aeabi_ui2f
 837              	.LVL38:
 838 0010 FFF7FEFF 		bl	__aeabi_f2d
 839              	.LVL39:
 840 0014 0022     		movs	r2, #0
 841 0016 924B     		ldr	r3, .L48+4
 842 0018 FFF7FEFF 		bl	__aeabi_ddiv
 843              	.LVL40:
 844 001c 914A     		ldr	r2, .L48+8
 845 001e 924B     		ldr	r3, .L48+12
 846 0020 FFF7FEFF 		bl	__aeabi_dmul
 847              	.LVL41:
 848 0024 0022     		movs	r2, #0
 849 0026 914B     		ldr	r3, .L48+16
 850 0028 FFF7FEFF 		bl	__aeabi_dsub
 851              	.LVL42:
 852 002c 904A     		ldr	r2, .L48+20
 853 002e 914B     		ldr	r3, .L48+24
 854 0030 FFF7FEFF 		bl	__aeabi_ddiv
 855              	.LVL43:
 856 0034 FFF7FEFF 		bl	__aeabi_d2f
 857              	.LVL44:
 858 0038 051C     		adds	r5, r0, #0
 859 003a 8F4C     		ldr	r4, .L48+28
 860 003c 6061     		str	r0, [r4, #20]
 242:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 861              		.loc 1 242 0
 862 003e 7888     		ldrh	r0, [r7, #2]
 863 0040 8E4E     		ldr	r6, .L48+32
 864 0042 3368     		ldr	r3, [r6]
 865 0044 9846     		mov	r8, r3
 866 0046 FFF7FEFF 		bl	__aeabi_i2f
 867              	.LVL45:
ARM GAS  /tmp/ccfRjGDx.s 			page 30


 868 004a 4146     		mov	r1, r8
 869 004c FFF7FEFF 		bl	__aeabi_fsub
 870              	.LVL46:
 871 0050 7168     		ldr	r1, [r6, #4]
 872 0052 FFF7FEFF 		bl	__aeabi_fmul
 873              	.LVL47:
 874 0056 8A49     		ldr	r1, .L48+36
 875 0058 FFF7FEFF 		bl	__aeabi_fdiv
 876              	.LVL48:
 877 005c 011C     		adds	r1, r0, #0
 878 005e 281C     		adds	r0, r5, #0
 879 0060 FFF7FEFF 		bl	__aeabi_fadd
 880              	.LVL49:
 881 0064 051C     		adds	r5, r0, #0
 882 0066 2060     		str	r0, [r4]
 243:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 883              		.loc 1 243 0
 884 0068 B888     		ldrh	r0, [r7, #4]
 885 006a FFF7FEFF 		bl	__aeabi_i2d
 886              	.LVL50:
 887 006e 0022     		movs	r2, #0
 888 0070 7B4B     		ldr	r3, .L48+4
 889 0072 FFF7FEFF 		bl	__aeabi_ddiv
 890              	.LVL51:
 891 0076 7B4A     		ldr	r2, .L48+8
 892 0078 7B4B     		ldr	r3, .L48+12
 893 007a FFF7FEFF 		bl	__aeabi_dmul
 894              	.LVL52:
 895 007e 794A     		ldr	r2, .L48+8
 896 0080 804B     		ldr	r3, .L48+40
 897 0082 FFF7FEFF 		bl	__aeabi_dmul
 898              	.LVL53:
 899 0086 FFF7FEFF 		bl	__aeabi_d2f
 900              	.LVL54:
 901 008a A060     		str	r0, [r4, #8]
 244:Src/main.c    **** 
 902              		.loc 1 244 0
 903 008c 7E49     		ldr	r1, .L48+44
 904 008e E068     		ldr	r0, [r4, #12]
 905 0090 FFF7FEFF 		bl	__aeabi_fmul
 906              	.LVL55:
 907 0094 FFF7FEFF 		bl	__aeabi_f2d
 908              	.LVL56:
 909 0098 0090     		str	r0, [sp]
 910 009a 0191     		str	r1, [sp, #4]
 911 009c 3888     		ldrh	r0, [r7]
 912 009e FFF7FEFF 		bl	__aeabi_i2d
 913              	.LVL57:
 914 00a2 0022     		movs	r2, #0
 915 00a4 6E4B     		ldr	r3, .L48+4
 916 00a6 FFF7FEFF 		bl	__aeabi_ddiv
 917              	.LVL58:
 918 00aa 6E4A     		ldr	r2, .L48+8
 919 00ac 6E4B     		ldr	r3, .L48+12
 920 00ae FFF7FEFF 		bl	__aeabi_dmul
 921              	.LVL59:
 922 00b2 764A     		ldr	r2, .L48+48
ARM GAS  /tmp/ccfRjGDx.s 			page 31


 923 00b4 764B     		ldr	r3, .L48+52
 924 00b6 FFF7FEFF 		bl	__aeabi_dmul
 925              	.LVL60:
 926 00ba 764A     		ldr	r2, .L48+56
 927 00bc 764B     		ldr	r3, .L48+60
 928 00be FFF7FEFF 		bl	__aeabi_ddiv
 929              	.LVL61:
 930 00c2 0022     		movs	r2, #0
 931 00c4 754B     		ldr	r3, .L48+64
 932 00c6 FFF7FEFF 		bl	__aeabi_dmul
 933              	.LVL62:
 934 00ca 0200     		movs	r2, r0
 935 00cc 0B00     		movs	r3, r1
 936 00ce 0098     		ldr	r0, [sp]
 937 00d0 0199     		ldr	r1, [sp, #4]
 938 00d2 FFF7FEFF 		bl	__aeabi_dadd
 939              	.LVL63:
 940 00d6 FFF7FEFF 		bl	__aeabi_d2f
 941              	.LVL64:
 942 00da E060     		str	r0, [r4, #12]
 246:Src/main.c    **** 
 943              		.loc 1 246 0
 944 00dc 6A49     		ldr	r1, .L48+44
 945 00de 6068     		ldr	r0, [r4, #4]
 946 00e0 FFF7FEFF 		bl	__aeabi_fmul
 947              	.LVL65:
 948 00e4 061C     		adds	r6, r0, #0
 949 00e6 6E49     		ldr	r1, .L48+68
 950 00e8 281C     		adds	r0, r5, #0
 951 00ea FFF7FEFF 		bl	__aeabi_fmul
 952              	.LVL66:
 953 00ee 011C     		adds	r1, r0, #0
 954 00f0 301C     		adds	r0, r6, #0
 955 00f2 FFF7FEFF 		bl	__aeabi_fadd
 956              	.LVL67:
 957 00f6 051C     		adds	r5, r0, #0
 958 00f8 6060     		str	r0, [r4, #4]
 249:Src/main.c    ****     r.error = r.target - s.ttipavg;
 959              		.loc 1 249 0
 960 00fa 6A4B     		ldr	r3, .L48+72
 961 00fc 1C68     		ldr	r4, [r3]
 962 00fe DE6A     		ldr	r6, [r3, #44]
 963 0100 311C     		adds	r1, r6, #0
 964 0102 201C     		adds	r0, r4, #0
 965 0104 FFF7FEFF 		bl	__aeabi_fsub
 966              	.LVL68:
 967 0108 011C     		adds	r1, r0, #0
 968 010a 281C     		adds	r0, r5, #0
 969 010c FFF7FEFF 		bl	__aeabi_fcmpge
 970              	.LVL69:
 971 0110 0028     		cmp	r0, #0
 972 0112 58D0     		beq	.L26
 249:Src/main.c    ****     r.error = r.target - s.ttipavg;
 973              		.loc 1 249 0 is_stmt 0 discriminator 1
 974 0114 311C     		adds	r1, r6, #0
 975 0116 201C     		adds	r0, r4, #0
 976 0118 FFF7FEFF 		bl	__aeabi_fadd
ARM GAS  /tmp/ccfRjGDx.s 			page 32


 977              	.LVL70:
 978 011c 011C     		adds	r1, r0, #0
 979 011e 281C     		adds	r0, r5, #0
 980 0120 FFF7FEFF 		bl	__aeabi_fcmple
 981              	.LVL71:
 982 0124 0028     		cmp	r0, #0
 983 0126 4ED0     		beq	.L26
 250:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 984              		.loc 1 250 0 is_stmt 1
 985 0128 291C     		adds	r1, r5, #0
 986 012a 201C     		adds	r0, r4, #0
 987 012c FFF7FEFF 		bl	__aeabi_fsub
 988              	.LVL72:
 989 0130 051C     		adds	r5, r0, #0
 990 0132 5C4F     		ldr	r7, .L48+72
 991 0134 7860     		str	r0, [r7, #4]
 251:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 992              		.loc 1 251 0
 993 0136 FC68     		ldr	r4, [r7, #12]
 994 0138 FE69     		ldr	r6, [r7, #28]
 995 013a 311C     		adds	r1, r6, #0
 996 013c FFF7FEFF 		bl	__aeabi_fmul
 997              	.LVL73:
 998 0140 011C     		adds	r1, r0, #0
 999 0142 201C     		adds	r0, r4, #0
 1000 0144 FFF7FEFF 		bl	__aeabi_fadd
 1001              	.LVL74:
 1002 0148 041C     		adds	r4, r0, #0
 252:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 1003              		.loc 1 252 0
 1004 014a 3F69     		ldr	r7, [r7, #16]
 1005 014c 391C     		adds	r1, r7, #0
 1006 014e FFF7FEFF 		bl	__aeabi_fcmpgt
 1007              	.LVL75:
 1008 0152 0028     		cmp	r0, #0
 1009 0154 09D1     		bne	.L29
 252:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 1010              		.loc 1 252 0 is_stmt 0 discriminator 2
 1011 0156 8023     		movs	r3, #128
 1012 0158 1B06     		lsls	r3, r3, #24
 1013 015a F918     		adds	r1, r7, r3
 1014 015c 0F1C     		adds	r7, r1, #0
 1015 015e 201C     		adds	r0, r4, #0
 1016 0160 FFF7FEFF 		bl	__aeabi_fcmplt
 1017              	.LVL76:
 1018 0164 0028     		cmp	r0, #0
 1019 0166 00D1     		bne	.L29
 1020 0168 271C     		adds	r7, r4, #0
 1021              	.L29:
 252:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 1022              		.loc 1 252 0 discriminator 8
 1023 016a 4E4C     		ldr	r4, .L48+72
 1024 016c E760     		str	r7, [r4, #12]
 253:Src/main.c    ****     r.duty = (r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror)*MAX_DUTY;
 1025              		.loc 1 253 0 is_stmt 1 discriminator 8
 1026 016e A168     		ldr	r1, [r4, #8]
 1027 0170 281C     		adds	r0, r5, #0
ARM GAS  /tmp/ccfRjGDx.s 			page 33


 1028 0172 FFF7FEFF 		bl	__aeabi_fsub
 1029              	.LVL77:
 1030 0176 311C     		adds	r1, r6, #0
 1031 0178 FFF7FEFF 		bl	__aeabi_fdiv
 1032              	.LVL78:
 1033 017c 061C     		adds	r6, r0, #0
 1034 017e 6061     		str	r0, [r4, #20]
 254:Src/main.c    ****     r.errorprior = r.error;
 1035              		.loc 1 254 0 discriminator 8
 1036 0180 216A     		ldr	r1, [r4, #32]
 1037 0182 281C     		adds	r0, r5, #0
 1038 0184 FFF7FEFF 		bl	__aeabi_fmul
 1039              	.LVL79:
 1040 0188 0090     		str	r0, [sp]
 1041 018a 391C     		adds	r1, r7, #0
 1042 018c 606A     		ldr	r0, [r4, #36]
 1043 018e FFF7FEFF 		bl	__aeabi_fmul
 1044              	.LVL80:
 1045 0192 011C     		adds	r1, r0, #0
 1046 0194 0098     		ldr	r0, [sp]
 1047 0196 FFF7FEFF 		bl	__aeabi_fadd
 1048              	.LVL81:
 1049 019a 071C     		adds	r7, r0, #0
 1050 019c A16A     		ldr	r1, [r4, #40]
 1051 019e 301C     		adds	r0, r6, #0
 1052 01a0 FFF7FEFF 		bl	__aeabi_fmul
 1053              	.LVL82:
 1054 01a4 011C     		adds	r1, r0, #0
 1055 01a6 381C     		adds	r0, r7, #0
 1056 01a8 FFF7FEFF 		bl	__aeabi_fadd
 1057              	.LVL83:
 1058 01ac 061C     		adds	r6, r0, #0
 1059 01ae 3E4B     		ldr	r3, .L48+76
 1060 01b0 1888     		ldrh	r0, [r3]
 1061 01b2 FFF7FEFF 		bl	__aeabi_i2f
 1062              	.LVL84:
 1063 01b6 311C     		adds	r1, r6, #0
 1064 01b8 FFF7FEFF 		bl	__aeabi_fmul
 1065              	.LVL85:
 1066 01bc FFF7FEFF 		bl	__aeabi_f2iz
 1067              	.LVL86:
 1068 01c0 2083     		strh	r0, [r4, #24]
 255:Src/main.c    ****   } else {
 1069              		.loc 1 255 0 discriminator 8
 1070 01c2 A560     		str	r5, [r4, #8]
 1071 01c4 0BE0     		b	.L31
 1072              	.L26:
 257:Src/main.c    ****       r.duty = MAX_DUTY;
 1073              		.loc 1 257 0
 1074 01c6 211C     		adds	r1, r4, #0
 1075 01c8 281C     		adds	r0, r5, #0
 1076 01ca FFF7FEFF 		bl	__aeabi_fcmple
 1077              	.LVL87:
 1078 01ce 0028     		cmp	r0, #0
 1079 01d0 31D0     		beq	.L45
 258:Src/main.c    ****       r.error = 12.0;
 1080              		.loc 1 258 0
ARM GAS  /tmp/ccfRjGDx.s 			page 34


 1081 01d2 344B     		ldr	r3, .L48+72
 1082 01d4 344A     		ldr	r2, .L48+76
 1083 01d6 1288     		ldrh	r2, [r2]
 1084 01d8 1A83     		strh	r2, [r3, #24]
 259:Src/main.c    ****     } else {
 1085              		.loc 1 259 0
 1086 01da 344A     		ldr	r2, .L48+80
 1087 01dc 5A60     		str	r2, [r3, #4]
 1088              	.L31:
 266:Src/main.c    **** 
 1089              		.loc 1 266 0
 1090 01de 314B     		ldr	r3, .L48+72
 1091 01e0 1822     		movs	r2, #24
 1092 01e2 9B5E     		ldrsh	r3, [r3, r2]
 1093 01e4 304A     		ldr	r2, .L48+76
 1094 01e6 1488     		ldrh	r4, [r2]
 1095 01e8 A342     		cmp	r3, r4
 1096 01ea 2CDC     		bgt	.L34
 266:Src/main.c    **** 
 1097              		.loc 1 266 0 is_stmt 0 discriminator 1
 1098 01ec 1D1C     		adds	r5, r3, #0
 1099 01ee 002B     		cmp	r3, #0
 1100 01f0 27DB     		blt	.L46
 1101              	.L35:
 1102 01f2 2DB2     		sxth	r5, r5
 1103              	.L36:
 266:Src/main.c    **** 
 1104              		.loc 1 266 0 discriminator 4
 1105 01f4 2B4B     		ldr	r3, .L48+72
 1106 01f6 1D83     		strh	r5, [r3, #24]
 268:Src/main.c    ****     MAX_DUTY = r.duty - 1;
 1107              		.loc 1 268 0 is_stmt 1 discriminator 4
 1108 01f8 1F4B     		ldr	r3, .L48+28
 1109 01fa D868     		ldr	r0, [r3, #12]
 1110 01fc 1969     		ldr	r1, [r3, #16]
 1111 01fe FFF7FEFF 		bl	__aeabi_fcmpgt
 1112              	.LVL88:
 1113 0202 0028     		cmp	r0, #0
 1114 0204 01D0     		beq	.L37
 268:Src/main.c    ****     MAX_DUTY = r.duty - 1;
 1115              		.loc 1 268 0 is_stmt 0 discriminator 1
 1116 0206 642D     		cmp	r5, #100
 1117 0208 1FDC     		bgt	.L47
 1118              	.L37:
 272:Src/main.c    ****     if(MAX_DUTY >= 3990) MAX_DUTY = 3990;
 1119              		.loc 1 272 0 is_stmt 1
 1120 020a 0134     		adds	r4, r4, #1
 1121 020c A4B2     		uxth	r4, r4
 1122 020e 264B     		ldr	r3, .L48+76
 1123 0210 1C80     		strh	r4, [r3]
 273:Src/main.c    ****   }
 1124              		.loc 1 273 0
 1125 0212 274B     		ldr	r3, .L48+84
 1126 0214 9C42     		cmp	r4, r3
 1127 0216 02D9     		bls	.L39
 273:Src/main.c    ****   }
 1128              		.loc 1 273 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccfRjGDx.s 			page 35


 1129 0218 234B     		ldr	r3, .L48+76
 1130 021a 264A     		ldr	r2, .L48+88
 1131 021c 1A80     		strh	r2, [r3]
 1132              	.L39:
 276:Src/main.c    **** 
 1133              		.loc 1 276 0 is_stmt 1
 1134 021e 264B     		ldr	r3, .L48+92
 1135 0220 1B68     		ldr	r3, [r3]
 1136 0222 204A     		ldr	r2, .L48+72
 1137 0224 1821     		movs	r1, #24
 1138 0226 525E     		ldrsh	r2, [r2, r1]
 1139 0228 5A63     		str	r2, [r3, #52]
 278:Src/main.c    **** }
 1140              		.loc 1 278 0
 1141 022a 244A     		ldr	r2, .L48+96
 1142 022c 1A64     		str	r2, [r3, #64]
 279:Src/main.c    **** 
 1143              		.loc 1 279 0
 1144 022e 02B0     		add	sp, sp, #8
 1145              		@ sp needed
 1146 0230 04BC     		pop	{r2}
 1147 0232 9046     		mov	r8, r2
 1148 0234 F0BD     		pop	{r4, r5, r6, r7, pc}
 1149              	.L45:
 261:Src/main.c    ****       r.error = 0.0;
 1150              		.loc 1 261 0
 1151 0236 1B4B     		ldr	r3, .L48+72
 1152 0238 0022     		movs	r2, #0
 1153 023a 1A83     		strh	r2, [r3, #24]
 262:Src/main.c    ****     }
 1154              		.loc 1 262 0
 1155 023c 0022     		movs	r2, #0
 1156 023e 5A60     		str	r2, [r3, #4]
 1157 0240 CDE7     		b	.L31
 1158              	.L46:
 266:Src/main.c    **** 
 1159              		.loc 1 266 0 discriminator 1
 1160 0242 0025     		movs	r5, #0
 1161 0244 D5E7     		b	.L35
 1162              	.L34:
 266:Src/main.c    **** 
 1163              		.loc 1 266 0 is_stmt 0 discriminator 2
 1164 0246 25B2     		sxth	r5, r4
 1165 0248 D4E7     		b	.L36
 1166              	.L47:
 269:Src/main.c    ****     r.duty -= 100;
 1167              		.loc 1 269 0 is_stmt 1
 1168 024a ADB2     		uxth	r5, r5
 1169 024c 6A1E     		subs	r2, r5, #1
 1170 024e 164B     		ldr	r3, .L48+76
 1171 0250 1A80     		strh	r2, [r3]
 270:Src/main.c    ****   } else {
 1172              		.loc 1 270 0
 1173 0252 643D     		subs	r5, r5, #100
 1174 0254 134B     		ldr	r3, .L48+72
 1175 0256 1D83     		strh	r5, [r3, #24]
 1176 0258 E1E7     		b	.L39
ARM GAS  /tmp/ccfRjGDx.s 			page 36


 1177              	.L49:
 1178 025a C046     		.align	2
 1179              	.L48:
 1180 025c 00000000 		.word	.LANCHOR0
 1181 0260 00FEAF40 		.word	1085275648
 1182 0264 66666666 		.word	1717986918
 1183 0268 66660A40 		.word	1074423398
 1184 026c 0000E03F 		.word	1071644672
 1185 0270 7B14AE47 		.word	1202590843
 1186 0274 E17A843F 		.word	1065646817
 1187 0278 00000000 		.word	.LANCHOR1
 1188 027c 00000000 		.word	.LANCHOR2
 1189 0280 00007A44 		.word	1148846080
 1190 0284 66661A40 		.word	1075471974
 1191 0288 48E17A3F 		.word	1065017672
 1192 028c 25068195 		.word	-1786706395
 1193 0290 438BFA3F 		.word	1073384259
 1194 0294 B81E85EB 		.word	-343597384
 1195 0298 51B8E63F 		.word	1072085073
 1196 029c E07A943F 		.word	1066695392
 1197 02a0 00D7A33C 		.word	1017370368
 1198 02a4 00000000 		.word	.LANCHOR3
 1199 02a8 00000000 		.word	.LANCHOR4
 1200 02ac 00004041 		.word	1094713344
 1201 02b0 950F0000 		.word	3989
 1202 02b4 960F0000 		.word	3990
 1203 02b8 00000000 		.word	htim1
 1204 02bc D20F0000 		.word	4050
 1205              		.cfi_endproc
 1206              	.LFE38:
 1208              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1209              		.align	1
 1210              		.global	HAL_TIM_PeriodElapsedCallback
 1211              		.syntax unified
 1212              		.code	16
 1213              		.thumb_func
 1214              		.fpu softvfp
 1216              	HAL_TIM_PeriodElapsedCallback:
 1217              	.LFB39:
 282:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 1218              		.loc 1 282 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              	.LVL89:
 1223 0000 10B5     		push	{r4, lr}
 1224              	.LCFI16:
 1225              		.cfi_def_cfa_offset 8
 1226              		.cfi_offset 4, -8
 1227              		.cfi_offset 14, -4
 283:Src/main.c    ****   {
 1228              		.loc 1 283 0
 1229 0002 094B     		ldr	r3, .L53
 1230 0004 1B68     		ldr	r3, [r3]
 1231 0006 002B     		cmp	r3, #0
 1232 0008 00D1     		bne	.L52
 1233              	.LVL90:
ARM GAS  /tmp/ccfRjGDx.s 			page 37


 1234              	.L50:
 290:Src/main.c    **** 
 1235              		.loc 1 290 0
 1236              		@ sp needed
 1237 000a 10BD     		pop	{r4, pc}
 1238              	.LVL91:
 1239              	.L52:
 285:Src/main.c    **** 
 1240              		.loc 1 285 0
 1241 000c 064B     		ldr	r3, .L53
 1242 000e 0022     		movs	r2, #0
 1243 0010 1A60     		str	r2, [r3]
 287:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 1244              		.loc 1 287 0
 1245 0012 8032     		adds	r2, r2, #128
 1246 0014 054C     		ldr	r4, .L53+4
 1247 0016 9200     		lsls	r2, r2, #2
 1248 0018 0549     		ldr	r1, .L53+8
 1249 001a 2000     		movs	r0, r4
 1250              	.LVL92:
 1251 001c FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 1252              	.LVL93:
 288:Src/main.c    ****   }
 1253              		.loc 1 288 0
 1254 0020 2000     		movs	r0, r4
 1255 0022 FFF7FEFF 		bl	USBD_CDC_TransmitPacket
 1256              	.LVL94:
 290:Src/main.c    **** 
 1257              		.loc 1 290 0
 1258 0026 F0E7     		b	.L50
 1259              	.L54:
 1260              		.align	2
 1261              	.L53:
 1262 0028 00000000 		.word	sendDataUSB
 1263 002c 00000000 		.word	USBD_Device
 1264 0030 00000000 		.word	UserTxBuffer
 1265              		.cfi_endproc
 1266              	.LFE39:
 1268              		.global	__aeabi_f2uiz
 1269              		.section	.text.USB_printfloat,"ax",%progbits
 1270              		.align	1
 1271              		.global	USB_printfloat
 1272              		.syntax unified
 1273              		.code	16
 1274              		.thumb_func
 1275              		.fpu softvfp
 1277              	USB_printfloat:
 1278              	.LFB40:
 292:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 1279              		.loc 1 292 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283              	.LVL95:
 1284 0000 70B5     		push	{r4, r5, r6, lr}
 1285              	.LCFI17:
 1286              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccfRjGDx.s 			page 38


 1287              		.cfi_offset 4, -16
 1288              		.cfi_offset 5, -12
 1289              		.cfi_offset 6, -8
 1290              		.cfi_offset 14, -4
 1291 0002 061C     		adds	r6, r0, #0
 293:Src/main.c    ****   sprintf(UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_buf)*10.0f));
 1292              		.loc 1 293 0
 1293 0004 104D     		ldr	r5, .L56
 1294 0006 8022     		movs	r2, #128
 1295 0008 9200     		lsls	r2, r2, #2
 1296 000a 0021     		movs	r1, #0
 1297 000c 2800     		movs	r0, r5
 1298              	.LVL96:
 1299 000e FFF7FEFF 		bl	memset
 1300              	.LVL97:
 294:Src/main.c    ****   sendDataUSB = 1;
 1301              		.loc 1 294 0
 1302 0012 301C     		adds	r0, r6, #0
 1303 0014 FFF7FEFF 		bl	__aeabi_f2uiz
 1304              	.LVL98:
 1305 0018 84B2     		uxth	r4, r0
 1306 001a 2000     		movs	r0, r4
 1307 001c FFF7FEFF 		bl	__aeabi_i2f
 1308              	.LVL99:
 1309 0020 011C     		adds	r1, r0, #0
 1310 0022 301C     		adds	r0, r6, #0
 1311 0024 FFF7FEFF 		bl	__aeabi_fsub
 1312              	.LVL100:
 1313 0028 0849     		ldr	r1, .L56+4
 1314 002a FFF7FEFF 		bl	__aeabi_fmul
 1315              	.LVL101:
 1316 002e FFF7FEFF 		bl	__aeabi_f2uiz
 1317              	.LVL102:
 1318 0032 83B2     		uxth	r3, r0
 1319 0034 2200     		movs	r2, r4
 1320 0036 0649     		ldr	r1, .L56+8
 1321 0038 2800     		movs	r0, r5
 1322 003a FFF7FEFF 		bl	sprintf
 1323              	.LVL103:
 295:Src/main.c    **** }
 1324              		.loc 1 295 0
 1325 003e 054B     		ldr	r3, .L56+12
 1326 0040 0122     		movs	r2, #1
 1327 0042 1A60     		str	r2, [r3]
 296:Src/main.c    **** 
 1328              		.loc 1 296 0
 1329              		@ sp needed
 1330              	.LVL104:
 1331 0044 70BD     		pop	{r4, r5, r6, pc}
 1332              	.L57:
 1333 0046 C046     		.align	2
 1334              	.L56:
 1335 0048 00000000 		.word	UserTxBuffer
 1336 004c 00002041 		.word	1092616192
 1337 0050 00000000 		.word	.LC16
 1338 0054 00000000 		.word	sendDataUSB
 1339              		.cfi_endproc
ARM GAS  /tmp/ccfRjGDx.s 			page 39


 1340              	.LFE40:
 1342              		.section	.text.disp_init,"ax",%progbits
 1343              		.align	1
 1344              		.global	disp_init
 1345              		.syntax unified
 1346              		.code	16
 1347              		.thumb_func
 1348              		.fpu softvfp
 1350              	disp_init:
 1351              	.LFB41:
 333:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 1352              		.loc 1 333 0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356 0000 10B5     		push	{r4, lr}
 1357              	.LCFI18:
 1358              		.cfi_def_cfa_offset 8
 1359              		.cfi_offset 4, -8
 1360              		.cfi_offset 14, -4
 1361 0002 82B0     		sub	sp, sp, #8
 1362              	.LCFI19:
 1363              		.cfi_def_cfa_offset 16
 334:Src/main.c    ****   uint16_t _cnt = 0;
 1364              		.loc 1 334 0
 1365 0004 1122     		movs	r2, #17
 1366 0006 0E49     		ldr	r1, .L62
 1367 0008 0E48     		ldr	r0, .L62+4
 1368 000a FFF7FEFF 		bl	memcpy
 1369              	.LVL105:
 335:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1370              		.loc 1 335 0
 1371 000e 0024     		movs	r4, #0
 1372              	.LVL106:
 1373              	.L59:
 336:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1374              		.loc 1 336 0 discriminator 1
 1375 0010 0D48     		ldr	r0, .L62+8
 1376 0012 FFF7FEFF 		bl	HAL_I2C_GetState
 1377              	.LVL107:
 1378 0016 2028     		cmp	r0, #32
 1379 0018 06D0     		beq	.L60
 336:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1380              		.loc 1 336 0 is_stmt 0 discriminator 2
 1381 001a 631C     		adds	r3, r4, #1
 1382 001c 9BB2     		uxth	r3, r3
 1383              	.LVL108:
 1384 001e 0B4A     		ldr	r2, .L62+12
 1385 0020 9442     		cmp	r4, r2
 1386 0022 01D8     		bhi	.L60
 336:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1387              		.loc 1 336 0
 1388 0024 1C00     		movs	r4, r3
 1389 0026 F3E7     		b	.L59
 1390              	.LVL109:
 1391              	.L60:
 337:Src/main.c    **** }
ARM GAS  /tmp/ccfRjGDx.s 			page 40


 1392              		.loc 1 337 0 is_stmt 1
 1393 0028 FA23     		movs	r3, #250
 1394 002a 9B00     		lsls	r3, r3, #2
 1395 002c 0093     		str	r3, [sp]
 1396 002e 3223     		movs	r3, #50
 1397 0030 074A     		ldr	r2, .L62+16
 1398 0032 7821     		movs	r1, #120
 1399 0034 0448     		ldr	r0, .L62+8
 1400 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1401              	.LVL110:
 338:Src/main.c    **** 
 1402              		.loc 1 338 0
 1403 003a 02B0     		add	sp, sp, #8
 1404              		@ sp needed
 1405 003c 10BD     		pop	{r4, pc}
 1406              	.L63:
 1407 003e C046     		.align	2
 1408              	.L62:
 1409 0040 00000000 		.word	.LANCHOR5
 1410 0044 00000000 		.word	screenBuffer
 1411 0048 00000000 		.word	hi2c1
 1412 004c 10270000 		.word	10000
 1413 0050 00000000 		.word	.LANCHOR6
 1414              		.cfi_endproc
 1415              	.LFE41:
 1417              		.section	.text.refresh,"ax",%progbits
 1418              		.align	1
 1419              		.global	refresh
 1420              		.syntax unified
 1421              		.code	16
 1422              		.thumb_func
 1423              		.fpu softvfp
 1425              	refresh:
 1426              	.LFB42:
 340:Src/main.c    ****   uint16_t _cnt = 0;
 1427              		.loc 1 340 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431 0000 10B5     		push	{r4, lr}
 1432              	.LCFI20:
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 4, -8
 1435              		.cfi_offset 14, -4
 1436 0002 82B0     		sub	sp, sp, #8
 1437              	.LCFI21:
 1438              		.cfi_def_cfa_offset 16
 1439              	.LVL111:
 341:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1440              		.loc 1 341 0
 1441 0004 0024     		movs	r4, #0
 1442              	.LVL112:
 1443              	.L65:
 342:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1444              		.loc 1 342 0 discriminator 1
 1445 0006 0B48     		ldr	r0, .L68
 1446 0008 FFF7FEFF 		bl	HAL_I2C_GetState
ARM GAS  /tmp/ccfRjGDx.s 			page 41


 1447              	.LVL113:
 1448 000c 2028     		cmp	r0, #32
 1449 000e 06D0     		beq	.L66
 342:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1450              		.loc 1 342 0 is_stmt 0 discriminator 2
 1451 0010 631C     		adds	r3, r4, #1
 1452 0012 9BB2     		uxth	r3, r3
 1453              	.LVL114:
 1454 0014 084A     		ldr	r2, .L68+4
 1455 0016 9442     		cmp	r4, r2
 1456 0018 01D8     		bhi	.L66
 342:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1457              		.loc 1 342 0
 1458 001a 1C00     		movs	r4, r3
 1459 001c F3E7     		b	.L65
 1460              	.LVL115:
 1461              	.L66:
 343:Src/main.c    **** }
 1462              		.loc 1 343 0 is_stmt 1
 1463 001e FA23     		movs	r3, #250
 1464 0020 9B00     		lsls	r3, r3, #2
 1465 0022 0093     		str	r3, [sp]
 1466 0024 D123     		movs	r3, #209
 1467 0026 054A     		ldr	r2, .L68+8
 1468 0028 7821     		movs	r1, #120
 1469 002a 0248     		ldr	r0, .L68
 1470 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1471              	.LVL116:
 344:Src/main.c    **** 
 1472              		.loc 1 344 0
 1473 0030 02B0     		add	sp, sp, #8
 1474              		@ sp needed
 1475 0032 10BD     		pop	{r4, pc}
 1476              	.L69:
 1477              		.align	2
 1478              	.L68:
 1479 0034 00000000 		.word	hi2c1
 1480 0038 10270000 		.word	10000
 1481 003c 00000000 		.word	screenBuffer
 1482              		.cfi_endproc
 1483              	.LFE42:
 1485              		.section	.text.clear_screen,"ax",%progbits
 1486              		.align	1
 1487              		.global	clear_screen
 1488              		.syntax unified
 1489              		.code	16
 1490              		.thumb_func
 1491              		.fpu softvfp
 1493              	clear_screen:
 1494              	.LFB43:
 346:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 1495              		.loc 1 346 0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 0
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
 1499 0000 10B5     		push	{r4, lr}
 1500              	.LCFI22:
ARM GAS  /tmp/ccfRjGDx.s 			page 42


 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 4, -8
 1503              		.cfi_offset 14, -4
 347:Src/main.c    **** }
 1504              		.loc 1 347 0
 1505 0002 C022     		movs	r2, #192
 1506 0004 0021     		movs	r1, #0
 1507 0006 0248     		ldr	r0, .L71
 1508 0008 FFF7FEFF 		bl	memset
 1509              	.LVL117:
 348:Src/main.c    **** void set_screen(void) {
 1510              		.loc 1 348 0
 1511              		@ sp needed
 1512 000c 10BD     		pop	{r4, pc}
 1513              	.L72:
 1514 000e C046     		.align	2
 1515              	.L71:
 1516 0010 11000000 		.word	screenBuffer+17
 1517              		.cfi_endproc
 1518              	.LFE43:
 1520              		.section	.text.set_screen,"ax",%progbits
 1521              		.align	1
 1522              		.global	set_screen
 1523              		.syntax unified
 1524              		.code	16
 1525              		.thumb_func
 1526              		.fpu softvfp
 1528              	set_screen:
 1529              	.LFB44:
 349:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 1530              		.loc 1 349 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
 1534 0000 10B5     		push	{r4, lr}
 1535              	.LCFI23:
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 4, -8
 1538              		.cfi_offset 14, -4
 350:Src/main.c    **** }
 1539              		.loc 1 350 0
 1540 0002 C022     		movs	r2, #192
 1541 0004 FF21     		movs	r1, #255
 1542 0006 0248     		ldr	r0, .L74
 1543 0008 FFF7FEFF 		bl	memset
 1544              	.LVL118:
 351:Src/main.c    **** 
 1545              		.loc 1 351 0
 1546              		@ sp needed
 1547 000c 10BD     		pop	{r4, pc}
 1548              	.L75:
 1549 000e C046     		.align	2
 1550              	.L74:
 1551 0010 11000000 		.word	screenBuffer+17
 1552              		.cfi_endproc
 1553              	.LFE44:
 1555              		.section	.text.write_pixel,"ax",%progbits
ARM GAS  /tmp/ccfRjGDx.s 			page 43


 1556              		.align	1
 1557              		.global	write_pixel
 1558              		.syntax unified
 1559              		.code	16
 1560              		.thumb_func
 1561              		.fpu softvfp
 1563              	write_pixel:
 1564              	.LFB46:
 359:Src/main.c    ****   if(x>95 || y >15){
 1565              		.loc 1 359 0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 0
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 1569              	.LVL119:
 1570 0000 30B5     		push	{r4, r5, lr}
 1571              	.LCFI24:
 1572              		.cfi_def_cfa_offset 12
 1573              		.cfi_offset 4, -12
 1574              		.cfi_offset 5, -8
 1575              		.cfi_offset 14, -4
 360:Src/main.c    ****     return;
 1576              		.loc 1 360 0
 1577 0002 5F28     		cmp	r0, #95
 1578 0004 1BDC     		bgt	.L76
 360:Src/main.c    ****     return;
 1579              		.loc 1 360 0 is_stmt 0 discriminator 1
 1580 0006 0F29     		cmp	r1, #15
 1581 0008 19DC     		bgt	.L76
 363:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1582              		.loc 1 363 0 is_stmt 1
 1583 000a 012A     		cmp	r2, #1
 1584 000c 18D0     		beq	.L79
 365:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1585              		.loc 1 365 0
 1586 000e 002A     		cmp	r2, #0
 1587 0010 15D1     		bne	.L76
 366:Src/main.c    ****   }
 1588              		.loc 1 366 0
 1589 0012 CC17     		asrs	r4, r1, #31
 1590 0014 0723     		movs	r3, #7
 1591 0016 1A00     		movs	r2, r3
 1592              	.LVL120:
 1593 0018 2240     		ands	r2, r4
 1594 001a 5218     		adds	r2, r2, r1
 1595 001c D210     		asrs	r2, r2, #3
 1596 001e 5500     		lsls	r5, r2, #1
 1597 0020 AA18     		adds	r2, r5, r2
 1598 0022 5501     		lsls	r5, r2, #5
 1599 0024 2818     		adds	r0, r5, r0
 1600              	.LVL121:
 1601 0026 1130     		adds	r0, r0, #17
 1602 0028 640F     		lsrs	r4, r4, #29
 1603 002a 0919     		adds	r1, r1, r4
 1604              	.LVL122:
 1605 002c 1940     		ands	r1, r3
 1606 002e 091B     		subs	r1, r1, r4
 1607 0030 09B2     		sxth	r1, r1
ARM GAS  /tmp/ccfRjGDx.s 			page 44


 1608 0032 0122     		movs	r2, #1
 1609 0034 8A40     		lsls	r2, r2, r1
 1610 0036 0E49     		ldr	r1, .L80
 1611 0038 0B5C     		ldrb	r3, [r1, r0]
 1612 003a 9343     		bics	r3, r2
 1613 003c 0B54     		strb	r3, [r1, r0]
 1614              	.L76:
 368:Src/main.c    **** 
 1615              		.loc 1 368 0
 1616              		@ sp needed
 1617 003e 30BD     		pop	{r4, r5, pc}
 1618              	.LVL123:
 1619              	.L79:
 364:Src/main.c    ****   } else if (color == 0){
 1620              		.loc 1 364 0
 1621 0040 CC17     		asrs	r4, r1, #31
 1622 0042 0723     		movs	r3, #7
 1623 0044 1A00     		movs	r2, r3
 1624              	.LVL124:
 1625 0046 2240     		ands	r2, r4
 1626 0048 5218     		adds	r2, r2, r1
 1627 004a D210     		asrs	r2, r2, #3
 1628 004c 5500     		lsls	r5, r2, #1
 1629 004e AA18     		adds	r2, r5, r2
 1630 0050 5501     		lsls	r5, r2, #5
 1631 0052 2818     		adds	r0, r5, r0
 1632              	.LVL125:
 1633 0054 1130     		adds	r0, r0, #17
 1634 0056 640F     		lsrs	r4, r4, #29
 1635 0058 0919     		adds	r1, r1, r4
 1636              	.LVL126:
 1637 005a 0B40     		ands	r3, r1
 1638 005c 1B1B     		subs	r3, r3, r4
 1639 005e 1BB2     		sxth	r3, r3
 1640 0060 0122     		movs	r2, #1
 1641 0062 9A40     		lsls	r2, r2, r3
 1642 0064 0249     		ldr	r1, .L80
 1643 0066 0B5C     		ldrb	r3, [r1, r0]
 1644 0068 1343     		orrs	r3, r2
 1645 006a 0B54     		strb	r3, [r1, r0]
 1646 006c E7E7     		b	.L76
 1647              	.L81:
 1648 006e C046     		.align	2
 1649              	.L80:
 1650 0070 00000000 		.word	screenBuffer
 1651              		.cfi_endproc
 1652              	.LFE46:
 1654              		.section	.text.draw_v_line,"ax",%progbits
 1655              		.align	1
 1656              		.global	draw_v_line
 1657              		.syntax unified
 1658              		.code	16
 1659              		.thumb_func
 1660              		.fpu softvfp
 1662              	draw_v_line:
 1663              	.LFB45:
 353:Src/main.c    ****   for(int i = 0; i <= h; i++){
ARM GAS  /tmp/ccfRjGDx.s 			page 45


 1664              		.loc 1 353 0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 8
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 1668              	.LVL127:
 1669 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1670              	.LCFI25:
 1671              		.cfi_def_cfa_offset 20
 1672              		.cfi_offset 4, -20
 1673              		.cfi_offset 5, -16
 1674              		.cfi_offset 6, -12
 1675              		.cfi_offset 7, -8
 1676              		.cfi_offset 14, -4
 1677 0002 83B0     		sub	sp, sp, #12
 1678              	.LCFI26:
 1679              		.cfi_def_cfa_offset 32
 1680 0004 0600     		movs	r6, r0
 1681 0006 0D00     		movs	r5, r1
 1682 0008 1700     		movs	r7, r2
 1683 000a 0193     		str	r3, [sp, #4]
 1684              	.LVL128:
 1685              	.LBB16:
 354:Src/main.c    ****     write_pixel(x, y+i, color);
 1686              		.loc 1 354 0
 1687 000c 0024     		movs	r4, #0
 1688 000e 06E0     		b	.L83
 1689              	.LVL129:
 1690              	.L84:
 355:Src/main.c    ****   }
 1691              		.loc 1 355 0 discriminator 3
 1692 0010 6119     		adds	r1, r4, r5
 1693 0012 09B2     		sxth	r1, r1
 1694 0014 019A     		ldr	r2, [sp, #4]
 1695 0016 3000     		movs	r0, r6
 1696 0018 FFF7FEFF 		bl	write_pixel
 1697              	.LVL130:
 354:Src/main.c    ****     write_pixel(x, y+i, color);
 1698              		.loc 1 354 0 discriminator 3
 1699 001c 0134     		adds	r4, r4, #1
 1700              	.LVL131:
 1701              	.L83:
 354:Src/main.c    ****     write_pixel(x, y+i, color);
 1702              		.loc 1 354 0 is_stmt 0 discriminator 1
 1703 001e A742     		cmp	r7, r4
 1704 0020 F6DA     		bge	.L84
 1705              	.LBE16:
 357:Src/main.c    **** 
 1706              		.loc 1 357 0 is_stmt 1
 1707 0022 03B0     		add	sp, sp, #12
 1708              		@ sp needed
 1709              	.LVL132:
 1710 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
 1711              		.cfi_endproc
 1712              	.LFE45:
 1714              		.section	.text.draw_char,"ax",%progbits
 1715              		.align	1
 1716              		.global	draw_char
ARM GAS  /tmp/ccfRjGDx.s 			page 46


 1717              		.syntax unified
 1718              		.code	16
 1719              		.thumb_func
 1720              		.fpu softvfp
 1722              	draw_char:
 1723              	.LFB47:
 372:Src/main.c    ****     c = c & 0x7F;
 1724              		.loc 1 372 0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 0
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 1728              	.LVL133:
 1729 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1730              	.LCFI27:
 1731              		.cfi_def_cfa_offset 20
 1732              		.cfi_offset 4, -20
 1733              		.cfi_offset 5, -16
 1734              		.cfi_offset 6, -12
 1735              		.cfi_offset 7, -8
 1736              		.cfi_offset 14, -4
 1737 0002 C646     		mov	lr, r8
 1738 0004 00B5     		push	{lr}
 1739              	.LCFI28:
 1740              		.cfi_def_cfa_offset 24
 1741              		.cfi_offset 8, -24
 1742 0006 0F00     		movs	r7, r1
 1743 0008 9046     		mov	r8, r2
 373:Src/main.c    ****     if (c < ' ') {
 1744              		.loc 1 373 0
 1745 000a 7F23     		movs	r3, #127
 1746              	.LVL134:
 1747 000c 0340     		ands	r3, r0
 1748              	.LVL135:
 374:Src/main.c    ****         c = 0;
 1749              		.loc 1 374 0
 1750 000e 1F2B     		cmp	r3, #31
 1751 0010 08D9     		bls	.L92
 377:Src/main.c    ****     }
 1752              		.loc 1 377 0
 1753 0012 203B     		subs	r3, r3, #32
 1754              	.LVL136:
 1755 0014 DBB2     		uxtb	r3, r3
 1756              	.LVL137:
 1757              	.L86:
 379:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 1758              		.loc 1 379 0
 1759 0016 5A00     		lsls	r2, r3, #1
 1760              	.LVL138:
 1761 0018 D318     		adds	r3, r2, r3
 1762              	.LVL139:
 1763 001a 5E00     		lsls	r6, r3, #1
 1764 001c 114B     		ldr	r3, .L96
 1765 001e F618     		adds	r6, r6, r3
 1766              	.LVL140:
 1767              	.LBB17:
 380:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1768              		.loc 1 380 0
ARM GAS  /tmp/ccfRjGDx.s 			page 47


 1769 0020 0025     		movs	r5, #0
 1770 0022 18E0     		b	.L87
 1771              	.LVL141:
 1772              	.L92:
 1773              	.LBE17:
 375:Src/main.c    ****     } else {
 1774              		.loc 1 375 0
 1775 0024 0023     		movs	r3, #0
 1776              	.LVL142:
 1777 0026 F6E7     		b	.L86
 1778              	.LVL143:
 1779              	.L88:
 1780              	.LBB20:
 1781              	.LBB18:
 385:Src/main.c    ****             }
 1782              		.loc 1 385 0
 1783 0028 4346     		mov	r3, r8
 1784 002a 1919     		adds	r1, r3, r4
 1785 002c 7819     		adds	r0, r7, r5
 1786 002e 0022     		movs	r2, #0
 1787 0030 FFF7FEFF 		bl	write_pixel
 1788              	.LVL144:
 1789              	.L89:
 381:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1790              		.loc 1 381 0 discriminator 2
 1791 0034 0134     		adds	r4, r4, #1
 1792              	.LVL145:
 1793 0036 E4B2     		uxtb	r4, r4
 1794              	.LVL146:
 1795              	.L91:
 381:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1796              		.loc 1 381 0 is_stmt 0 discriminator 1
 1797 0038 072C     		cmp	r4, #7
 1798 003a 0AD8     		bhi	.L94
 382:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 1799              		.loc 1 382 0 is_stmt 1
 1800 003c 735D     		ldrb	r3, [r6, r5]
 1801 003e 2341     		asrs	r3, r3, r4
 1802 0040 DB07     		lsls	r3, r3, #31
 1803 0042 F1D5     		bpl	.L88
 383:Src/main.c    ****             } else {
 1804              		.loc 1 383 0
 1805 0044 4346     		mov	r3, r8
 1806 0046 1919     		adds	r1, r3, r4
 1807 0048 7819     		adds	r0, r7, r5
 1808 004a 0122     		movs	r2, #1
 1809 004c FFF7FEFF 		bl	write_pixel
 1810              	.LVL147:
 1811 0050 F0E7     		b	.L89
 1812              	.L94:
 1813              	.LBE18:
 380:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1814              		.loc 1 380 0 discriminator 2
 1815 0052 0135     		adds	r5, r5, #1
 1816              	.LVL148:
 1817 0054 EDB2     		uxtb	r5, r5
 1818              	.LVL149:
ARM GAS  /tmp/ccfRjGDx.s 			page 48


 1819              	.L87:
 380:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1820              		.loc 1 380 0 is_stmt 0 discriminator 1
 1821 0056 052D     		cmp	r5, #5
 1822 0058 01D8     		bhi	.L95
 1823              	.LBB19:
 381:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1824              		.loc 1 381 0 is_stmt 1
 1825 005a 0024     		movs	r4, #0
 1826 005c ECE7     		b	.L91
 1827              	.L95:
 1828              	.LBE19:
 1829              	.LBE20:
 389:Src/main.c    **** 
 1830              		.loc 1 389 0
 1831              		@ sp needed
 1832              	.LVL150:
 1833              	.LVL151:
 1834 005e 04BC     		pop	{r2}
 1835 0060 9046     		mov	r8, r2
 1836 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 1837              	.L97:
 1838              		.align	2
 1839              	.L96:
 1840 0064 00000000 		.word	font
 1841              		.cfi_endproc
 1842              	.LFE47:
 1844              		.section	.text.draw_string,"ax",%progbits
 1845              		.align	1
 1846              		.global	draw_string
 1847              		.syntax unified
 1848              		.code	16
 1849              		.thumb_func
 1850              		.fpu softvfp
 1852              	draw_string:
 1853              	.LFB48:
 391:Src/main.c    ****     while (*str) {
 1854              		.loc 1 391 0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 1858              	.LVL152:
 1859 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1860              	.LCFI29:
 1861              		.cfi_def_cfa_offset 24
 1862              		.cfi_offset 3, -24
 1863              		.cfi_offset 4, -20
 1864              		.cfi_offset 5, -16
 1865              		.cfi_offset 6, -12
 1866              		.cfi_offset 7, -8
 1867              		.cfi_offset 14, -4
 1868 0002 0700     		movs	r7, r0
 1869 0004 0C00     		movs	r4, r1
 1870 0006 1600     		movs	r6, r2
 1871 0008 1D00     		movs	r5, r3
 392:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1872              		.loc 1 392 0
ARM GAS  /tmp/ccfRjGDx.s 			page 49


 1873 000a 07E0     		b	.L99
 1874              	.LVL153:
 1875              	.L100:
 393:Src/main.c    ****         x += CHAR_WIDTH;
 1876              		.loc 1 393 0
 1877 000c 0137     		adds	r7, r7, #1
 1878              	.LVL154:
 1879 000e 2B00     		movs	r3, r5
 1880 0010 3200     		movs	r2, r6
 1881 0012 2100     		movs	r1, r4
 1882 0014 FFF7FEFF 		bl	draw_char
 1883              	.LVL155:
 394:Src/main.c    ****     }
 1884              		.loc 1 394 0
 1885 0018 0634     		adds	r4, r4, #6
 1886              	.LVL156:
 1887 001a E4B2     		uxtb	r4, r4
 1888              	.LVL157:
 1889              	.L99:
 392:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1890              		.loc 1 392 0
 1891 001c 3878     		ldrb	r0, [r7]
 1892 001e 0028     		cmp	r0, #0
 1893 0020 F4D1     		bne	.L100
 396:Src/main.c    **** 
 1894              		.loc 1 396 0
 1895              		@ sp needed
 1896              	.LVL158:
 1897              	.LVL159:
 1898 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1899              		.cfi_endproc
 1900              	.LFE48:
 1902              		.section	.text.SystemClock_Config,"ax",%progbits
 1903              		.align	1
 1904              		.global	SystemClock_Config
 1905              		.syntax unified
 1906              		.code	16
 1907              		.thumb_func
 1908              		.fpu softvfp
 1910              	SystemClock_Config:
 1911              	.LFB49:
 399:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1912              		.loc 1 399 0
 1913              		.cfi_startproc
 1914              		@ args = 0, pretend = 0, frame = 96
 1915              		@ frame_needed = 0, uses_anonymous_args = 0
 1916 0000 10B5     		push	{r4, lr}
 1917              	.LCFI30:
 1918              		.cfi_def_cfa_offset 8
 1919              		.cfi_offset 4, -8
 1920              		.cfi_offset 14, -4
 1921 0002 98B0     		sub	sp, sp, #96
 1922              	.LCFI31:
 1923              		.cfi_def_cfa_offset 104
 400:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1924              		.loc 1 400 0
 1925 0004 2C22     		movs	r2, #44
ARM GAS  /tmp/ccfRjGDx.s 			page 50


 1926 0006 0021     		movs	r1, #0
 1927 0008 0CA8     		add	r0, sp, #48
 1928 000a FFF7FEFF 		bl	memset
 1929              	.LVL160:
 401:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1930              		.loc 1 401 0
 1931 000e 1024     		movs	r4, #16
 1932 0010 1022     		movs	r2, #16
 1933 0012 0021     		movs	r1, #0
 1934 0014 07A8     		add	r0, sp, #28
 1935 0016 FFF7FEFF 		bl	memset
 1936              	.LVL161:
 402:Src/main.c    **** 
 1937              		.loc 1 402 0
 1938 001a 1C22     		movs	r2, #28
 1939 001c 0021     		movs	r1, #0
 1940 001e 6846     		mov	r0, sp
 1941 0020 FFF7FEFF 		bl	memset
 1942              	.LVL162:
 404:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 1943              		.loc 1 404 0
 1944 0024 3223     		movs	r3, #50
 1945 0026 0B93     		str	r3, [sp, #44]
 406:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1946              		.loc 1 406 0
 1947 0028 313B     		subs	r3, r3, #49
 1948 002a 0E93     		str	r3, [sp, #56]
 407:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1949              		.loc 1 407 0
 1950 002c 1393     		str	r3, [sp, #76]
 408:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1951              		.loc 1 408 0
 1952 002e 1093     		str	r3, [sp, #64]
 409:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1953              		.loc 1 409 0
 1954 0030 0F94     		str	r4, [sp, #60]
 410:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1955              		.loc 1 410 0
 1956 0032 1194     		str	r4, [sp, #68]
 411:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 1957              		.loc 1 411 0
 1958 0034 0E3C     		subs	r4, r4, #14
 1959 0036 1494     		str	r4, [sp, #80]
 412:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 1960              		.loc 1 412 0
 1961 0038 C022     		movs	r2, #192
 1962 003a 5202     		lsls	r2, r2, #9
 1963 003c 1592     		str	r2, [sp, #84]
 414:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1964              		.loc 1 414 0
 1965 003e 1793     		str	r3, [sp, #92]
 415:Src/main.c    **** 
 1966              		.loc 1 415 0
 1967 0040 0BA8     		add	r0, sp, #44
 1968 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1969              	.LVL163:
 417:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
ARM GAS  /tmp/ccfRjGDx.s 			page 51


 1970              		.loc 1 417 0
 1971 0046 0723     		movs	r3, #7
 1972 0048 0793     		str	r3, [sp, #28]
 419:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1973              		.loc 1 419 0
 1974 004a 0894     		str	r4, [sp, #32]
 420:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1975              		.loc 1 420 0
 1976 004c 0024     		movs	r4, #0
 1977 004e 0994     		str	r4, [sp, #36]
 421:Src/main.c    **** 
 1978              		.loc 1 421 0
 1979 0050 0A94     		str	r4, [sp, #40]
 423:Src/main.c    **** 
 1980              		.loc 1 423 0
 1981 0052 0121     		movs	r1, #1
 1982 0054 07A8     		add	r0, sp, #28
 1983 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1984              	.LVL164:
 425:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 1985              		.loc 1 425 0
 1986 005a 044B     		ldr	r3, .L102
 1987 005c 0093     		str	r3, [sp]
 426:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1988              		.loc 1 426 0
 1989 005e 0494     		str	r4, [sp, #16]
 427:Src/main.c    **** 
 1990              		.loc 1 427 0
 1991 0060 0694     		str	r4, [sp, #24]
 429:Src/main.c    **** }
 1992              		.loc 1 429 0
 1993 0062 6846     		mov	r0, sp
 1994 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1995              	.LVL165:
 430:Src/main.c    **** 
 1996              		.loc 1 430 0
 1997 0068 18B0     		add	sp, sp, #96
 1998              		@ sp needed
 1999 006a 10BD     		pop	{r4, pc}
 2000              	.L103:
 2001              		.align	2
 2002              	.L102:
 2003 006c 20000200 		.word	131104
 2004              		.cfi_endproc
 2005              	.LFE49:
 2007              		.section	.text.main,"ax",%progbits
 2008              		.align	1
 2009              		.global	main
 2010              		.syntax unified
 2011              		.code	16
 2012              		.thumb_func
 2013              		.fpu softvfp
 2015              	main:
 2016              	.LFB37:
 109:Src/main.c    ****   HAL_Init();
 2017              		.loc 1 109 0
 2018              		.cfi_startproc
ARM GAS  /tmp/ccfRjGDx.s 			page 52


 2019              		@ args = 0, pretend = 0, frame = 56
 2020              		@ frame_needed = 0, uses_anonymous_args = 0
 2021 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2022              	.LCFI32:
 2023              		.cfi_def_cfa_offset 20
 2024              		.cfi_offset 4, -20
 2025              		.cfi_offset 5, -16
 2026              		.cfi_offset 6, -12
 2027              		.cfi_offset 7, -8
 2028              		.cfi_offset 14, -4
 2029 0002 C646     		mov	lr, r8
 2030 0004 00B5     		push	{lr}
 2031              	.LCFI33:
 2032              		.cfi_def_cfa_offset 24
 2033              		.cfi_offset 8, -24
 2034 0006 8EB0     		sub	sp, sp, #56
 2035              	.LCFI34:
 2036              		.cfi_def_cfa_offset 80
 110:Src/main.c    **** 
 2037              		.loc 1 110 0
 2038 0008 FFF7FEFF 		bl	HAL_Init
 2039              	.LVL166:
 112:Src/main.c    **** 
 2040              		.loc 1 112 0
 2041 000c FFF7FEFF 		bl	SystemClock_Config
 2042              	.LVL167:
 114:Src/main.c    ****   MX_DMA_Init();
 2043              		.loc 1 114 0
 2044 0010 FFF7FEFF 		bl	MX_GPIO_Init
 2045              	.LVL168:
 115:Src/main.c    ****   MX_ADC_Init();
 2046              		.loc 1 115 0
 2047 0014 FFF7FEFF 		bl	MX_DMA_Init
 2048              	.LVL169:
 116:Src/main.c    ****   MX_I2C1_Init();
 2049              		.loc 1 116 0
 2050 0018 FFF7FEFF 		bl	MX_ADC_Init
 2051              	.LVL170:
 117:Src/main.c    ****   MX_I2C2_Init();
 2052              		.loc 1 117 0
 2053 001c FFF7FEFF 		bl	MX_I2C1_Init
 2054              	.LVL171:
 118:Src/main.c    ****   MX_TIM1_Init();
 2055              		.loc 1 118 0
 2056 0020 FFF7FEFF 		bl	MX_I2C2_Init
 2057              	.LVL172:
 119:Src/main.c    ****   TIM3_Init();
 2058              		.loc 1 119 0
 2059 0024 FFF7FEFF 		bl	MX_TIM1_Init
 2060              	.LVL173:
 120:Src/main.c    **** 
 2061              		.loc 1 120 0
 2062 0028 FFF7FEFF 		bl	TIM3_Init
 2063              	.LVL174:
 123:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 2064              		.loc 1 123 0
 2065 002c D64C     		ldr	r4, .L134
ARM GAS  /tmp/ccfRjGDx.s 			page 53


 2066 002e 0021     		movs	r1, #0
 2067 0030 2000     		movs	r0, r4
 2068 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2069              	.LVL175:
 124:Src/main.c    **** 
 2070              		.loc 1 124 0
 2071 0036 0C21     		movs	r1, #12
 2072 0038 2000     		movs	r0, r4
 2073 003a FFF7FEFF 		bl	HAL_TIM_OC_Start
 2074              	.LVL176:
 126:Src/main.c    **** 
 2075              		.loc 1 126 0
 2076 003e 0422     		movs	r2, #4
 2077 0040 D249     		ldr	r1, .L134+4
 2078 0042 D348     		ldr	r0, .L134+8
 2079 0044 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2080              	.LVL177:
 128:Src/main.c    ****   disp_init();
 2081              		.loc 1 128 0
 2082 0048 1420     		movs	r0, #20
 2083 004a FFF7FEFF 		bl	HAL_Delay
 2084              	.LVL178:
 129:Src/main.c    ****   HAL_Delay(150);
 2085              		.loc 1 129 0
 2086 004e FFF7FEFF 		bl	disp_init
 2087              	.LVL179:
 130:Src/main.c    ****   clear_screen();
 2088              		.loc 1 130 0
 2089 0052 9620     		movs	r0, #150
 2090 0054 FFF7FEFF 		bl	HAL_Delay
 2091              	.LVL180:
 131:Src/main.c    ****   // DFU bootloader
 2092              		.loc 1 131 0
 2093 0058 FFF7FEFF 		bl	clear_screen
 2094              	.LVL181:
 133:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 2095              		.loc 1 133 0
 2096 005c 9020     		movs	r0, #144
 2097 005e 0821     		movs	r1, #8
 2098 0060 C005     		lsls	r0, r0, #23
 2099 0062 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2100              	.LVL182:
 2101 0066 0028     		cmp	r0, #0
 2102 0068 24D0     		beq	.L105
 133:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 2103              		.loc 1 133 0 is_stmt 0 discriminator 1
 2104 006a 9020     		movs	r0, #144
 2105 006c 1021     		movs	r1, #16
 2106 006e C005     		lsls	r0, r0, #23
 2107 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2108              	.LVL183:
 2109 0074 0028     		cmp	r0, #0
 2110 0076 1DD0     		beq	.L105
 134:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 8 ,1);
 2111              		.loc 1 134 0 is_stmt 1
 2112 0078 C64C     		ldr	r4, .L134+12
 2113 007a 0123     		movs	r3, #1
ARM GAS  /tmp/ccfRjGDx.s 			page 54


 2114 007c 0122     		movs	r2, #1
 2115 007e 0121     		movs	r1, #1
 2116 0080 2000     		movs	r0, r4
 2117 0082 FFF7FEFF 		bl	draw_string
 2118              	.LVL184:
 135:Src/main.c    ****     refresh();
 2119              		.loc 1 135 0
 2120 0086 0123     		movs	r3, #1
 2121 0088 0822     		movs	r2, #8
 2122 008a 0121     		movs	r1, #1
 2123 008c 2000     		movs	r0, r4
 2124 008e FFF7FEFF 		bl	draw_string
 2125              	.LVL185:
 136:Src/main.c    ****     HAL_Delay(40);
 2126              		.loc 1 136 0
 2127 0092 FFF7FEFF 		bl	refresh
 2128              	.LVL186:
 137:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 2129              		.loc 1 137 0
 2130 0096 2820     		movs	r0, #40
 2131 0098 FFF7FEFF 		bl	HAL_Delay
 2132              	.LVL187:
 138:Src/main.c    ****     NVIC_SystemReset();
 2133              		.loc 1 138 0
 2134 009c BE4B     		ldr	r3, .L134+16
 2135 009e BF4A     		ldr	r2, .L134+20
 2136 00a0 1A60     		str	r2, [r3]
 2137              	.LBB31:
 2138              	.LBB32:
 2139              	.LBB33:
 2140              	.LBB34:
 2141              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
ARM GAS  /tmp/ccfRjGDx.s 			page 55


  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccfRjGDx.s 			page 56


  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccfRjGDx.s 			page 57


 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
ARM GAS  /tmp/ccfRjGDx.s 			page 58


 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccfRjGDx.s 			page 59


 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
ARM GAS  /tmp/ccfRjGDx.s 			page 60


 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccfRjGDx.s 			page 61


 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  /tmp/ccfRjGDx.s 			page 62


 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2142              		.loc 2 429 0
 2143              		.syntax divided
 2144              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2145 00a2 BFF34F8F 		dsb 0xF
 2146              	@ 0 "" 2
 2147              		.thumb
 2148              		.syntax unified
 2149              	.LBE34:
 2150              	.LBE33:
 2151              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
ARM GAS  /tmp/ccfRjGDx.s 			page 63


  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
ARM GAS  /tmp/ccfRjGDx.s 			page 64


 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
ARM GAS  /tmp/ccfRjGDx.s 			page 65


 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
ARM GAS  /tmp/ccfRjGDx.s 			page 66


 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
ARM GAS  /tmp/ccfRjGDx.s 			page 67


 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
ARM GAS  /tmp/ccfRjGDx.s 			page 68


 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccfRjGDx.s 			page 69


 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
ARM GAS  /tmp/ccfRjGDx.s 			page 70


 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
ARM GAS  /tmp/ccfRjGDx.s 			page 71


 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccfRjGDx.s 			page 72


 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
ARM GAS  /tmp/ccfRjGDx.s 			page 73


 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccfRjGDx.s 			page 74


 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccfRjGDx.s 			page 75


 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 2152              		.loc 3 734 0
 2153 00a6 BE4B     		ldr	r3, .L134+24
 2154 00a8 BE4A     		ldr	r2, .L134+28
 2155 00aa DA60     		str	r2, [r3, #12]
 2156              	.LBB35:
 2157              	.LBB36:
 2158              		.loc 2 429 0
 2159              		.syntax divided
 2160              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2161 00ac BFF34F8F 		dsb 0xF
 2162              	@ 0 "" 2
 2163              		.thumb
 2164              		.syntax unified
 2165              	.L106:
 2166              	.LBE36:
 2167              	.LBE35:
 2168              	.LBB37:
 2169              	.LBB38:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2170              		.loc 2 375 0
 2171              		.syntax divided
 2172              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2173 00b0 C046     		nop
 2174              	@ 0 "" 2
 2175              		.thumb
 2176              		.syntax unified
 2177 00b2 FDE7     		b	.L106
 2178              	.L105:
 2179              	.LBE38:
 2180              	.LBE37:
 2181              	.LBE32:
 2182              	.LBE31:
 141:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 2183              		.loc 1 141 0
 2184 00b4 0123     		movs	r3, #1
 2185 00b6 0122     		movs	r2, #1
 2186 00b8 0F21     		movs	r1, #15
 2187 00ba BB48     		ldr	r0, .L134+32
 2188 00bc FFF7FEFF 		bl	draw_string
 2189              	.LVL188:
 142:Src/main.c    ****     refresh();
 2190              		.loc 1 142 0
 2191 00c0 0123     		movs	r3, #1
 2192 00c2 0922     		movs	r2, #9
 2193 00c4 0A21     		movs	r1, #10
 2194 00c6 B948     		ldr	r0, .L134+36
 2195 00c8 FFF7FEFF 		bl	draw_string
 2196              	.LVL189:
 143:Src/main.c    **** #ifdef ENABLESERIAL
ARM GAS  /tmp/ccfRjGDx.s 			page 76


 2197              		.loc 1 143 0
 2198 00cc FFF7FEFF 		bl	refresh
 2199              	.LVL190:
 153:Src/main.c    **** #endif
 2200              		.loc 1 153 0
 2201 00d0 B74B     		ldr	r3, .L134+40
 2202 00d2 1422     		movs	r2, #20
 2203 00d4 DA76     		strb	r2, [r3, #27]
 157:Src/main.c    ****   MX_IWDG_Init();
 2204              		.loc 1 157 0
 2205 00d6 FA20     		movs	r0, #250
 2206 00d8 8000     		lsls	r0, r0, #2
 2207 00da FFF7FEFF 		bl	HAL_Delay
 2208              	.LVL191:
 158:Src/main.c    **** 
 2209              		.loc 1 158 0
 2210 00de FFF7FEFF 		bl	MX_IWDG_Init
 2211              	.LVL192:
 160:Src/main.c    ****   if(r.target > 400) r.target = 220;  //initial temp set
 2212              		.loc 1 160 0
 2213 00e2 B44B     		ldr	r3, .L134+44
 2214 00e4 1888     		ldrh	r0, [r3]
 2215 00e6 FFF7FEFF 		bl	__aeabi_ui2f
 2216              	.LVL193:
 2217 00ea B34B     		ldr	r3, .L134+48
 2218 00ec 1860     		str	r0, [r3]
 161:Src/main.c    **** 
 2219              		.loc 1 161 0
 2220 00ee B349     		ldr	r1, .L134+52
 2221 00f0 FFF7FEFF 		bl	__aeabi_fcmpgt
 2222              	.LVL194:
 2223 00f4 0028     		cmp	r0, #0
 2224 00f6 00D1     		bne	.LCB1890
 2225 00f8 14E1     		b	.L122	@long jump
 2226              	.LCB1890:
 161:Src/main.c    **** 
 2227              		.loc 1 161 0 is_stmt 0 discriminator 1
 2228 00fa AF4B     		ldr	r3, .L134+48
 2229 00fc B04A     		ldr	r2, .L134+56
 2230 00fe 1A60     		str	r2, [r3]
 2231 0100 10E1     		b	.L122
 2232              	.L132:
 2233              	.LBB39:
 172:Src/main.c    ****       s.writeFlash = 1;
 2234              		.loc 1 172 0 is_stmt 1
 2235 0102 AD4C     		ldr	r4, .L134+48
 2236 0104 AF49     		ldr	r1, .L134+60
 2237 0106 2068     		ldr	r0, [r4]
 2238 0108 FFF7FEFF 		bl	__aeabi_fsub
 2239              	.LVL195:
 2240 010c 2060     		str	r0, [r4]
 173:Src/main.c    ****       HAL_Delay(40);
 2241              		.loc 1 173 0
 2242 010e A84B     		ldr	r3, .L134+40
 2243 0110 0122     		movs	r2, #1
 2244 0112 1A76     		strb	r2, [r3, #24]
 174:Src/main.c    ****     }
ARM GAS  /tmp/ccfRjGDx.s 			page 77


 2245              		.loc 1 174 0
 2246 0114 2820     		movs	r0, #40
 2247 0116 FFF7FEFF 		bl	HAL_Delay
 2248              	.LVL196:
 2249 011a 1EE1     		b	.L109
 2250              	.L133:
 178:Src/main.c    ****       s.writeFlash = 1;
 2251              		.loc 1 178 0
 2252 011c A64C     		ldr	r4, .L134+48
 2253 011e A949     		ldr	r1, .L134+60
 2254 0120 2068     		ldr	r0, [r4]
 2255 0122 FFF7FEFF 		bl	__aeabi_fadd
 2256              	.LVL197:
 2257 0126 2060     		str	r0, [r4]
 179:Src/main.c    ****       HAL_Delay(40);
 2258              		.loc 1 179 0
 2259 0128 A14B     		ldr	r3, .L134+40
 2260 012a 0122     		movs	r2, #1
 2261 012c 1A76     		strb	r2, [r3, #24]
 180:Src/main.c    ****     }
 2262              		.loc 1 180 0
 2263 012e 2820     		movs	r0, #40
 2264 0130 FFF7FEFF 		bl	HAL_Delay
 2265              	.LVL198:
 2266 0134 16E1     		b	.L110
 2267              	.L123:
 183:Src/main.c    **** 
 2268              		.loc 1 183 0
 2269 0136 A14C     		ldr	r4, .L134+52
 2270              	.L111:
 183:Src/main.c    **** 
 2271              		.loc 1 183 0 is_stmt 0 discriminator 8
 2272 0138 9F4B     		ldr	r3, .L134+48
 2273 013a 1C60     		str	r4, [r3]
 185:Src/main.c    ****       HAL_FLASH_Unlock();
 2274              		.loc 1 185 0 is_stmt 1 discriminator 8
 2275 013c 9C4B     		ldr	r3, .L134+40
 2276 013e 1B7E     		ldrb	r3, [r3, #24]
 2277 0140 012B     		cmp	r3, #1
 2278 0142 00D1     		bne	.LCB1939
 2279 0144 88E0     		b	.L128	@long jump
 2280              	.LCB1939:
 2281              	.L113:
 209:Src/main.c    ****     char str2[10] = "          ";
 2282              		.loc 1 209 0
 2283 0146 02AE     		add	r6, sp, #8
 2284 0148 9F4B     		ldr	r3, .L134+64
 2285 014a 3100     		movs	r1, r6
 2286 014c 1A00     		movs	r2, r3
 2287 014e 11CA     		ldmia	r2!, {r0, r4}
 2288 0150 11C1     		stmia	r1!, {r0, r4}
 2289 0152 1088     		ldrh	r0, [r2]
 2290 0154 0880     		strh	r0, [r1]
 210:Src/main.c    ****     char str3[10] = "          ";
 2291              		.loc 1 210 0
 2292 0156 05AD     		add	r5, sp, #20
 2293 0158 2900     		movs	r1, r5
ARM GAS  /tmp/ccfRjGDx.s 			page 78


 2294 015a 1800     		movs	r0, r3
 2295 015c 90C8     		ldmia	r0!, {r4, r7}
 2296 015e 90C1     		stmia	r1!, {r4, r7}
 2297 0160 1088     		ldrh	r0, [r2]
 2298 0162 0880     		strh	r0, [r1]
 211:Src/main.c    ****     char str4[10] = "          ";
 2299              		.loc 1 211 0
 2300 0164 08A9     		add	r1, sp, #32
 2301 0166 1800     		movs	r0, r3
 2302 0168 90C8     		ldmia	r0!, {r4, r7}
 2303 016a 90C1     		stmia	r1!, {r4, r7}
 2304 016c 1088     		ldrh	r0, [r2]
 2305 016e 0880     		strh	r0, [r1]
 212:Src/main.c    ****     sprintf(str1, "%d C   ", (uint16_t)r.target);
 2306              		.loc 1 212 0
 2307 0170 0BA9     		add	r1, sp, #44
 2308 0172 8846     		mov	r8, r1
 2309 0174 11CB     		ldmia	r3!, {r0, r4}
 2310 0176 11C1     		stmia	r1!, {r0, r4}
 2311 0178 1388     		ldrh	r3, [r2]
 2312 017a 0B80     		strh	r3, [r1]
 213:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 2313              		.loc 1 213 0
 2314 017c 8E4B     		ldr	r3, .L134+48
 2315 017e 1868     		ldr	r0, [r3]
 2316 0180 FFF7FEFF 		bl	__aeabi_f2uiz
 2317              	.LVL199:
 2318 0184 82B2     		uxth	r2, r0
 2319 0186 9149     		ldr	r1, .L134+68
 2320 0188 3000     		movs	r0, r6
 2321 018a FFF7FEFF 		bl	sprintf
 2322              	.LVL200:
 214:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 2323              		.loc 1 214 0
 2324 018e 884C     		ldr	r4, .L134+40
 2325 0190 6768     		ldr	r7, [r4, #4]
 2326 0192 381C     		adds	r0, r7, #0
 2327 0194 FFF7FEFF 		bl	__aeabi_f2uiz
 2328              	.LVL201:
 2329 0198 83B2     		uxth	r3, r0
 2330 019a 0193     		str	r3, [sp, #4]
 2331 019c 1800     		movs	r0, r3
 2332 019e FFF7FEFF 		bl	__aeabi_i2f
 2333              	.LVL202:
 2334 01a2 011C     		adds	r1, r0, #0
 2335 01a4 381C     		adds	r0, r7, #0
 2336 01a6 FFF7FEFF 		bl	__aeabi_fsub
 2337              	.LVL203:
 2338 01aa 8949     		ldr	r1, .L134+72
 2339 01ac FFF7FEFF 		bl	__aeabi_fmul
 2340              	.LVL204:
 2341 01b0 FFF7FEFF 		bl	__aeabi_f2uiz
 2342              	.LVL205:
 2343 01b4 83B2     		uxth	r3, r0
 2344 01b6 019A     		ldr	r2, [sp, #4]
 2345 01b8 8649     		ldr	r1, .L134+76
 2346 01ba 2800     		movs	r0, r5
ARM GAS  /tmp/ccfRjGDx.s 			page 79


 2347 01bc FFF7FEFF 		bl	sprintf
 2348              	.LVL206:
 215:Src/main.c    ****     sprintf(str4, "%d.%d A", (uint16_t)s.iin,(uint16_t)((s.iin-(uint16_t)s.iin)*10.0f));
 2349              		.loc 1 215 0
 2350 01c0 A768     		ldr	r7, [r4, #8]
 2351 01c2 381C     		adds	r0, r7, #0
 2352 01c4 FFF7FEFF 		bl	__aeabi_f2uiz
 2353              	.LVL207:
 2354 01c8 83B2     		uxth	r3, r0
 2355 01ca 0193     		str	r3, [sp, #4]
 2356 01cc 1800     		movs	r0, r3
 2357 01ce FFF7FEFF 		bl	__aeabi_i2f
 2358              	.LVL208:
 2359 01d2 011C     		adds	r1, r0, #0
 2360 01d4 381C     		adds	r0, r7, #0
 2361 01d6 FFF7FEFF 		bl	__aeabi_fsub
 2362              	.LVL209:
 2363 01da 7D49     		ldr	r1, .L134+72
 2364 01dc FFF7FEFF 		bl	__aeabi_fmul
 2365              	.LVL210:
 2366 01e0 FFF7FEFF 		bl	__aeabi_f2uiz
 2367              	.LVL211:
 2368 01e4 83B2     		uxth	r3, r0
 2369 01e6 019A     		ldr	r2, [sp, #4]
 2370 01e8 7B49     		ldr	r1, .L134+80
 2371 01ea 08A8     		add	r0, sp, #32
 2372 01ec FFF7FEFF 		bl	sprintf
 2373              	.LVL212:
 216:Src/main.c    **** 
 2374              		.loc 1 216 0
 2375 01f0 E768     		ldr	r7, [r4, #12]
 2376 01f2 381C     		adds	r0, r7, #0
 2377 01f4 FFF7FEFF 		bl	__aeabi_f2uiz
 2378              	.LVL213:
 2379 01f8 83B2     		uxth	r3, r0
 2380 01fa 0193     		str	r3, [sp, #4]
 2381 01fc 1800     		movs	r0, r3
 2382 01fe FFF7FEFF 		bl	__aeabi_i2f
 2383              	.LVL214:
 2384 0202 011C     		adds	r1, r0, #0
 2385 0204 381C     		adds	r0, r7, #0
 2386 0206 FFF7FEFF 		bl	__aeabi_fsub
 2387              	.LVL215:
 2388 020a 7149     		ldr	r1, .L134+72
 2389 020c FFF7FEFF 		bl	__aeabi_fmul
 2390              	.LVL216:
 2391 0210 FFF7FEFF 		bl	__aeabi_f2uiz
 2392              	.LVL217:
 2393 0214 83B2     		uxth	r3, r0
 2394 0216 019A     		ldr	r2, [sp, #4]
 2395 0218 7049     		ldr	r1, .L134+84
 2396 021a 4046     		mov	r0, r8
 2397 021c FFF7FEFF 		bl	sprintf
 2398              	.LVL218:
 218:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 2399              		.loc 1 218 0
 2400 0220 FFF7FEFF 		bl	clear_screen
ARM GAS  /tmp/ccfRjGDx.s 			page 80


 2401              	.LVL219:
 219:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 2402              		.loc 1 219 0
 2403 0224 0123     		movs	r3, #1
 2404 0226 0122     		movs	r2, #1
 2405 0228 0A21     		movs	r1, #10
 2406 022a 3000     		movs	r0, r6
 2407 022c FFF7FEFF 		bl	draw_string
 2408              	.LVL220:
 220:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 2409              		.loc 1 220 0
 2410 0230 0123     		movs	r3, #1
 2411 0232 0922     		movs	r2, #9
 2412 0234 0A21     		movs	r1, #10
 2413 0236 2800     		movs	r0, r5
 2414 0238 FFF7FEFF 		bl	draw_string
 2415              	.LVL221:
 221:Src/main.c    **** #ifdef DISPLAYCURRENT
 2416              		.loc 1 221 0
 2417 023c 0123     		movs	r3, #1
 2418 023e 0122     		movs	r2, #1
 2419 0240 3C21     		movs	r1, #60
 2420 0242 08A8     		add	r0, sp, #32
 2421 0244 FFF7FEFF 		bl	draw_string
 2422              	.LVL222:
 223:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 2423              		.loc 1 223 0
 2424 0248 E37E     		ldrb	r3, [r4, #27]
 2425 024a 002B     		cmp	r3, #0
 2426 024c 36D0     		beq	.L129
 226:Src/main.c    ****     }
 2427              		.loc 1 226 0
 2428 024e 013B     		subs	r3, r3, #1
 2429 0250 574A     		ldr	r2, .L134+40
 2430 0252 D376     		strb	r3, [r2, #27]
 2431              	.L118:
 183:Src/main.c    **** 
 2432              		.loc 1 183 0 discriminator 1
 2433 0254 0024     		movs	r4, #0
 2434 0256 49E0     		b	.L117
 2435              	.L128:
 186:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 2436              		.loc 1 186 0
 2437 0258 FFF7FEFF 		bl	HAL_FLASH_Unlock
 2438              	.LVL223:
 187:Src/main.c    ****       FLASH->AR = 0x0800e400;
 2439              		.loc 1 187 0
 2440 025c 604B     		ldr	r3, .L134+88
 2441 025e 1A69     		ldr	r2, [r3, #16]
 2442 0260 0221     		movs	r1, #2
 2443 0262 0A43     		orrs	r2, r1
 2444 0264 1A61     		str	r2, [r3, #16]
 188:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 2445              		.loc 1 188 0
 2446 0266 534A     		ldr	r2, .L134+44
 2447 0268 5A61     		str	r2, [r3, #20]
 189:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
ARM GAS  /tmp/ccfRjGDx.s 			page 81


 2448              		.loc 1 189 0
 2449 026a 1A69     		ldr	r2, [r3, #16]
 2450 026c 3E31     		adds	r1, r1, #62
 2451 026e 0A43     		orrs	r2, r1
 2452 0270 1A61     		str	r2, [r3, #16]
 2453              	.L114:
 190:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 2454              		.loc 1 190 0 discriminator 1
 2455 0272 5B4B     		ldr	r3, .L134+88
 2456 0274 DB68     		ldr	r3, [r3, #12]
 2457 0276 DB07     		lsls	r3, r3, #31
 2458 0278 FBD4     		bmi	.L114
 191:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 2459              		.loc 1 191 0
 2460 027a 594B     		ldr	r3, .L134+88
 2461 027c DB68     		ldr	r3, [r3, #12]
 2462 027e 9B06     		lsls	r3, r3, #26
 2463 0280 03D4     		bmi	.L130
 2464              	.L115:
 199:Src/main.c    ****       #endif
 2465              		.loc 1 199 0
 2466 0282 4B4B     		ldr	r3, .L134+40
 2467 0284 0C22     		movs	r2, #12
 2468 0286 DA76     		strb	r2, [r3, #27]
 2469 0288 5DE7     		b	.L113
 2470              	.L130:
 192:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 2471              		.loc 1 192 0
 2472 028a 554B     		ldr	r3, .L134+88
 2473 028c DA68     		ldr	r2, [r3, #12]
 2474 028e 2021     		movs	r1, #32
 2475 0290 0A43     		orrs	r2, r1
 2476 0292 DA60     		str	r2, [r3, #12]
 193:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 2477              		.loc 1 193 0
 2478 0294 1A69     		ldr	r2, [r3, #16]
 2479 0296 1E39     		subs	r1, r1, #30
 2480 0298 8A43     		bics	r2, r1
 2481 029a 1A61     		str	r2, [r3, #16]
 194:Src/main.c    ****         HAL_FLASH_Lock();
 2482              		.loc 1 194 0
 2483 029c 464B     		ldr	r3, .L134+48
 2484 029e 1868     		ldr	r0, [r3]
 2485 02a0 FFF7FEFF 		bl	__aeabi_f2uiz
 2486              	.LVL224:
 2487 02a4 82B2     		uxth	r2, r0
 2488 02a6 0023     		movs	r3, #0
 2489 02a8 4249     		ldr	r1, .L134+44
 2490 02aa 0120     		movs	r0, #1
 2491 02ac FFF7FEFF 		bl	HAL_FLASH_Program
 2492              	.LVL225:
 195:Src/main.c    ****         s.writeFlash = 0;
 2493              		.loc 1 195 0
 2494 02b0 FFF7FEFF 		bl	HAL_FLASH_Lock
 2495              	.LVL226:
 196:Src/main.c    ****       }
 2496              		.loc 1 196 0
ARM GAS  /tmp/ccfRjGDx.s 			page 82


 2497 02b4 0022     		movs	r2, #0
 2498 02b6 3E4B     		ldr	r3, .L134+40
 2499 02b8 1A76     		strb	r2, [r3, #24]
 2500 02ba E2E7     		b	.L115
 2501              	.L129:
 224:Src/main.c    ****     } else {
 2502              		.loc 1 224 0
 2503 02bc 0133     		adds	r3, r3, #1
 2504 02be 0122     		movs	r2, #1
 2505 02c0 0A21     		movs	r1, #10
 2506 02c2 0BA8     		add	r0, sp, #44
 2507 02c4 FFF7FEFF 		bl	draw_string
 2508              	.LVL227:
 2509 02c8 C4E7     		b	.L118
 2510              	.LVL228:
 2511              	.L124:
 2512              	.LBB40:
 230:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2513              		.loc 1 230 0
 2514 02ca 464D     		ldr	r5, .L134+92
 2515              	.L119:
 230:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2516              		.loc 1 230 0 is_stmt 0 discriminator 10
 2517 02cc 291C     		adds	r1, r5, #0
 2518 02ce 301C     		adds	r0, r6, #0
 2519 02d0 FFF7FEFF 		bl	__aeabi_fcmple
 2520              	.LVL229:
 2521 02d4 0028     		cmp	r0, #0
 2522 02d6 20D0     		beq	.L131
 231:Src/main.c    ****     }
 2523              		.loc 1 231 0 is_stmt 1 discriminator 11
 2524 02d8 2000     		movs	r0, r4
 2525 02da 3C30     		adds	r0, r0, #60
 2526 02dc 00B2     		sxth	r0, r0
 2527 02de 0123     		movs	r3, #1
 2528 02e0 0822     		movs	r2, #8
 2529 02e2 0821     		movs	r1, #8
 2530 02e4 FFF7FEFF 		bl	draw_v_line
 2531              	.LVL230:
 230:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2532              		.loc 1 230 0 discriminator 11
 2533 02e8 0134     		adds	r4, r4, #1
 2534              	.LVL231:
 2535 02ea A4B2     		uxth	r4, r4
 2536              	.LVL232:
 2537              	.L117:
 230:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2538              		.loc 1 230 0 is_stmt 0 discriminator 1
 2539 02ec 2000     		movs	r0, r4
 2540 02ee FFF7FEFF 		bl	__aeabi_i2f
 2541              	.LVL233:
 2542 02f2 061C     		adds	r6, r0, #0
 2543 02f4 304B     		ldr	r3, .L134+48
 2544 02f6 5868     		ldr	r0, [r3, #4]
 2545 02f8 3B49     		ldr	r1, .L134+96
 2546 02fa FFF7FEFF 		bl	__aeabi_fmul
 2547              	.LVL234:
ARM GAS  /tmp/ccfRjGDx.s 			page 83


 2548 02fe 051C     		adds	r5, r0, #0
 2549 0300 3849     		ldr	r1, .L134+92
 2550 0302 FFF7FEFF 		bl	__aeabi_fcmpgt
 2551              	.LVL235:
 2552 0306 0028     		cmp	r0, #0
 2553 0308 DFD1     		bne	.L124
 230:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2554              		.loc 1 230 0 discriminator 4
 2555 030a 0021     		movs	r1, #0
 2556 030c 281C     		adds	r0, r5, #0
 2557 030e FFF7FEFF 		bl	__aeabi_fcmplt
 2558              	.LVL236:
 2559 0312 0028     		cmp	r0, #0
 2560 0314 DAD0     		beq	.L119
 230:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2561              		.loc 1 230 0
 2562 0316 0025     		movs	r5, #0
 2563 0318 D8E7     		b	.L119
 2564              	.L131:
 2565              	.LBE40:
 234:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 2566              		.loc 1 234 0 is_stmt 1
 2567 031a FFF7FEFF 		bl	refresh
 2568              	.LVL237:
 235:Src/main.c    ****   }
 2569              		.loc 1 235 0
 2570 031e 3348     		ldr	r0, .L134+100
 2571 0320 FFF7FEFF 		bl	HAL_IWDG_Refresh
 2572              	.LVL238:
 2573              	.L122:
 165:Src/main.c    **** 
 2574              		.loc 1 165 0
 2575 0324 3220     		movs	r0, #50
 2576 0326 FFF7FEFF 		bl	HAL_Delay
 2577              	.LVL239:
 168:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 2578              		.loc 1 168 0
 2579 032a 9025     		movs	r5, #144
 2580 032c ED05     		lsls	r5, r5, #23
 2581 032e 0821     		movs	r1, #8
 2582 0330 2800     		movs	r0, r5
 2583 0332 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2584              	.LVL240:
 2585 0336 1E4C     		ldr	r4, .L134+40
 2586 0338 6076     		strb	r0, [r4, #25]
 169:Src/main.c    **** 
 2587              		.loc 1 169 0
 2588 033a 1021     		movs	r1, #16
 2589 033c 2800     		movs	r0, r5
 2590 033e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2591              	.LVL241:
 2592 0342 0500     		movs	r5, r0
 2593 0344 8021     		movs	r1, #128
 2594 0346 8901     		lsls	r1, r1, #6
 2595 0348 2948     		ldr	r0, .L134+104
 2596 034a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2597              	.LVL242:
ARM GAS  /tmp/ccfRjGDx.s 			page 84


 2598 034e 0543     		orrs	r5, r0
 2599 0350 A576     		strb	r5, [r4, #26]
 171:Src/main.c    ****       r.target -= 5;
 2600              		.loc 1 171 0
 2601 0352 637E     		ldrb	r3, [r4, #25]
 2602 0354 012B     		cmp	r3, #1
 2603 0356 00D1     		bne	.LCB2250
 2604 0358 D3E6     		b	.L132	@long jump
 2605              	.LCB2250:
 2606              	.L109:
 177:Src/main.c    ****       r.target += 5;
 2607              		.loc 1 177 0
 2608 035a 154B     		ldr	r3, .L134+40
 2609 035c 9B7E     		ldrb	r3, [r3, #26]
 2610 035e 012B     		cmp	r3, #1
 2611 0360 00D1     		bne	.LCB2255
 2612 0362 DBE6     		b	.L133	@long jump
 2613              	.LCB2255:
 2614              	.L110:
 183:Src/main.c    **** 
 2615              		.loc 1 183 0
 2616 0364 144B     		ldr	r3, .L134+48
 2617 0366 1C68     		ldr	r4, [r3]
 2618 0368 1449     		ldr	r1, .L134+52
 2619 036a 201C     		adds	r0, r4, #0
 2620 036c FFF7FEFF 		bl	__aeabi_fcmpgt
 2621              	.LVL243:
 2622 0370 0028     		cmp	r0, #0
 2623 0372 00D0     		beq	.LCB2264
 2624 0374 DFE6     		b	.L123	@long jump
 2625              	.LCB2264:
 183:Src/main.c    **** 
 2626              		.loc 1 183 0 is_stmt 0 discriminator 2
 2627 0376 1F49     		ldr	r1, .L134+108
 2628 0378 201C     		adds	r0, r4, #0
 2629 037a FFF7FEFF 		bl	__aeabi_fcmplt
 2630              	.LVL244:
 2631 037e 0028     		cmp	r0, #0
 2632 0380 00D1     		bne	.LCB2270
 2633 0382 D9E6     		b	.L111	@long jump
 2634              	.LCB2270:
 183:Src/main.c    **** 
 2635              		.loc 1 183 0
 2636 0384 1B4C     		ldr	r4, .L134+108
 2637 0386 D7E6     		b	.L111
 2638              	.L135:
 2639              		.align	2
 2640              	.L134:
 2641 0388 00000000 		.word	htim1
 2642 038c 00000000 		.word	.LANCHOR0
 2643 0390 00000000 		.word	hadc
 2644 0394 00000000 		.word	.LC32
 2645 0398 F03F0020 		.word	536887280
 2646 039c EFBEADDE 		.word	-559038737
 2647 03a0 00ED00E0 		.word	-536810240
 2648 03a4 0400FA05 		.word	100270084
 2649 03a8 10000000 		.word	.LC34
ARM GAS  /tmp/ccfRjGDx.s 			page 85


 2650 03ac 1C000000 		.word	.LC36
 2651 03b0 00000000 		.word	.LANCHOR1
 2652 03b4 00E40008 		.word	134276096
 2653 03b8 00000000 		.word	.LANCHOR3
 2654 03bc 0000C843 		.word	1137180672
 2655 03c0 00005C43 		.word	1130102784
 2656 03c4 0000A040 		.word	1084227584
 2657 03c8 00000000 		.word	.LANCHOR7
 2658 03cc 2C000000 		.word	.LC42
 2659 03d0 00002041 		.word	1092616192
 2660 03d4 34000000 		.word	.LC44
 2661 03d8 3C000000 		.word	.LC46
 2662 03dc 44000000 		.word	.LC48
 2663 03e0 00200240 		.word	1073881088
 2664 03e4 0000F041 		.word	1106247680
 2665 03e8 00004040 		.word	1077936128
 2666 03ec 00000000 		.word	hiwdg
 2667 03f0 00080048 		.word	1207961600
 2668 03f4 0000A041 		.word	1101004800
 2669              	.LBE39:
 2670              		.cfi_endproc
 2671              	.LFE37:
 2673              		.section	.text.Error_Handler,"ax",%progbits
 2674              		.align	1
 2675              		.global	Error_Handler
 2676              		.syntax unified
 2677              		.code	16
 2678              		.thumb_func
 2679              		.fpu softvfp
 2681              	Error_Handler:
 2682              	.LFB58:
 673:Src/main.c    **** 
 674:Src/main.c    **** void Error_Handler(void)
 675:Src/main.c    **** {
 2683              		.loc 1 675 0 is_stmt 1
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 0
 2686              		@ frame_needed = 0, uses_anonymous_args = 0
 2687              		@ link register save eliminated.
 676:Src/main.c    **** 
 677:Src/main.c    **** }
 2688              		.loc 1 677 0
 2689              		@ sp needed
 2690 0000 7047     		bx	lr
 2691              		.cfi_endproc
 2692              	.LFE58:
 2694              		.global	OLED_Setup_Array
 2695              		.global	REFRESH_COMMANDS
 2696              		.comm	screenBuffer,218,4
 2697              		.comm	sendDataUSB,4,4
 2698              		.global	tipcal
 2699              		.global	r
 2700              		.global	s
 2701              		.comm	USBD_Device,548,4
 2702              		.comm	hiwdg,16,4
 2703              		.comm	htim3,64,4
 2704              		.comm	htim1,64,4
ARM GAS  /tmp/ccfRjGDx.s 			page 86


 2705              		.comm	hi2c2,76,4
 2706              		.comm	hi2c1,76,4
 2707              		.comm	hdma_adc,68,4
 2708              		.comm	hadc,76,4
 2709              		.global	MAX_DUTY
 2710              		.global	font
 2711              		.comm	UserTxBuffer,512,4
 2712              		.comm	UserRxBuffer,512,4
 2713              		.section	.rodata
 2714              		.align	2
 2715              		.set	.LANCHOR7,. + 0
 2716              	.LC40:
 2717 0000 20202020 		.ascii	"          \000"
 2717      20202020 
 2717      202000
 2718              		.section	.bss.ADC_raw,"aw",%nobits
 2719              		.align	2
 2720              		.set	.LANCHOR0,. + 0
 2723              	ADC_raw:
 2724 0000 00000000 		.space	8
 2724      00000000 
 2725              		.section	.data.MAX_DUTY,"aw",%progbits
 2726              		.align	1
 2727              		.set	.LANCHOR4,. + 0
 2730              	MAX_DUTY:
 2731 0000 9600     		.short	150
 2732              		.section	.data.OLED_Setup_Array,"aw",%progbits
 2733              		.align	2
 2734              		.set	.LANCHOR6,. + 0
 2737              	OLED_Setup_Array:
 2738 0000 80       		.byte	-128
 2739 0001 AE       		.byte	-82
 2740 0002 80       		.byte	-128
 2741 0003 D5       		.byte	-43
 2742 0004 80       		.byte	-128
 2743 0005 52       		.byte	82
 2744 0006 80       		.byte	-128
 2745 0007 A8       		.byte	-88
 2746 0008 80       		.byte	-128
 2747 0009 0F       		.byte	15
 2748 000a 80       		.byte	-128
 2749 000b C0       		.byte	-64
 2750 000c 80       		.byte	-128
 2751 000d D3       		.byte	-45
 2752 000e 80       		.byte	-128
 2753 000f 00       		.byte	0
 2754 0010 80       		.byte	-128
 2755 0011 40       		.byte	64
 2756 0012 80       		.byte	-128
 2757 0013 A0       		.byte	-96
 2758 0014 80       		.byte	-128
 2759 0015 8D       		.byte	-115
 2760 0016 80       		.byte	-128
 2761 0017 14       		.byte	20
 2762 0018 80       		.byte	-128
 2763 0019 DA       		.byte	-38
 2764 001a 80       		.byte	-128
ARM GAS  /tmp/ccfRjGDx.s 			page 87


 2765 001b 02       		.byte	2
 2766 001c 80       		.byte	-128
 2767 001d 81       		.byte	-127
 2768 001e 80       		.byte	-128
 2769 001f 33       		.byte	51
 2770 0020 80       		.byte	-128
 2771 0021 D9       		.byte	-39
 2772 0022 80       		.byte	-128
 2773 0023 F1       		.byte	-15
 2774 0024 80       		.byte	-128
 2775 0025 DB       		.byte	-37
 2776 0026 80       		.byte	-128
 2777 0027 30       		.byte	48
 2778 0028 80       		.byte	-128
 2779 0029 A4       		.byte	-92
 2780 002a 80       		.byte	-128
 2781 002b A6       		.byte	-90
 2782 002c 80       		.byte	-128
 2783 002d 20       		.byte	32
 2784 002e 80       		.byte	-128
 2785 002f 00       		.byte	0
 2786 0030 80       		.byte	-128
 2787 0031 AF       		.byte	-81
 2788              		.section	.data.r,"aw",%progbits
 2789              		.align	2
 2790              		.set	.LANCHOR3,. + 0
 2793              	r:
 2794 0000 00005C43 		.word	1130102784
 2795 0004 00000000 		.space	12
 2795      00000000 
 2795      00000000 
 2796 0010 00004843 		.word	1128792064
 2797 0014 00000000 		.space	8
 2797      00000000 
 2798 001c 6F12033A 		.word	973279855
 2799 0020 9A99993E 		.word	1050253722
 2800 0024 B81E053E 		.word	1040522936
 2801 0028 9A99993E 		.word	1050253722
 2802 002c 00004041 		.word	1094713344
 2803              		.section	.data.s,"aw",%progbits
 2804              		.align	2
 2805              		.set	.LANCHOR1,. + 0
 2808              	s:
 2809 0000 00000000 		.space	16
 2809      00000000 
 2809      00000000 
 2809      00000000 
 2810 0010 CDCC8C3F 		.word	1066192077
 2811 0014 00000000 		.space	4
 2812 0018 00       		.byte	0
 2813 0019 000000   		.space	3
 2814              		.section	.data.tipcal,"aw",%progbits
 2815              		.align	2
 2816              		.set	.LANCHOR2,. + 0
 2819              	tipcal:
 2820 0000 0000F042 		.word	1123024896
 2821 0004 0000B842 		.word	1119354880
ARM GAS  /tmp/ccfRjGDx.s 			page 88


 2822              		.section	.rodata.REFRESH_COMMANDS,"a",%progbits
 2823              		.align	2
 2824              		.set	.LANCHOR5,. + 0
 2827              	REFRESH_COMMANDS:
 2828 0000 80       		.byte	-128
 2829 0001 AF       		.byte	-81
 2830 0002 80       		.byte	-128
 2831 0003 21       		.byte	33
 2832 0004 80       		.byte	-128
 2833 0005 20       		.byte	32
 2834 0006 80       		.byte	-128
 2835 0007 7F       		.byte	127
 2836 0008 80       		.byte	-128
 2837 0009 C0       		.byte	-64
 2838 000a 80       		.byte	-128
 2839 000b 22       		.byte	34
 2840 000c 80       		.byte	-128
 2841 000d 00       		.byte	0
 2842 000e 80       		.byte	-128
 2843 000f 01       		.byte	1
 2844 0010 40       		.byte	64
 2845              		.section	.rodata.USB_printfloat.str1.4,"aMS",%progbits,1
 2846              		.align	2
 2847              	.LC16:
 2848 0000 25642E25 		.ascii	"%d.%d \015\012\000"
 2848      64200D0A 
 2848      00
 2849              		.section	.rodata.font,"a",%progbits
 2850              		.align	2
 2853              	font:
 2854 0000 00       		.byte	0
 2855 0001 00       		.byte	0
 2856 0002 00       		.byte	0
 2857 0003 00       		.byte	0
 2858 0004 00       		.byte	0
 2859 0005 00       		.byte	0
 2860 0006 2F       		.byte	47
 2861 0007 00       		.byte	0
 2862 0008 00       		.byte	0
 2863 0009 00       		.byte	0
 2864 000a 00       		.byte	0
 2865 000b 00       		.byte	0
 2866 000c 03       		.byte	3
 2867 000d 00       		.byte	0
 2868 000e 03       		.byte	3
 2869 000f 00       		.byte	0
 2870 0010 00       		.byte	0
 2871 0011 00       		.byte	0
 2872 0012 12       		.byte	18
 2873 0013 3F       		.byte	63
 2874 0014 12       		.byte	18
 2875 0015 12       		.byte	18
 2876 0016 3F       		.byte	63
 2877 0017 12       		.byte	18
 2878 0018 2E       		.byte	46
 2879 0019 2A       		.byte	42
 2880 001a 7F       		.byte	127
ARM GAS  /tmp/ccfRjGDx.s 			page 89


 2881 001b 2A       		.byte	42
 2882 001c 3A       		.byte	58
 2883 001d 00       		.byte	0
 2884 001e 23       		.byte	35
 2885 001f 13       		.byte	19
 2886 0020 08       		.byte	8
 2887 0021 04       		.byte	4
 2888 0022 32       		.byte	50
 2889 0023 31       		.byte	49
 2890 0024 10       		.byte	16
 2891 0025 2A       		.byte	42
 2892 0026 25       		.byte	37
 2893 0027 2A       		.byte	42
 2894 0028 10       		.byte	16
 2895 0029 20       		.byte	32
 2896 002a 02       		.byte	2
 2897 002b 01       		.byte	1
 2898 002c 00       		.byte	0
 2899 002d 00       		.byte	0
 2900 002e 00       		.byte	0
 2901 002f 00       		.byte	0
 2902 0030 1E       		.byte	30
 2903 0031 21       		.byte	33
 2904 0032 00       		.byte	0
 2905 0033 00       		.byte	0
 2906 0034 00       		.byte	0
 2907 0035 00       		.byte	0
 2908 0036 21       		.byte	33
 2909 0037 1E       		.byte	30
 2910 0038 00       		.byte	0
 2911 0039 00       		.byte	0
 2912 003a 00       		.byte	0
 2913 003b 00       		.byte	0
 2914 003c 08       		.byte	8
 2915 003d 2A       		.byte	42
 2916 003e 1C       		.byte	28
 2917 003f 2A       		.byte	42
 2918 0040 08       		.byte	8
 2919 0041 08       		.byte	8
 2920 0042 08       		.byte	8
 2921 0043 08       		.byte	8
 2922 0044 3E       		.byte	62
 2923 0045 08       		.byte	8
 2924 0046 08       		.byte	8
 2925 0047 08       		.byte	8
 2926 0048 80       		.byte	-128
 2927 0049 60       		.byte	96
 2928 004a 00       		.byte	0
 2929 004b 00       		.byte	0
 2930 004c 00       		.byte	0
 2931 004d 00       		.byte	0
 2932 004e 08       		.byte	8
 2933 004f 08       		.byte	8
 2934 0050 08       		.byte	8
 2935 0051 08       		.byte	8
 2936 0052 08       		.byte	8
 2937 0053 00       		.byte	0
ARM GAS  /tmp/ccfRjGDx.s 			page 90


 2938 0054 30       		.byte	48
 2939 0055 30       		.byte	48
 2940 0056 00       		.byte	0
 2941 0057 00       		.byte	0
 2942 0058 00       		.byte	0
 2943 0059 00       		.byte	0
 2944 005a 20       		.byte	32
 2945 005b 10       		.byte	16
 2946 005c 08       		.byte	8
 2947 005d 04       		.byte	4
 2948 005e 02       		.byte	2
 2949 005f 00       		.byte	0
 2950 0060 1E       		.byte	30
 2951 0061 31       		.byte	49
 2952 0062 29       		.byte	41
 2953 0063 25       		.byte	37
 2954 0064 23       		.byte	35
 2955 0065 1E       		.byte	30
 2956 0066 22       		.byte	34
 2957 0067 21       		.byte	33
 2958 0068 3F       		.byte	63
 2959 0069 20       		.byte	32
 2960 006a 20       		.byte	32
 2961 006b 20       		.byte	32
 2962 006c 32       		.byte	50
 2963 006d 29       		.byte	41
 2964 006e 29       		.byte	41
 2965 006f 29       		.byte	41
 2966 0070 29       		.byte	41
 2967 0071 26       		.byte	38
 2968 0072 12       		.byte	18
 2969 0073 21       		.byte	33
 2970 0074 21       		.byte	33
 2971 0075 25       		.byte	37
 2972 0076 25       		.byte	37
 2973 0077 1A       		.byte	26
 2974 0078 18       		.byte	24
 2975 0079 14       		.byte	20
 2976 007a 12       		.byte	18
 2977 007b 3F       		.byte	63
 2978 007c 10       		.byte	16
 2979 007d 10       		.byte	16
 2980 007e 17       		.byte	23
 2981 007f 25       		.byte	37
 2982 0080 25       		.byte	37
 2983 0081 25       		.byte	37
 2984 0082 25       		.byte	37
 2985 0083 19       		.byte	25
 2986 0084 1E       		.byte	30
 2987 0085 25       		.byte	37
 2988 0086 25       		.byte	37
 2989 0087 25       		.byte	37
 2990 0088 25       		.byte	37
 2991 0089 18       		.byte	24
 2992 008a 01       		.byte	1
 2993 008b 01       		.byte	1
 2994 008c 31       		.byte	49
ARM GAS  /tmp/ccfRjGDx.s 			page 91


 2995 008d 09       		.byte	9
 2996 008e 05       		.byte	5
 2997 008f 03       		.byte	3
 2998 0090 1A       		.byte	26
 2999 0091 25       		.byte	37
 3000 0092 25       		.byte	37
 3001 0093 25       		.byte	37
 3002 0094 25       		.byte	37
 3003 0095 1A       		.byte	26
 3004 0096 06       		.byte	6
 3005 0097 29       		.byte	41
 3006 0098 29       		.byte	41
 3007 0099 29       		.byte	41
 3008 009a 29       		.byte	41
 3009 009b 1E       		.byte	30
 3010 009c 24       		.byte	36
 3011 009d 00       		.byte	0
 3012 009e 00       		.byte	0
 3013 009f 00       		.byte	0
 3014 00a0 00       		.byte	0
 3015 00a1 00       		.byte	0
 3016 00a2 80       		.byte	-128
 3017 00a3 64       		.byte	100
 3018 00a4 00       		.byte	0
 3019 00a5 00       		.byte	0
 3020 00a6 00       		.byte	0
 3021 00a7 00       		.byte	0
 3022 00a8 08       		.byte	8
 3023 00a9 14       		.byte	20
 3024 00aa 22       		.byte	34
 3025 00ab 00       		.byte	0
 3026 00ac 00       		.byte	0
 3027 00ad 00       		.byte	0
 3028 00ae 14       		.byte	20
 3029 00af 14       		.byte	20
 3030 00b0 14       		.byte	20
 3031 00b1 14       		.byte	20
 3032 00b2 14       		.byte	20
 3033 00b3 00       		.byte	0
 3034 00b4 22       		.byte	34
 3035 00b5 14       		.byte	20
 3036 00b6 08       		.byte	8
 3037 00b7 00       		.byte	0
 3038 00b8 00       		.byte	0
 3039 00b9 00       		.byte	0
 3040 00ba 02       		.byte	2
 3041 00bb 01       		.byte	1
 3042 00bc 01       		.byte	1
 3043 00bd 29       		.byte	41
 3044 00be 05       		.byte	5
 3045 00bf 02       		.byte	2
 3046 00c0 1E       		.byte	30
 3047 00c1 21       		.byte	33
 3048 00c2 2D       		.byte	45
 3049 00c3 2B       		.byte	43
 3050 00c4 2D       		.byte	45
 3051 00c5 0E       		.byte	14
ARM GAS  /tmp/ccfRjGDx.s 			page 92


 3052 00c6 3E       		.byte	62
 3053 00c7 09       		.byte	9
 3054 00c8 09       		.byte	9
 3055 00c9 09       		.byte	9
 3056 00ca 09       		.byte	9
 3057 00cb 3E       		.byte	62
 3058 00cc 3F       		.byte	63
 3059 00cd 25       		.byte	37
 3060 00ce 25       		.byte	37
 3061 00cf 25       		.byte	37
 3062 00d0 25       		.byte	37
 3063 00d1 1A       		.byte	26
 3064 00d2 1E       		.byte	30
 3065 00d3 21       		.byte	33
 3066 00d4 21       		.byte	33
 3067 00d5 21       		.byte	33
 3068 00d6 21       		.byte	33
 3069 00d7 12       		.byte	18
 3070 00d8 3F       		.byte	63
 3071 00d9 21       		.byte	33
 3072 00da 21       		.byte	33
 3073 00db 21       		.byte	33
 3074 00dc 12       		.byte	18
 3075 00dd 0C       		.byte	12
 3076 00de 3F       		.byte	63
 3077 00df 25       		.byte	37
 3078 00e0 25       		.byte	37
 3079 00e1 25       		.byte	37
 3080 00e2 25       		.byte	37
 3081 00e3 21       		.byte	33
 3082 00e4 3F       		.byte	63
 3083 00e5 05       		.byte	5
 3084 00e6 05       		.byte	5
 3085 00e7 05       		.byte	5
 3086 00e8 05       		.byte	5
 3087 00e9 01       		.byte	1
 3088 00ea 1E       		.byte	30
 3089 00eb 21       		.byte	33
 3090 00ec 21       		.byte	33
 3091 00ed 21       		.byte	33
 3092 00ee 29       		.byte	41
 3093 00ef 1A       		.byte	26
 3094 00f0 3F       		.byte	63
 3095 00f1 04       		.byte	4
 3096 00f2 04       		.byte	4
 3097 00f3 04       		.byte	4
 3098 00f4 04       		.byte	4
 3099 00f5 3F       		.byte	63
 3100 00f6 21       		.byte	33
 3101 00f7 21       		.byte	33
 3102 00f8 3F       		.byte	63
 3103 00f9 21       		.byte	33
 3104 00fa 21       		.byte	33
 3105 00fb 21       		.byte	33
 3106 00fc 10       		.byte	16
 3107 00fd 20       		.byte	32
 3108 00fe 20       		.byte	32
ARM GAS  /tmp/ccfRjGDx.s 			page 93


 3109 00ff 20       		.byte	32
 3110 0100 20       		.byte	32
 3111 0101 1F       		.byte	31
 3112 0102 3F       		.byte	63
 3113 0103 04       		.byte	4
 3114 0104 0C       		.byte	12
 3115 0105 0A       		.byte	10
 3116 0106 11       		.byte	17
 3117 0107 20       		.byte	32
 3118 0108 3F       		.byte	63
 3119 0109 20       		.byte	32
 3120 010a 20       		.byte	32
 3121 010b 20       		.byte	32
 3122 010c 20       		.byte	32
 3123 010d 20       		.byte	32
 3124 010e 3F       		.byte	63
 3125 010f 02       		.byte	2
 3126 0110 04       		.byte	4
 3127 0111 04       		.byte	4
 3128 0112 02       		.byte	2
 3129 0113 3F       		.byte	63
 3130 0114 3F       		.byte	63
 3131 0115 02       		.byte	2
 3132 0116 04       		.byte	4
 3133 0117 08       		.byte	8
 3134 0118 10       		.byte	16
 3135 0119 3F       		.byte	63
 3136 011a 1E       		.byte	30
 3137 011b 21       		.byte	33
 3138 011c 21       		.byte	33
 3139 011d 21       		.byte	33
 3140 011e 21       		.byte	33
 3141 011f 1E       		.byte	30
 3142 0120 3F       		.byte	63
 3143 0121 09       		.byte	9
 3144 0122 09       		.byte	9
 3145 0123 09       		.byte	9
 3146 0124 09       		.byte	9
 3147 0125 06       		.byte	6
 3148 0126 1E       		.byte	30
 3149 0127 21       		.byte	33
 3150 0128 29       		.byte	41
 3151 0129 31       		.byte	49
 3152 012a 21       		.byte	33
 3153 012b 1E       		.byte	30
 3154 012c 3F       		.byte	63
 3155 012d 09       		.byte	9
 3156 012e 09       		.byte	9
 3157 012f 09       		.byte	9
 3158 0130 19       		.byte	25
 3159 0131 26       		.byte	38
 3160 0132 12       		.byte	18
 3161 0133 25       		.byte	37
 3162 0134 25       		.byte	37
 3163 0135 25       		.byte	37
 3164 0136 25       		.byte	37
 3165 0137 18       		.byte	24
ARM GAS  /tmp/ccfRjGDx.s 			page 94


 3166 0138 01       		.byte	1
 3167 0139 01       		.byte	1
 3168 013a 01       		.byte	1
 3169 013b 3F       		.byte	63
 3170 013c 01       		.byte	1
 3171 013d 01       		.byte	1
 3172 013e 1F       		.byte	31
 3173 013f 20       		.byte	32
 3174 0140 20       		.byte	32
 3175 0141 20       		.byte	32
 3176 0142 20       		.byte	32
 3177 0143 1F       		.byte	31
 3178 0144 0F       		.byte	15
 3179 0145 10       		.byte	16
 3180 0146 20       		.byte	32
 3181 0147 20       		.byte	32
 3182 0148 10       		.byte	16
 3183 0149 0F       		.byte	15
 3184 014a 1F       		.byte	31
 3185 014b 20       		.byte	32
 3186 014c 10       		.byte	16
 3187 014d 10       		.byte	16
 3188 014e 20       		.byte	32
 3189 014f 1F       		.byte	31
 3190 0150 21       		.byte	33
 3191 0151 12       		.byte	18
 3192 0152 0C       		.byte	12
 3193 0153 0C       		.byte	12
 3194 0154 12       		.byte	18
 3195 0155 21       		.byte	33
 3196 0156 01       		.byte	1
 3197 0157 02       		.byte	2
 3198 0158 0C       		.byte	12
 3199 0159 38       		.byte	56
 3200 015a 04       		.byte	4
 3201 015b 02       		.byte	2
 3202 015c 21       		.byte	33
 3203 015d 31       		.byte	49
 3204 015e 29       		.byte	41
 3205 015f 25       		.byte	37
 3206 0160 23       		.byte	35
 3207 0161 21       		.byte	33
 3208 0162 3F       		.byte	63
 3209 0163 21       		.byte	33
 3210 0164 00       		.byte	0
 3211 0165 00       		.byte	0
 3212 0166 00       		.byte	0
 3213 0167 00       		.byte	0
 3214 0168 02       		.byte	2
 3215 0169 04       		.byte	4
 3216 016a 08       		.byte	8
 3217 016b 10       		.byte	16
 3218 016c 20       		.byte	32
 3219 016d 00       		.byte	0
 3220 016e 21       		.byte	33
 3221 016f 3F       		.byte	63
 3222 0170 00       		.byte	0
ARM GAS  /tmp/ccfRjGDx.s 			page 95


 3223 0171 00       		.byte	0
 3224 0172 00       		.byte	0
 3225 0173 00       		.byte	0
 3226 0174 04       		.byte	4
 3227 0175 02       		.byte	2
 3228 0176 3F       		.byte	63
 3229 0177 02       		.byte	2
 3230 0178 04       		.byte	4
 3231 0179 00       		.byte	0
 3232 017a 40       		.byte	64
 3233 017b 40       		.byte	64
 3234 017c 40       		.byte	64
 3235 017d 40       		.byte	64
 3236 017e 40       		.byte	64
 3237 017f 40       		.byte	64
 3238 0180 01       		.byte	1
 3239 0181 02       		.byte	2
 3240 0182 00       		.byte	0
 3241 0183 00       		.byte	0
 3242 0184 00       		.byte	0
 3243 0185 00       		.byte	0
 3244 0186 10       		.byte	16
 3245 0187 30       		.byte	48
 3246 0188 2A       		.byte	42
 3247 0189 2A       		.byte	42
 3248 018a 3C       		.byte	60
 3249 018b 00       		.byte	0
 3250 018c 3F       		.byte	63
 3251 018d 24       		.byte	36
 3252 018e 24       		.byte	36
 3253 018f 24       		.byte	36
 3254 0190 18       		.byte	24
 3255 0191 00       		.byte	0
 3256 0192 0C       		.byte	12
 3257 0193 14       		.byte	20
 3258 0194 22       		.byte	34
 3259 0195 22       		.byte	34
 3260 0196 00       		.byte	0
 3261 0197 00       		.byte	0
 3262 0198 18       		.byte	24
 3263 0199 24       		.byte	36
 3264 019a 24       		.byte	36
 3265 019b 24       		.byte	36
 3266 019c 3F       		.byte	63
 3267 019d 00       		.byte	0
 3268 019e 1C       		.byte	28
 3269 019f 2C       		.byte	44
 3270 01a0 2A       		.byte	42
 3271 01a1 2A       		.byte	42
 3272 01a2 24       		.byte	36
 3273 01a3 00       		.byte	0
 3274 01a4 3E       		.byte	62
 3275 01a5 05       		.byte	5
 3276 01a6 01       		.byte	1
 3277 01a7 00       		.byte	0
 3278 01a8 00       		.byte	0
 3279 01a9 00       		.byte	0
ARM GAS  /tmp/ccfRjGDx.s 			page 96


 3280 01aa 18       		.byte	24
 3281 01ab 28       		.byte	40
 3282 01ac A4       		.byte	-92
 3283 01ad A4       		.byte	-92
 3284 01ae 7C       		.byte	124
 3285 01af 00       		.byte	0
 3286 01b0 3F       		.byte	63
 3287 01b1 04       		.byte	4
 3288 01b2 04       		.byte	4
 3289 01b3 0C       		.byte	12
 3290 01b4 30       		.byte	48
 3291 01b5 00       		.byte	0
 3292 01b6 24       		.byte	36
 3293 01b7 3D       		.byte	61
 3294 01b8 20       		.byte	32
 3295 01b9 00       		.byte	0
 3296 01ba 00       		.byte	0
 3297 01bb 00       		.byte	0
 3298 01bc 20       		.byte	32
 3299 01bd 40       		.byte	64
 3300 01be 40       		.byte	64
 3301 01bf 3D       		.byte	61
 3302 01c0 00       		.byte	0
 3303 01c1 00       		.byte	0
 3304 01c2 3F       		.byte	63
 3305 01c3 0C       		.byte	12
 3306 01c4 12       		.byte	18
 3307 01c5 20       		.byte	32
 3308 01c6 00       		.byte	0
 3309 01c7 00       		.byte	0
 3310 01c8 1F       		.byte	31
 3311 01c9 20       		.byte	32
 3312 01ca 20       		.byte	32
 3313 01cb 00       		.byte	0
 3314 01cc 00       		.byte	0
 3315 01cd 00       		.byte	0
 3316 01ce 3E       		.byte	62
 3317 01cf 02       		.byte	2
 3318 01d0 3C       		.byte	60
 3319 01d1 02       		.byte	2
 3320 01d2 3C       		.byte	60
 3321 01d3 00       		.byte	0
 3322 01d4 3E       		.byte	62
 3323 01d5 02       		.byte	2
 3324 01d6 02       		.byte	2
 3325 01d7 02       		.byte	2
 3326 01d8 3C       		.byte	60
 3327 01d9 00       		.byte	0
 3328 01da 0C       		.byte	12
 3329 01db 14       		.byte	20
 3330 01dc 22       		.byte	34
 3331 01dd 32       		.byte	50
 3332 01de 0C       		.byte	12
 3333 01df 00       		.byte	0
 3334 01e0 FC       		.byte	-4
 3335 01e1 24       		.byte	36
 3336 01e2 24       		.byte	36
ARM GAS  /tmp/ccfRjGDx.s 			page 97


 3337 01e3 24       		.byte	36
 3338 01e4 18       		.byte	24
 3339 01e5 00       		.byte	0
 3340 01e6 18       		.byte	24
 3341 01e7 24       		.byte	36
 3342 01e8 24       		.byte	36
 3343 01e9 24       		.byte	36
 3344 01ea FC       		.byte	-4
 3345 01eb 80       		.byte	-128
 3346 01ec 3C       		.byte	60
 3347 01ed 04       		.byte	4
 3348 01ee 02       		.byte	2
 3349 01ef 02       		.byte	2
 3350 01f0 00       		.byte	0
 3351 01f1 00       		.byte	0
 3352 01f2 24       		.byte	36
 3353 01f3 2C       		.byte	44
 3354 01f4 2A       		.byte	42
 3355 01f5 2A       		.byte	42
 3356 01f6 10       		.byte	16
 3357 01f7 00       		.byte	0
 3358 01f8 02       		.byte	2
 3359 01f9 1F       		.byte	31
 3360 01fa 22       		.byte	34
 3361 01fb 20       		.byte	32
 3362 01fc 00       		.byte	0
 3363 01fd 00       		.byte	0
 3364 01fe 1E       		.byte	30
 3365 01ff 20       		.byte	32
 3366 0200 20       		.byte	32
 3367 0201 20       		.byte	32
 3368 0202 1E       		.byte	30
 3369 0203 00       		.byte	0
 3370 0204 06       		.byte	6
 3371 0205 18       		.byte	24
 3372 0206 20       		.byte	32
 3373 0207 18       		.byte	24
 3374 0208 06       		.byte	6
 3375 0209 00       		.byte	0
 3376 020a 1E       		.byte	30
 3377 020b 30       		.byte	48
 3378 020c 1C       		.byte	28
 3379 020d 30       		.byte	48
 3380 020e 0E       		.byte	14
 3381 020f 00       		.byte	0
 3382 0210 22       		.byte	34
 3383 0211 14       		.byte	20
 3384 0212 08       		.byte	8
 3385 0213 14       		.byte	20
 3386 0214 22       		.byte	34
 3387 0215 00       		.byte	0
 3388 0216 0C       		.byte	12
 3389 0217 10       		.byte	16
 3390 0218 A0       		.byte	-96
 3391 0219 A0       		.byte	-96
 3392 021a 7C       		.byte	124
 3393 021b 00       		.byte	0
ARM GAS  /tmp/ccfRjGDx.s 			page 98


 3394 021c 22       		.byte	34
 3395 021d 32       		.byte	50
 3396 021e 2A       		.byte	42
 3397 021f 26       		.byte	38
 3398 0220 22       		.byte	34
 3399 0221 22       		.byte	34
 3400 0222 0C       		.byte	12
 3401 0223 3F       		.byte	63
 3402 0224 21       		.byte	33
 3403 0225 00       		.byte	0
 3404 0226 00       		.byte	0
 3405 0227 00       		.byte	0
 3406 0228 3F       		.byte	63
 3407 0229 00       		.byte	0
 3408 022a 00       		.byte	0
 3409 022b 00       		.byte	0
 3410 022c 00       		.byte	0
 3411 022d 00       		.byte	0
 3412 022e 21       		.byte	33
 3413 022f 3F       		.byte	63
 3414 0230 0C       		.byte	12
 3415 0231 00       		.byte	0
 3416 0232 00       		.byte	0
 3417 0233 00       		.byte	0
 3418 0234 02       		.byte	2
 3419 0235 01       		.byte	1
 3420 0236 02       		.byte	2
 3421 0237 01       		.byte	1
 3422 0238 00       		.byte	0
 3423 0239 00       		.byte	0
 3424 023a 00       		.byte	0
 3425 023b 00       		.byte	0
 3426 023c 00       		.byte	0
 3427 023d 00       		.byte	0
 3428 023e 00       		.byte	0
 3429 023f 00       		.byte	0
 3430              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3431              		.align	2
 3432              	.LC32:
 3433 0000 64667564 		.ascii	"dfudfudfudfudfu\000"
 3433      66756466 
 3433      75646675 
 3433      64667500 
 3434              	.LC34:
 3435 0010 4F747465 		.ascii	"Otter-Iron\000"
 3435      722D4972 
 3435      6F6E00
 3436 001b 00       		.space	1
 3437              	.LC36:
 3438 001c 6279204A 		.ascii	"by Jan Henrik\000"
 3438      616E2048 
 3438      656E7269 
 3438      6B00
 3439 002a 0000     		.space	2
 3440              	.LC42:
 3441 002c 25642043 		.ascii	"%d C   \000"
 3441      20202000 
ARM GAS  /tmp/ccfRjGDx.s 			page 99


 3442              	.LC44:
 3443 0034 25642E25 		.ascii	"%d.%d C\000"
 3443      64204300 
 3444              	.LC46:
 3445 003c 25642E25 		.ascii	"%d.%d V\000"
 3445      64205600 
 3446              	.LC48:
 3447 0044 25642E25 		.ascii	"%d.%d A\000"
 3447      64204100 
 3448              		.text
 3449              	.Letext0:
 3450              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 3451              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 3452              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 3453              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 3454              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 3455              		.file 9 "/usr/include/newlib/sys/lock.h"
 3456              		.file 10 "/usr/include/newlib/sys/_types.h"
 3457              		.file 11 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 3458              		.file 12 "/usr/include/newlib/sys/reent.h"
 3459              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 3460              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 3461              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 3462              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 3463              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 3464              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 3465              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 3466              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"
 3467              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 3468              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 3469              		.file 23 "/usr/include/newlib/stdlib.h"
 3470              		.file 24 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 3471              		.file 25 "Inc/usbd_desc.h"
 3472              		.file 26 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 3473              		.file 27 "Inc/usbd_cdc_interface.h"
 3474              		.file 28 "Inc/font.h"
 3475              		.file 29 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 3476              		.file 30 "Inc/main.h"
 3477              		.file 31 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 3478              		.file 32 "/usr/include/newlib/string.h"
 3479              		.file 33 "<built-in>"
 3480              		.file 34 "/usr/include/newlib/stdio.h"
 3481              		.file 35 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 3482              		.file 36 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_flash.h"
ARM GAS  /tmp/ccfRjGDx.s 			page 100


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccfRjGDx.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccfRjGDx.s:127    .text.MX_GPIO_Init:0000000000000084 $d
     /tmp/ccfRjGDx.s:134    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:140    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccfRjGDx.s:192    .text.MX_DMA_Init:000000000000003c $d
     /tmp/ccfRjGDx.s:197    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:203    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccfRjGDx.s:336    .text.MX_ADC_Init:00000000000000a4 $d
                            *COM*:000000000000004c hadc
     /tmp/ccfRjGDx.s:343    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:349    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccfRjGDx.s:403    .text.MX_I2C1_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c1
     /tmp/ccfRjGDx.s:410    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:416    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccfRjGDx.s:470    .text.MX_I2C2_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c2
     /tmp/ccfRjGDx.s:477    .text.TIM3_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:483    .text.TIM3_Init:0000000000000000 TIM3_Init
     /tmp/ccfRjGDx.s:553    .text.TIM3_Init:0000000000000050 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccfRjGDx.s:561    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:567    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccfRjGDx.s:734    .text.MX_TIM1_Init:00000000000000d4 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccfRjGDx.s:741    .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/ccfRjGDx.s:747    .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/ccfRjGDx.s:779    .text.MX_IWDG_Init:0000000000000018 $d
                            *COM*:0000000000000010 hiwdg
     /tmp/ccfRjGDx.s:804    .text.reg:0000000000000000 $t
     /tmp/ccfRjGDx.s:811    .text.reg:0000000000000000 reg
     /tmp/ccfRjGDx.s:1180   .text.reg:000000000000025c $d
     /tmp/ccfRjGDx.s:1209   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccfRjGDx.s:1216   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccfRjGDx.s:1262   .text.HAL_TIM_PeriodElapsedCallback:0000000000000028 $d
                            *COM*:0000000000000004 sendDataUSB
                            *COM*:0000000000000224 USBD_Device
                            *COM*:0000000000000200 UserTxBuffer
     /tmp/ccfRjGDx.s:1270   .text.USB_printfloat:0000000000000000 $t
     /tmp/ccfRjGDx.s:1277   .text.USB_printfloat:0000000000000000 USB_printfloat
     /tmp/ccfRjGDx.s:1335   .text.USB_printfloat:0000000000000048 $d
     /tmp/ccfRjGDx.s:1343   .text.disp_init:0000000000000000 $t
     /tmp/ccfRjGDx.s:1350   .text.disp_init:0000000000000000 disp_init
     /tmp/ccfRjGDx.s:1409   .text.disp_init:0000000000000040 $d
                            *COM*:00000000000000da screenBuffer
     /tmp/ccfRjGDx.s:1418   .text.refresh:0000000000000000 $t
     /tmp/ccfRjGDx.s:1425   .text.refresh:0000000000000000 refresh
     /tmp/ccfRjGDx.s:1479   .text.refresh:0000000000000034 $d
     /tmp/ccfRjGDx.s:1486   .text.clear_screen:0000000000000000 $t
     /tmp/ccfRjGDx.s:1493   .text.clear_screen:0000000000000000 clear_screen
     /tmp/ccfRjGDx.s:1516   .text.clear_screen:0000000000000010 $d
     /tmp/ccfRjGDx.s:1521   .text.set_screen:0000000000000000 $t
     /tmp/ccfRjGDx.s:1528   .text.set_screen:0000000000000000 set_screen
     /tmp/ccfRjGDx.s:1551   .text.set_screen:0000000000000010 $d
ARM GAS  /tmp/ccfRjGDx.s 			page 101


     /tmp/ccfRjGDx.s:1556   .text.write_pixel:0000000000000000 $t
     /tmp/ccfRjGDx.s:1563   .text.write_pixel:0000000000000000 write_pixel
     /tmp/ccfRjGDx.s:1650   .text.write_pixel:0000000000000070 $d
     /tmp/ccfRjGDx.s:1655   .text.draw_v_line:0000000000000000 $t
     /tmp/ccfRjGDx.s:1662   .text.draw_v_line:0000000000000000 draw_v_line
     /tmp/ccfRjGDx.s:1715   .text.draw_char:0000000000000000 $t
     /tmp/ccfRjGDx.s:1722   .text.draw_char:0000000000000000 draw_char
     /tmp/ccfRjGDx.s:1840   .text.draw_char:0000000000000064 $d
     /tmp/ccfRjGDx.s:2853   .rodata.font:0000000000000000 font
     /tmp/ccfRjGDx.s:1845   .text.draw_string:0000000000000000 $t
     /tmp/ccfRjGDx.s:1852   .text.draw_string:0000000000000000 draw_string
     /tmp/ccfRjGDx.s:1903   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccfRjGDx.s:1910   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccfRjGDx.s:2003   .text.SystemClock_Config:000000000000006c $d
     /tmp/ccfRjGDx.s:2008   .text.main:0000000000000000 $t
     /tmp/ccfRjGDx.s:2015   .text.main:0000000000000000 main
     /tmp/ccfRjGDx.s:2641   .text.main:0000000000000388 $d
     /tmp/ccfRjGDx.s:2674   .text.Error_Handler:0000000000000000 $t
     /tmp/ccfRjGDx.s:2681   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccfRjGDx.s:2737   .data.OLED_Setup_Array:0000000000000000 OLED_Setup_Array
     /tmp/ccfRjGDx.s:2827   .rodata.REFRESH_COMMANDS:0000000000000000 REFRESH_COMMANDS
     /tmp/ccfRjGDx.s:2819   .data.tipcal:0000000000000000 tipcal
     /tmp/ccfRjGDx.s:2793   .data.r:0000000000000000 r
     /tmp/ccfRjGDx.s:2808   .data.s:0000000000000000 s
                            *COM*:0000000000000044 hdma_adc
     /tmp/ccfRjGDx.s:2730   .data.MAX_DUTY:0000000000000000 MAX_DUTY
                            *COM*:0000000000000200 UserRxBuffer
     /tmp/ccfRjGDx.s:2714   .rodata:0000000000000000 $d
     /tmp/ccfRjGDx.s:2719   .bss.ADC_raw:0000000000000000 $d
     /tmp/ccfRjGDx.s:2723   .bss.ADC_raw:0000000000000000 ADC_raw
     /tmp/ccfRjGDx.s:2726   .data.MAX_DUTY:0000000000000000 $d
     /tmp/ccfRjGDx.s:2733   .data.OLED_Setup_Array:0000000000000000 $d
     /tmp/ccfRjGDx.s:2789   .data.r:0000000000000000 $d
     /tmp/ccfRjGDx.s:2804   .data.s:0000000000000000 $d
     /tmp/ccfRjGDx.s:2815   .data.tipcal:0000000000000000 $d
     /tmp/ccfRjGDx.s:2823   .rodata.REFRESH_COMMANDS:0000000000000000 $d
     /tmp/ccfRjGDx.s:2846   .rodata.USB_printfloat.str1.4:0000000000000000 $d
     /tmp/ccfRjGDx.s:2850   .rodata.font:0000000000000000 $d
     /tmp/ccfRjGDx.s:3431   .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_MspInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/ccfRjGDx.s 			page 102


HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_IWDG_Init
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_i2d
__aeabi_dadd
__aeabi_fcmpge
__aeabi_fcmple
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_f2iz
USBD_CDC_SetTxBuffer
USBD_CDC_TransmitPacket
__aeabi_f2uiz
sprintf
memcpy
HAL_I2C_GetState
HAL_I2C_Master_Transmit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_OC_Start
HAL_ADC_Start_DMA
HAL_Delay
HAL_GPIO_ReadPin
HAL_FLASH_Unlock
HAL_FLASH_Program
HAL_FLASH_Lock
HAL_IWDG_Refresh
