ARM GAS  /tmp/ccrwP30Q.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB59:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*
   3:Src/main.c    ****  * Otter-Iron  -  Stm32f072 based soldering iron.
   4:Src/main.c    ****  * Copyright (C) 2020 Jan Henrik Hemsing
   5:Src/main.c    ****  *
   6:Src/main.c    ****  * This program is free software: you can redistribute it and/or modify it
   7:Src/main.c    ****  * under the terms of the GNU General Public License as published by the Free
   8:Src/main.c    ****  * Software Foundation, either version 3 of the License, or (at your option)
   9:Src/main.c    ****  * any later version.
  10:Src/main.c    ****  *
  11:Src/main.c    ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  12:Src/main.c    ****  * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
  13:Src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  14:Src/main.c    ****  * more details.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * You should have received a copy of the GNU General Public License along with
  17:Src/main.c    ****  * this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "font.h"
  22:Src/main.c    **** #include "stusb4500.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** // Enable serial printing via CDC, quite buggy
  25:Src/main.c    **** /* #define ENABLESERIAL */
  26:Src/main.c    **** // Enable Current display, shows up after a few millisecconds instead of temp-target
  27:Src/main.c    **** #define DISPLAYCURRENT
  28:Src/main.c    **** // Enable check of USB PD profile capable before beforing iron
  29:Src/main.c    **** #define CHECKUSBPD
  30:Src/main.c    **** 
  31:Src/main.c    **** #define FILT(a, b, c) ((a) * (c) + (b) * ((1.0f) - (c)))
  32:Src/main.c    **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  33:Src/main.c    **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 2


  34:Src/main.c    **** #define TTIP_AVG_FILTER 0.99f
  35:Src/main.c    **** #define DISP_AVG_FILTER 0.9f
  36:Src/main.c    **** #define MIN_DUTY 0
  37:Src/main.c    **** #define MAX_DUTY 2000
  38:Src/main.c    **** uint16_t wduty = 150;
  39:Src/main.c    **** 
  40:Src/main.c    **** ADC_HandleTypeDef hadc;
  41:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  42:Src/main.c    **** 
  43:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  44:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  45:Src/main.c    **** 
  46:Src/main.c    **** TIM_HandleTypeDef htim1;
  47:Src/main.c    **** TIM_HandleTypeDef htim3;
  48:Src/main.c    **** 
  49:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  50:Src/main.c    **** 
  51:Src/main.c    **** USBD_HandleTypeDef USBD_Device;
  52:Src/main.c    **** 
  53:Src/main.c    **** void SystemClock_Config(void);
  54:Src/main.c    **** static void MX_GPIO_Init(void);
  55:Src/main.c    **** static void MX_ADC_Init(void);
  56:Src/main.c    **** static void MX_DMA_Init(void);
  57:Src/main.c    **** static void MX_I2C1_Init(void);
  58:Src/main.c    **** static void MX_I2C2_Init(void);
  59:Src/main.c    **** static void MX_TIM1_Init(void);
  60:Src/main.c    **** static void TIM3_Init(void);
  61:Src/main.c    **** static void MX_IWDG_Init(void);
  62:Src/main.c    **** 
  63:Src/main.c    **** void reg(void);
  64:Src/main.c    **** void disp_init(void);
  65:Src/main.c    **** void refresh(void);
  66:Src/main.c    **** void clear_screen(void);
  67:Src/main.c    **** void set_screen(void);
  68:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color);
  69:Src/main.c    **** void draw_char(unsigned char  c, uint8_t x, uint8_t y, uint8_t brightness);
  70:Src/main.c    **** void draw_string(const unsigned char * str, uint8_t x, uint8_t y, uint8_t brightness);
  71:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color);
  72:Src/main.c    **** void USB_printfloat(float _buf);
  73:Src/main.c    **** void read_stusb_rdo(void);
  74:Src/main.c    **** void read_stusb_pdo(void);
  75:Src/main.c    **** 
  76:Src/main.c    **** struct status_t{
  77:Src/main.c    ****   float ttip;
  78:Src/main.c    ****   float ttipavg;
  79:Src/main.c    ****   float uin;
  80:Src/main.c    ****   float iin;
  81:Src/main.c    ****   float iinavg;
  82:Src/main.c    ****   float imax;
  83:Src/main.c    ****   float tref;
  84:Src/main.c    ****   uint8_t writeFlash;
  85:Src/main.c    ****   uint8_t button[2];
  86:Src/main.c    ****   float drawlineavg;
  87:Src/main.c    **** #ifdef DISPLAYCURRENT
  88:Src/main.c    ****   uint8_t timeout;
  89:Src/main.c    **** #endif
  90:Src/main.c    ****   uint8_t active;
ARM GAS  /tmp/ccrwP30Q.s 			page 3


  91:Src/main.c    ****   uint8_t pdo;
  92:Src/main.c    **** }s = {.writeFlash = 0, .imax = 3.0f};
  93:Src/main.c    **** 
  94:Src/main.c    **** struct reg_t{
  95:Src/main.c    ****   float target;
  96:Src/main.c    ****   float error;
  97:Src/main.c    ****   float errorprior;
  98:Src/main.c    ****   float ierror;
  99:Src/main.c    ****   float imax;
 100:Src/main.c    ****   float derror;
 101:Src/main.c    ****   int16_t duty;
 102:Src/main.c    ****   float cycletime;
 103:Src/main.c    ****   float Kp;
 104:Src/main.c    ****   float Ki;
 105:Src/main.c    ****   float Kd;
 106:Src/main.c    ****   float deadband;
 107:Src/main.c    **** }r = {.Kp = 0.5f,.Ki = 0.01f,.Kd = 0.0f,.cycletime = 0.0000725f,.imax=200.0f,.target=220.0f,.deadba
 108:Src/main.c    **** //}r = {.Kp = 0.3f,.Ki = 0.13f,.Kd = 0.3f,.cycletime = 0.0005f,.imax=200.0f,.target=220.0f,.deadban
 109:Src/main.c    **** 
 110:Src/main.c    **** struct tipcal_t{
 111:Src/main.c    ****   float offset;
 112:Src/main.c    ****   float coefficient;
 113:Src/main.c    **** } tipcal = {.offset = 120, .coefficient = 92};
 114:Src/main.c    **** 
 115:Src/main.c    **** static uint16_t ADC_raw[4];
 116:Src/main.c    **** 
 117:Src/main.c    **** extern uint8_t UserTxBuffer[APP_TX_DATA_SIZE];/* Received Data over UART (CDC interface) are stored
 118:Src/main.c    **** uint32_t sendDataUSB;
 119:Src/main.c    **** 
 120:Src/main.c    **** STUSB_GEN1S_RDO_REG_STATUS_RegTypeDef Nego_RDO;
 121:Src/main.c    **** 
 122:Src/main.c    **** const unsigned char* dfu_string = (unsigned char*) "dfudfudfudfudfu";
 123:Src/main.c    **** const unsigned char* otter_string = (unsigned char*) "Otter-Iron";
 124:Src/main.c    **** const unsigned char* by_string = (unsigned char*) "by Jan Henrik";
 125:Src/main.c    **** const unsigned char* assembly_string = (unsigned char*) "Assembly by";
 126:Src/main.c    **** const unsigned char* jbr_string = (unsigned char*) "JBR Eng 2020";
 127:Src/main.c    **** 
 128:Src/main.c    **** int main(void)
 129:Src/main.c    **** {
 130:Src/main.c    ****   HAL_Init();
 131:Src/main.c    **** 
 132:Src/main.c    ****   SystemClock_Config();
 133:Src/main.c    **** 
 134:Src/main.c    ****   MX_GPIO_Init();
 135:Src/main.c    ****   MX_DMA_Init();
 136:Src/main.c    ****   MX_ADC_Init();
 137:Src/main.c    ****   MX_I2C1_Init();
 138:Src/main.c    ****   /* MX_I2C2_Init(); */
 139:Src/main.c    ****   MX_TIM1_Init();
 140:Src/main.c    ****   TIM3_Init();
 141:Src/main.c    **** 
 142:Src/main.c    ****   HAL_Delay(50);
 143:Src/main.c    ****   disp_init();
 144:Src/main.c    ****   HAL_Delay(150);
 145:Src/main.c    ****   clear_screen();
 146:Src/main.c    **** 
 147:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
ARM GAS  /tmp/ccrwP30Q.s 			page 4


 148:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 149:Src/main.c    **** 
 150:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_raw, 4);
 151:Src/main.c    **** 
 152:Src/main.c    ****   //DFU bootloader
 153:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 154:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 155:Src/main.c    ****     draw_string(dfu_string, 1, 8 ,1);
 156:Src/main.c    ****     refresh();
 157:Src/main.c    ****     HAL_Delay(40);
 158:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 159:Src/main.c    ****     NVIC_SystemReset();
 160:Src/main.c    ****   } else {
 161:Src/main.c    ****     draw_string(otter_string, 15, 1 ,1);
 162:Src/main.c    ****     draw_string(by_string, 10, 9 ,1);
 163:Src/main.c    ****     refresh();
 164:Src/main.c    ****     HAL_Delay(1000);
 165:Src/main.c    ****     clear_screen();
 166:Src/main.c    ****     draw_string(assembly_string, 14, 1 ,1);
 167:Src/main.c    ****     draw_string(jbr_string, 8, 9 ,1);
 168:Src/main.c    ****     refresh();
 169:Src/main.c    **** #ifdef ENABLESERIAL
 170:Src/main.c    ****     //start USB CDC
 171:Src/main.c    ****     USBD_Init(&USBD_Device, &VCP_Desc, 0);
 172:Src/main.c    ****     USBD_RegisterClass(&USBD_Device, &USBD_CDC);
 173:Src/main.c    ****     USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 174:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 175:Src/main.c    ****     USBD_Start(&USBD_Device);
 176:Src/main.c    **** #endif
 177:Src/main.c    **** #ifdef DISPLAYCURRENT
 178:Src/main.c    ****       s.timeout = 20;
 179:Src/main.c    **** #endif
 180:Src/main.c    ****   }
 181:Src/main.c    **** 
 182:Src/main.c    ****   HAL_Delay(1000);
 183:Src/main.c    ****   MX_IWDG_Init();
 184:Src/main.c    **** 
 185:Src/main.c    ****   r.target = *((uint16_t *) 0x0800e400);
 186:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 187:Src/main.c    **** 
 188:Src/main.c    ****   while (1)
 189:Src/main.c    ****   {
 190:Src/main.c    ****     HAL_Delay(50);
 191:Src/main.c    **** 
 192:Src/main.c    ****     //UI
 193:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B1_Pin);
 194:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 195:Src/main.c    **** 
 196:Src/main.c    ****     if(s.button[0] == 1){
 197:Src/main.c    ****       r.target -= 5;
 198:Src/main.c    ****       s.writeFlash = 1;
 199:Src/main.c    ****       HAL_Delay(40);
 200:Src/main.c    ****     }
 201:Src/main.c    **** 
 202:Src/main.c    ****     if(s.button[1] == 1){
 203:Src/main.c    ****       r.target += 5;
 204:Src/main.c    ****       s.writeFlash = 1;
ARM GAS  /tmp/ccrwP30Q.s 			page 5


 205:Src/main.c    ****       HAL_Delay(40);
 206:Src/main.c    ****     }
 207:Src/main.c    **** 
 208:Src/main.c    ****     r.target = CLAMP(r.target, 20, 400);
 209:Src/main.c    **** 
 210:Src/main.c    ****     if(s.writeFlash == 1){
 211:Src/main.c    ****       HAL_FLASH_Unlock();
 212:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 213:Src/main.c    ****       FLASH->AR = 0x0800e400;
 214:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 215:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 216:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 217:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 218:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 219:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 220:Src/main.c    ****         HAL_FLASH_Lock();
 221:Src/main.c    ****         s.writeFlash = 0;
 222:Src/main.c    ****       }
 223:Src/main.c    ****       #ifdef DISPLAYCURRENT
 224:Src/main.c    ****             s.timeout = 12;
 225:Src/main.c    ****       #endif
 226:Src/main.c    ****     }
 227:Src/main.c    **** 
 228:Src/main.c    **** #ifdef ENABLESERIAL
 229:Src/main.c    ****     // send temperature via USB CDC
 230:Src/main.c    ****     USB_printfloat(r.error);
 231:Src/main.c    **** #endif
 232:Src/main.c    **** 
 233:Src/main.c    ****     //super shitty display code
 234:Src/main.c    ****     unsigned char str1[14] = "          ";
 235:Src/main.c    ****     unsigned char str2[14] = "          ";
 236:Src/main.c    ****     unsigned char str3[14] = "          ";
 237:Src/main.c    ****     unsigned char str4[14] = "          ";
 238:Src/main.c    ****     unsigned char str5[14] = "          ";
 239:Src/main.c    ****     unsigned char str6[14] = "          ";
 240:Src/main.c    ****     sprintf((char * restrict) str1, "%d C   ", (uint16_t)r.target);
 241:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 242:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 243:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 244:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 245:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 246:Src/main.c    **** 
 247:Src/main.c    ****     clear_screen();
 248:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 249:Src/main.c    ****     draw_string(str6, 60, 1 ,1);
 250:Src/main.c    ****     draw_string(str5, 10, 9 ,1);
 251:Src/main.c    **** #ifdef DISPLAYCURRENT
 252:Src/main.c    ****     if(s.timeout == 0){
 253:Src/main.c    ****       draw_string(str2, 10, 9 ,1);
 254:Src/main.c    ****       draw_string(str3, 60, 1 ,1);
 255:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 256:Src/main.c    ****     } else {
 257:Src/main.c    ****       s.timeout--;
 258:Src/main.c    ****     }
 259:Src/main.c    **** #endif
 260:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 261:Src/main.c    **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 6


 262:Src/main.c    ****     if (s.active) {
 263:Src/main.c    ****       s.drawlineavg = (s.drawlineavg * DISP_AVG_FILTER) + (CLAMP(r.error*3.0f,0,30)*(1.0-DISP_AVG_F
 264:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 265:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 266:Src/main.c    ****       }
 267:Src/main.c    ****     } else {
 268:Src/main.c    ****       draw_string((const unsigned char*) "!ACTV", 60, 9, 1);
 269:Src/main.c    ****     }
 270:Src/main.c    **** 
 271:Src/main.c    ****     refresh();
 272:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 273:Src/main.c    ****  #ifdef CHECKUSBPD
 274:Src/main.c    ****     read_stusb_rdo();
 275:Src/main.c    ****   #endif
 276:Src/main.c    ****   }
 277:Src/main.c    **** }
 278:Src/main.c    **** 
 279:Src/main.c    **** inline uint8_t check_usbpd(void) {
 280:Src/main.c    ****  #ifdef CHECKUSBPD
 281:Src/main.c    ****   return (s.uin >= 15.0 && s.imax >= 2.0);
 282:Src/main.c    ****  #else
 283:Src/main.c    ****   return 1;
 284:Src/main.c    ****  #endif
 285:Src/main.c    **** }
 286:Src/main.c    **** 
 287:Src/main.c    **** // Main PID+two-way controller and ADC readout
 288:Src/main.c    **** void reg(void) {
 289:Src/main.c    ****   static uint16_t count = 0;
 290:Src/main.c    **** 
 291:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 292:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 293:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 294:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 295:Src/main.c    **** 
 296:Src/main.c    ****   s.ttipavg = FILT(s.ttipavg, s.ttip, TTIP_AVG_FILTER);
 297:Src/main.c    **** 
 298:Src/main.c    ****   // check input voltage
 299:Src/main.c    ****   if (check_usbpd()) {
 300:Src/main.c    ****     // Check if within deadband, decide on two-way or PID control
 301:Src/main.c    ****     if(s.ttipavg >= r.target-r.deadband && s.ttipavg <= r.target+r.deadband){
 302:Src/main.c    ****       r.error = r.target - s.ttipavg;
 303:Src/main.c    ****       r.ierror = r.ierror + (r.error*r.cycletime);
 304:Src/main.c    ****       r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 305:Src/main.c    ****       r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 306:Src/main.c    ****       r.errorprior = r.error;
 307:Src/main.c    ****     } else {
 308:Src/main.c    ****       if(s.ttipavg <= r.target){
 309:Src/main.c    ****         r.duty = wduty;
 310:Src/main.c    ****         r.error = 12.0;
 311:Src/main.c    ****       } else {
 312:Src/main.c    ****         r.duty = MIN_DUTY;
 313:Src/main.c    ****         r.error = 0.0;
 314:Src/main.c    ****       }
 315:Src/main.c    ****     }
 316:Src/main.c    **** 
 317:Src/main.c    ****     // detect if no tip is plugged in
 318:Src/main.c    ****     if (s.iin <= 0.001 && s.ttipavg > 100.0) {
ARM GAS  /tmp/ccrwP30Q.s 			page 7


 319:Src/main.c    ****       if (count > 2000) {
 320:Src/main.c    ****         r.duty = 100;
 321:Src/main.c    ****         r.error = 0.0;
 322:Src/main.c    ****         r.ierror = 0.0;
 323:Src/main.c    ****         r.derror = 0.0;
 324:Src/main.c    ****         r.errorprior = 0.0;
 325:Src/main.c    ****         wduty = 150;
 326:Src/main.c    ****         s.active = 0;
 327:Src/main.c    ****       } else {
 328:Src/main.c    ****         count++;
 329:Src/main.c    ****       }
 330:Src/main.c    ****     } else {
 331:Src/main.c    ****       count = 0;
 332:Src/main.c    ****       s.active = 1;
 333:Src/main.c    ****     }
 334:Src/main.c    **** 
 335:Src/main.c    ****     r.duty = CLAMP(r.duty, MIN_DUTY, MAX_DUTY); // Clamp to duty cycle
 336:Src/main.c    **** 
 337:Src/main.c    ****     if(s.iin > s.imax && r.duty > 100){ // Current limiting
 338:Src/main.c    ****       wduty = r.duty - 2;
 339:Src/main.c    ****       r.duty -= 100;
 340:Src/main.c    ****     } else {
 341:Src/main.c    ****       wduty++;
 342:Src/main.c    ****       if(wduty >= MAX_DUTY) wduty = MAX_DUTY;
 343:Src/main.c    ****     }
 344:Src/main.c    **** 
 345:Src/main.c    ****     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r.duty);
 346:Src/main.c    ****   } else {
 347:Src/main.c    ****     s.active = 0;
 348:Src/main.c    ****   }
 349:Src/main.c    **** 
 350:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4000);
 351:Src/main.c    **** }
 352:Src/main.c    **** 
 353:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //send USB cdc data
 354:Src/main.c    **** {
 355:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 356:Src/main.c    ****   {
 357:Src/main.c    ****     sendDataUSB = 0;
 358:Src/main.c    **** 
 359:Src/main.c    ****     USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[0], APP_TX_DATA_SIZE);
 360:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 361:Src/main.c    ****   }
 362:Src/main.c    **** }
 363:Src/main.c    **** 
 364:Src/main.c    **** void USB_printfloat(float _buf){
 365:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 366:Src/main.c    ****   sprintf((char * restrict) UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_
 367:Src/main.c    ****   sendDataUSB = 1;
 368:Src/main.c    **** }
 369:Src/main.c    **** 
 370:Src/main.c    **** 
 371:Src/main.c    **** // init code sequence by Ralim, thanks alot!
 372:Src/main.c    **** #define DEVICEADDR_OLED   (0x3c<<1)
 373:Src/main.c    **** #define OLED_WIDTH        96
 374:Src/main.c    **** #define FRAMEBUFFER_START 17
 375:Src/main.c    **** uint8_t screenBuffer[16 + (OLED_WIDTH * 2) + 10];  // The data buffer
ARM GAS  /tmp/ccrwP30Q.s 			page 8


 376:Src/main.c    **** const uint8_t REFRESH_COMMANDS[17] = { 0x80, 0xAF, 0x80, 0x21, 0x80, 0x20, 0x80, 0x7F, 0x80, 0xC0, 
 377:Src/main.c    **** uint8_t OLED_Setup_Array[] = {
 378:Src/main.c    **** 0x80, 0xAE, /*Display off*/
 379:Src/main.c    **** 0x80, 0xD5, /*Set display clock divide ratio / osc freq*/
 380:Src/main.c    **** 0x80, 0x52, /*Divide ratios*/
 381:Src/main.c    **** 0x80, 0xA8, /*Set Multiplex Ratio*/
 382:Src/main.c    **** 0x80, 0x0F, /*16 == max brightness,39==dimmest*/
 383:Src/main.c    **** 0x80, 0xC0, /*Set COM Scan direction*/
 384:Src/main.c    **** 0x80, 0xD3, /*Set vertical Display offset*/
 385:Src/main.c    **** 0x80, 0x00, /*0 Offset*/
 386:Src/main.c    **** 0x80, 0x40, /*Set Display start line to 0*/
 387:Src/main.c    **** 0x80, 0xA0, /*Set Segment remap to normal*/
 388:Src/main.c    **** 0x80, 0x8D, /*Charge Pump*/
 389:Src/main.c    **** 0x80, 0x14, /*Charge Pump settings*/
 390:Src/main.c    **** 0x80, 0xDA, /*Set VCOM Pins hardware config*/
 391:Src/main.c    **** 0x80, 0x02, /*Combination 2*/
 392:Src/main.c    **** 0x80, 0x81, /*Contrast*/
 393:Src/main.c    **** 0x80, 0x33, /*^51*/
 394:Src/main.c    **** 0x80, 0xD9, /*Set pre-charge period*/
 395:Src/main.c    **** 0x80, 0xF1, /*Pre charge period*/
 396:Src/main.c    **** 0x80, 0xDB, /*Adjust VCOMH regulator ouput*/
 397:Src/main.c    **** 0x80, 0x30, /*VCOM level*/
 398:Src/main.c    **** 0x80, 0xA4, /*Enable the display GDDR*/
 399:Src/main.c    **** 0x80, 0XA6, /*Normal display*/
 400:Src/main.c    **** 0x80, 0x20, /*Memory Mode*/
 401:Src/main.c    **** 0x80, 0x00, /*Wrap memory*/
 402:Src/main.c    **** 0x80, 0xAF /*Display on*/
 403:Src/main.c    **** };
 404:Src/main.c    **** 
 405:Src/main.c    **** 
 406:Src/main.c    **** void read_stusb_rdo(void) {
 407:Src/main.c    ****   HAL_StatusTypeDef ret;
 408:Src/main.c    ****   /* uint8_t pdo_count = 0; */
 409:Src/main.c    ****   ret = HAL_I2C_Mem_Read(&hi2c1, (0x28 << 1), (uint16_t) RDO_REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uin
 410:Src/main.c    ****   /* ret = HAL_I2C_Mem_Read(&hi2c1, (0x28 << 1), (uint16_t) DPM_PDO_NUMB, I2C_MEMADD_SIZE_8BIT, &pd
 411:Src/main.c    **** 
 412:Src/main.c    ****   if (ret == 0) {
 413:Src/main.c    ****     s.imax = (float) Nego_RDO.b.MaxCurrent / 100.0;
 414:Src/main.c    ****     s.pdo = Nego_RDO.b.Object_Pos;
 415:Src/main.c    ****   } else {
 416:Src/main.c    ****     s.imax = 0.0;
 417:Src/main.c    ****     s.pdo = 0;
 418:Src/main.c    ****   }
 419:Src/main.c    **** }
 420:Src/main.c    **** 
 421:Src/main.c    **** //not Ralim anymore
 422:Src/main.c    **** void disp_init(void) {
 423:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 424:Src/main.c    ****   uint16_t _cnt = 0;
 425:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 426:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 427:Src/main.c    **** }
 428:Src/main.c    **** 
 429:Src/main.c    **** void refresh(void) {
 430:Src/main.c    ****   uint16_t _cnt = 0;
 431:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 432:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
ARM GAS  /tmp/ccrwP30Q.s 			page 9


 433:Src/main.c    **** }
 434:Src/main.c    **** 
 435:Src/main.c    **** void clear_screen(void) {
 436:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 437:Src/main.c    **** }
 438:Src/main.c    **** void set_screen(void) {
 439:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 440:Src/main.c    **** }
 441:Src/main.c    **** 
 442:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color){
 443:Src/main.c    ****   for(int i = 0; i <= h; i++){
 444:Src/main.c    ****     write_pixel(x, y+i, color);
 445:Src/main.c    ****   }
 446:Src/main.c    **** }
 447:Src/main.c    **** 
 448:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color){
 449:Src/main.c    ****   if(x>95 || y >15){
 450:Src/main.c    ****     return;
 451:Src/main.c    ****   }
 452:Src/main.c    ****   if(color == 1){
 453:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 454:Src/main.c    ****   } else if (color == 0){
 455:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 456:Src/main.c    ****   }
 457:Src/main.c    **** }
 458:Src/main.c    **** 
 459:Src/main.c    **** #define CHAR_WIDTH 6
 460:Src/main.c    **** #define CHAR_HEIGHT 8
 461:Src/main.c    **** void draw_char(unsigned char c, uint8_t x, uint8_t y, uint8_t brightness) {
 462:Src/main.c    ****     c = c & 0x7F;
 463:Src/main.c    ****     if (c < ' ') {
 464:Src/main.c    ****         c = 0;
 465:Src/main.c    ****     } else {
 466:Src/main.c    ****         c -= ' ';
 467:Src/main.c    ****     }
 468:Src/main.c    ****     uint8_t * chr = (uint8_t *) font[c];
 469:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 470:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 471:Src/main.c    ****             if (chr[j] & (1<<i)) {
 472:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 473:Src/main.c    ****             } else {
 474:Src/main.c    ****                 write_pixel(x+j, y+i, 0);
 475:Src/main.c    ****             }
 476:Src/main.c    ****         }
 477:Src/main.c    ****     }
 478:Src/main.c    **** }
 479:Src/main.c    **** 
 480:Src/main.c    **** void draw_string(const unsigned char* str, uint8_t x, uint8_t y, uint8_t brightness) {
 481:Src/main.c    ****     while (*str) {
 482:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 483:Src/main.c    ****         x += CHAR_WIDTH;
 484:Src/main.c    ****     }
 485:Src/main.c    **** }
 486:Src/main.c    **** 
 487:Src/main.c    **** void SystemClock_Config(void)
 488:Src/main.c    **** {
 489:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /tmp/ccrwP30Q.s 			page 10


 490:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 491:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 492:Src/main.c    **** 
 493:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 494:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 495:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 496:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 497:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 498:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 499:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 500:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 501:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 502:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 503:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 504:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 505:Src/main.c    **** 
 506:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 507:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 508:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 509:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 510:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 511:Src/main.c    **** 
 512:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 513:Src/main.c    **** 
 514:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 515:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 516:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 517:Src/main.c    **** 
 518:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 519:Src/main.c    **** }
 520:Src/main.c    **** 
 521:Src/main.c    **** static void MX_ADC_Init(void)
 522:Src/main.c    **** {
 523:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 524:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 525:Src/main.c    **** 
 526:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 527:Src/main.c    **** 
 528:Src/main.c    ****   hadc.Instance = ADC1;
 529:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 530:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 531:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 532:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 533:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 534:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 535:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 536:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 537:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 538:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 539:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 540:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 541:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 542:Src/main.c    ****   HAL_ADC_Init(&hadc);
 543:Src/main.c    **** 
 544:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 545:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 546:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
ARM GAS  /tmp/ccrwP30Q.s 			page 11


 547:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 548:Src/main.c    **** 
 549:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 550:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 551:Src/main.c    **** 
 552:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 553:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 554:Src/main.c    **** 
 555:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 556:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 557:Src/main.c    **** 
 558:Src/main.c    ****   HAL_ADC_MspInit(&hadc);
 559:Src/main.c    **** }
 560:Src/main.c    **** 
 561:Src/main.c    **** static void MX_I2C1_Init(void)
 562:Src/main.c    **** {
 563:Src/main.c    **** 
 564:Src/main.c    ****   hi2c1.Instance = I2C1;
 565:Src/main.c    ****   hi2c1.Init.Timing = 0x0000020B;
 566:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 567:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 568:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 569:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 570:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 571:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 572:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 573:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 574:Src/main.c    **** 
 575:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 576:Src/main.c    **** 
 577:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 578:Src/main.c    **** }
 579:Src/main.c    **** 
 580:Src/main.c    **** static void MX_I2C2_Init(void)
 581:Src/main.c    **** {
 582:Src/main.c    **** 
 583:Src/main.c    ****   hi2c2.Instance = I2C2;
 584:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 585:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 586:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 587:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 588:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 589:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 590:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 591:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 592:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 593:Src/main.c    **** 
 594:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 595:Src/main.c    **** 
 596:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 597:Src/main.c    **** }
 598:Src/main.c    **** 
 599:Src/main.c    **** static void MX_IWDG_Init(void)
 600:Src/main.c    **** {
 601:Src/main.c    ****   hiwdg.Instance = IWDG;
 602:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 603:Src/main.c    ****   hiwdg.Init.Window = 4095;
ARM GAS  /tmp/ccrwP30Q.s 			page 12


 604:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 605:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 606:Src/main.c    **** }
 607:Src/main.c    **** 
 608:Src/main.c    **** static void TIM3_Init(void)
 609:Src/main.c    **** {
 610:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 611:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 612:Src/main.c    **** 
 613:Src/main.c    ****   /*
 614:Src/main.c    ****        + Period = 10000 - 1
 615:Src/main.c    ****        + Prescaler = ((8000000/2)/10000) - 1
 616:Src/main.c    **** 
 617:Src/main.c    ****   */
 618:Src/main.c    ****   htim3.Instance = TIM3;
 619:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 620:Src/main.c    ****   htim3.Init.Prescaler = 399;
 621:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 622:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 623:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 624:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 625:Src/main.c    ****   {
 626:Src/main.c    ****     /* Initialization Error */
 627:Src/main.c    ****     Error_Handler();
 628:Src/main.c    ****   }
 629:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 630:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 631:Src/main.c    **** }
 632:Src/main.c    **** 
 633:Src/main.c    **** static void MX_TIM1_Init(void)
 634:Src/main.c    **** {
 635:Src/main.c    **** 
 636:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 637:Src/main.c    **** 
 638:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 639:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 640:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 641:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 642:Src/main.c    **** 
 643:Src/main.c    ****   htim1.Instance = TIM1;
 644:Src/main.c    ****   htim1.Init.Prescaler = 6; // 2048
 645:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 646:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 647:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 648:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 649:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 650:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 651:Src/main.c    **** 
 652:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 653:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 654:Src/main.c    **** 
 655:Src/main.c    ****   HAL_TIM_PWM_Init(&htim1);
 656:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 657:Src/main.c    **** 
 658:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 659:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 660:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
ARM GAS  /tmp/ccrwP30Q.s 			page 13


 661:Src/main.c    **** 
 662:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 663:Src/main.c    ****   sConfigOC.Pulse = 0;
 664:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 665:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 666:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 667:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 668:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 669:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 670:Src/main.c    **** 
 671:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 672:Src/main.c    ****   sConfigOC.Pulse = 10;
 673:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 674:Src/main.c    **** 
 675:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 676:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 677:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 678:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 679:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 680:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 681:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 682:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 683:Src/main.c    **** 
 684:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 685:Src/main.c    **** }
 686:Src/main.c    **** /*
 687:Src/main.c    **** static void MX_TIM2_Init(void)
 688:Src/main.c    **** {
 689:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 690:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 691:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 692:Src/main.c    **** 
 693:Src/main.c    ****   htim2.Instance = TIM2;
 694:Src/main.c    ****   htim2.Init.Prescaler = 2096;
 695:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 696:Src/main.c    ****   htim2.Init.Period = 4096;
 697:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 698:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 699:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 700:Src/main.c    **** 
 701:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 702:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 703:Src/main.c    **** 
 704:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 705:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 706:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 707:Src/main.c    **** 
 708:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 709:Src/main.c    ****   sConfigOC.Pulse = 30;
 710:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 711:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 712:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 713:Src/main.c    **** 
 714:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 715:Src/main.c    **** 
 716:Src/main.c    **** }
 717:Src/main.c    **** */
ARM GAS  /tmp/ccrwP30Q.s 			page 14


 718:Src/main.c    **** 
 719:Src/main.c    **** static void MX_DMA_Init(void)
 720:Src/main.c    **** {
 721:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 722:Src/main.c    **** 
 723:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 724:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 725:Src/main.c    **** 
 726:Src/main.c    ****   HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 727:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 728:Src/main.c    ****   /*
 729:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 730:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 731:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 732:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 733:Src/main.c    ****   */
 734:Src/main.c    **** 
 735:Src/main.c    **** }
 736:Src/main.c    **** 
 737:Src/main.c    **** static void MX_GPIO_Init(void)
 738:Src/main.c    **** {
  26              		.loc 1 738 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 739:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 739 3 view .LVU1
  40              		.loc 1 739 20 is_stmt 0 view .LVU2
  41 0004 1422     		movs	r2, #20
  42 0006 0021     		movs	r1, #0
  43 0008 03A8     		add	r0, sp, #12
  44 000a FFF7FEFF 		bl	memset
  45              	.LVL0:
 740:Src/main.c    **** 
 741:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  46              		.loc 1 741 3 is_stmt 1 view .LVU3
  47              	.LBB10:
  48              		.loc 1 741 3 view .LVU4
  49              		.loc 1 741 3 view .LVU5
  50 000e 1D4B     		ldr	r3, .L2
  51 0010 5969     		ldr	r1, [r3, #20]
  52 0012 8020     		movs	r0, #128
  53 0014 8002     		lsls	r0, r0, #10
  54 0016 0143     		orrs	r1, r0
  55 0018 5961     		str	r1, [r3, #20]
  56              		.loc 1 741 3 view .LVU6
  57 001a 5A69     		ldr	r2, [r3, #20]
  58 001c 0240     		ands	r2, r0
ARM GAS  /tmp/ccrwP30Q.s 			page 15


  59 001e 0092     		str	r2, [sp]
  60              		.loc 1 741 3 view .LVU7
  61 0020 009A     		ldr	r2, [sp]
  62              	.LBE10:
  63              		.loc 1 741 3 view .LVU8
 742:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 742 3 view .LVU9
  65              	.LBB11:
  66              		.loc 1 742 3 view .LVU10
  67              		.loc 1 742 3 view .LVU11
  68 0022 5969     		ldr	r1, [r3, #20]
  69 0024 8020     		movs	r0, #128
  70 0026 C002     		lsls	r0, r0, #11
  71 0028 0143     		orrs	r1, r0
  72 002a 5961     		str	r1, [r3, #20]
  73              		.loc 1 742 3 view .LVU12
  74 002c 5A69     		ldr	r2, [r3, #20]
  75 002e 0240     		ands	r2, r0
  76 0030 0192     		str	r2, [sp, #4]
  77              		.loc 1 742 3 view .LVU13
  78 0032 019A     		ldr	r2, [sp, #4]
  79              	.LBE11:
  80              		.loc 1 742 3 view .LVU14
 743:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  81              		.loc 1 743 3 view .LVU15
  82              	.LBB12:
  83              		.loc 1 743 3 view .LVU16
  84              		.loc 1 743 3 view .LVU17
  85 0034 5A69     		ldr	r2, [r3, #20]
  86 0036 8021     		movs	r1, #128
  87 0038 0903     		lsls	r1, r1, #12
  88 003a 0A43     		orrs	r2, r1
  89 003c 5A61     		str	r2, [r3, #20]
  90              		.loc 1 743 3 view .LVU18
  91 003e 5B69     		ldr	r3, [r3, #20]
  92 0040 0B40     		ands	r3, r1
  93 0042 0293     		str	r3, [sp, #8]
  94              		.loc 1 743 3 view .LVU19
  95 0044 029B     		ldr	r3, [sp, #8]
  96              	.LBE12:
  97              		.loc 1 743 3 view .LVU20
 744:Src/main.c    **** 
 745:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  98              		.loc 1 745 3 view .LVU21
  99              		.loc 1 745 23 is_stmt 0 view .LVU22
 100 0046 1823     		movs	r3, #24
 101 0048 0393     		str	r3, [sp, #12]
 746:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 102              		.loc 1 746 3 is_stmt 1 view .LVU23
 747:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 103              		.loc 1 747 3 view .LVU24
 104              		.loc 1 747 24 is_stmt 0 view .LVU25
 105 004a 0225     		movs	r5, #2
 106 004c 0595     		str	r5, [sp, #20]
 748:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 107              		.loc 1 748 3 is_stmt 1 view .LVU26
 108 004e 9020     		movs	r0, #144
ARM GAS  /tmp/ccrwP30Q.s 			page 16


 109 0050 03A9     		add	r1, sp, #12
 110 0052 C005     		lsls	r0, r0, #23
 111 0054 FFF7FEFF 		bl	HAL_GPIO_Init
 112              	.LVL1:
 749:Src/main.c    **** 
 750:Src/main.c    ****   GPIO_InitStruct.Pin = B1_1_Pin;
 113              		.loc 1 750 3 view .LVU27
 114              		.loc 1 750 23 is_stmt 0 view .LVU28
 115 0058 8023     		movs	r3, #128
 116 005a 9B01     		lsls	r3, r3, #6
 117 005c 0393     		str	r3, [sp, #12]
 751:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 118              		.loc 1 751 3 is_stmt 1 view .LVU29
 119              		.loc 1 751 24 is_stmt 0 view .LVU30
 120 005e 0024     		movs	r4, #0
 121 0060 0494     		str	r4, [sp, #16]
 752:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 122              		.loc 1 752 3 is_stmt 1 view .LVU31
 123              		.loc 1 752 24 is_stmt 0 view .LVU32
 124 0062 0595     		str	r5, [sp, #20]
 753:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 125              		.loc 1 753 3 is_stmt 1 view .LVU33
 126 0064 03A9     		add	r1, sp, #12
 127 0066 0848     		ldr	r0, .L2+4
 128 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL2:
 754:Src/main.c    **** 
 755:Src/main.c    **** 
 756:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
 130              		.loc 1 756 3 view .LVU34
 131              		.loc 1 756 23 is_stmt 0 view .LVU35
 132 006c 8023     		movs	r3, #128
 133 006e 5B01     		lsls	r3, r3, #5
 134 0070 0393     		str	r3, [sp, #12]
 757:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 135              		.loc 1 757 3 is_stmt 1 view .LVU36
 136              		.loc 1 757 24 is_stmt 0 view .LVU37
 137 0072 0494     		str	r4, [sp, #16]
 758:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 138              		.loc 1 758 3 is_stmt 1 view .LVU38
 139              		.loc 1 758 24 is_stmt 0 view .LVU39
 140 0074 0594     		str	r4, [sp, #20]
 759:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 141              		.loc 1 759 3 is_stmt 1 view .LVU40
 142 0076 03A9     		add	r1, sp, #12
 143 0078 0448     		ldr	r0, .L2+8
 144 007a FFF7FEFF 		bl	HAL_GPIO_Init
 145              	.LVL3:
 760:Src/main.c    **** 
 761:Src/main.c    **** }
 146              		.loc 1 761 1 is_stmt 0 view .LVU41
 147 007e 09B0     		add	sp, sp, #36
 148              		@ sp needed
 149 0080 30BD     		pop	{r4, r5, pc}
 150              	.L3:
 151 0082 C046     		.align	2
 152              	.L2:
ARM GAS  /tmp/ccrwP30Q.s 			page 17


 153 0084 00100240 		.word	1073876992
 154 0088 00080048 		.word	1207961600
 155 008c 00040048 		.word	1207960576
 156              		.cfi_endproc
 157              	.LFE59:
 159              		.section	.text.MX_DMA_Init,"ax",%progbits
 160              		.align	1
 161              		.syntax unified
 162              		.code	16
 163              		.thumb_func
 164              		.fpu softvfp
 166              	MX_DMA_Init:
 167              	.LFB58:
 720:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 168              		.loc 1 720 1 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 8
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0000 00B5     		push	{lr}
 173              	.LCFI2:
 174              		.cfi_def_cfa_offset 4
 175              		.cfi_offset 14, -4
 176 0002 83B0     		sub	sp, sp, #12
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 16
 721:Src/main.c    **** 
 179              		.loc 1 721 3 view .LVU43
 180              	.LBB13:
 721:Src/main.c    **** 
 181              		.loc 1 721 3 view .LVU44
 721:Src/main.c    **** 
 182              		.loc 1 721 3 view .LVU45
 183 0004 0D4A     		ldr	r2, .L5
 184 0006 5169     		ldr	r1, [r2, #20]
 185 0008 0123     		movs	r3, #1
 186 000a 1943     		orrs	r1, r3
 187 000c 5161     		str	r1, [r2, #20]
 721:Src/main.c    **** 
 188              		.loc 1 721 3 view .LVU46
 189 000e 5269     		ldr	r2, [r2, #20]
 190 0010 1340     		ands	r3, r2
 191 0012 0193     		str	r3, [sp, #4]
 721:Src/main.c    **** 
 192              		.loc 1 721 3 view .LVU47
 193 0014 019B     		ldr	r3, [sp, #4]
 194              	.LBE13:
 721:Src/main.c    **** 
 195              		.loc 1 721 3 view .LVU48
 723:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 196              		.loc 1 723 3 view .LVU49
 197 0016 0022     		movs	r2, #0
 198 0018 0021     		movs	r1, #0
 199 001a 0920     		movs	r0, #9
 200 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 201              	.LVL4:
 724:Src/main.c    **** 
 202              		.loc 1 724 3 view .LVU50
ARM GAS  /tmp/ccrwP30Q.s 			page 18


 203 0020 0920     		movs	r0, #9
 204 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 205              	.LVL5:
 726:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 206              		.loc 1 726 3 view .LVU51
 207 0026 0022     		movs	r2, #0
 208 0028 0021     		movs	r1, #0
 209 002a 1020     		movs	r0, #16
 210 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 211              	.LVL6:
 727:Src/main.c    ****   /*
 212              		.loc 1 727 3 view .LVU52
 213 0030 1020     		movs	r0, #16
 214 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 215              	.LVL7:
 735:Src/main.c    **** 
 216              		.loc 1 735 1 is_stmt 0 view .LVU53
 217 0036 03B0     		add	sp, sp, #12
 218              		@ sp needed
 219 0038 00BD     		pop	{pc}
 220              	.L6:
 221 003a C046     		.align	2
 222              	.L5:
 223 003c 00100240 		.word	1073876992
 224              		.cfi_endproc
 225              	.LFE58:
 227              		.section	.text.MX_ADC_Init,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.code	16
 231              		.thumb_func
 232              		.fpu softvfp
 234              	MX_ADC_Init:
 235              	.LFB52:
 522:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 236              		.loc 1 522 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 24
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
 241              	.LCFI4:
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 86B0     		sub	sp, sp, #24
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 40
 523:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 250              		.loc 1 523 3 view .LVU55
 251              	.LBB14:
 523:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 252              		.loc 1 523 3 view .LVU56
 523:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 253              		.loc 1 523 3 view .LVU57
 254 0004 274B     		ldr	r3, .L8
ARM GAS  /tmp/ccrwP30Q.s 			page 19


 255 0006 5A69     		ldr	r2, [r3, #20]
 256 0008 0126     		movs	r6, #1
 257 000a 3243     		orrs	r2, r6
 258 000c 5A61     		str	r2, [r3, #20]
 523:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 259              		.loc 1 523 3 view .LVU58
 260 000e 5A69     		ldr	r2, [r3, #20]
 261 0010 3240     		ands	r2, r6
 262 0012 0192     		str	r2, [sp, #4]
 523:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 263              		.loc 1 523 3 view .LVU59
 264 0014 019A     		ldr	r2, [sp, #4]
 265              	.LBE14:
 523:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 266              		.loc 1 523 3 view .LVU60
 524:Src/main.c    **** 
 267              		.loc 1 524 3 view .LVU61
 268              	.LBB15:
 524:Src/main.c    **** 
 269              		.loc 1 524 3 view .LVU62
 524:Src/main.c    **** 
 270              		.loc 1 524 3 view .LVU63
 271 0016 9A69     		ldr	r2, [r3, #24]
 272 0018 8021     		movs	r1, #128
 273 001a 8900     		lsls	r1, r1, #2
 274 001c 0A43     		orrs	r2, r1
 275 001e 9A61     		str	r2, [r3, #24]
 524:Src/main.c    **** 
 276              		.loc 1 524 3 view .LVU64
 277 0020 9B69     		ldr	r3, [r3, #24]
 278 0022 0B40     		ands	r3, r1
 279 0024 0293     		str	r3, [sp, #8]
 524:Src/main.c    **** 
 280              		.loc 1 524 3 view .LVU65
 281 0026 029B     		ldr	r3, [sp, #8]
 282              	.LBE15:
 524:Src/main.c    **** 
 283              		.loc 1 524 3 view .LVU66
 526:Src/main.c    **** 
 284              		.loc 1 526 3 view .LVU67
 526:Src/main.c    **** 
 285              		.loc 1 526 26 is_stmt 0 view .LVU68
 286 0028 0C22     		movs	r2, #12
 287 002a 0021     		movs	r1, #0
 288 002c 03A8     		add	r0, sp, #12
 289 002e FFF7FEFF 		bl	memset
 290              	.LVL8:
 528:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 291              		.loc 1 528 3 is_stmt 1 view .LVU69
 528:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 292              		.loc 1 528 17 is_stmt 0 view .LVU70
 293 0032 1D4C     		ldr	r4, .L8+4
 294 0034 1D4B     		ldr	r3, .L8+8
 295 0036 2360     		str	r3, [r4]
 529:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 296              		.loc 1 529 3 is_stmt 1 view .LVU71
 529:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
ARM GAS  /tmp/ccrwP30Q.s 			page 20


 297              		.loc 1 529 28 is_stmt 0 view .LVU72
 298 0038 0025     		movs	r5, #0
 299 003a 6560     		str	r5, [r4, #4]
 530:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 300              		.loc 1 530 3 is_stmt 1 view .LVU73
 530:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 301              		.loc 1 530 24 is_stmt 0 view .LVU74
 302 003c A560     		str	r5, [r4, #8]
 531:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 303              		.loc 1 531 3 is_stmt 1 view .LVU75
 531:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 304              		.loc 1 531 23 is_stmt 0 view .LVU76
 305 003e E560     		str	r5, [r4, #12]
 532:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 306              		.loc 1 532 3 is_stmt 1 view .LVU77
 532:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 307              		.loc 1 532 26 is_stmt 0 view .LVU78
 308 0040 2661     		str	r6, [r4, #16]
 533:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 309              		.loc 1 533 3 is_stmt 1 view .LVU79
 533:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 310              		.loc 1 533 26 is_stmt 0 view .LVU80
 311 0042 0823     		movs	r3, #8
 312 0044 6361     		str	r3, [r4, #20]
 534:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 313              		.loc 1 534 3 is_stmt 1 view .LVU81
 534:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 314              		.loc 1 534 30 is_stmt 0 view .LVU82
 315 0046 A561     		str	r5, [r4, #24]
 535:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 316              		.loc 1 535 3 is_stmt 1 view .LVU83
 535:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 317              		.loc 1 535 34 is_stmt 0 view .LVU84
 318 0048 E561     		str	r5, [r4, #28]
 536:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 319              		.loc 1 536 3 is_stmt 1 view .LVU85
 536:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 320              		.loc 1 536 32 is_stmt 0 view .LVU86
 321 004a 2562     		str	r5, [r4, #32]
 537:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 322              		.loc 1 537 3 is_stmt 1 view .LVU87
 537:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 323              		.loc 1 537 35 is_stmt 0 view .LVU88
 324 004c 6562     		str	r5, [r4, #36]
 538:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 325              		.loc 1 538 3 is_stmt 1 view .LVU89
 538:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 326              		.loc 1 538 30 is_stmt 0 view .LVU90
 327 004e 3833     		adds	r3, r3, #56
 328 0050 A362     		str	r3, [r4, #40]
 539:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 329              		.loc 1 539 3 is_stmt 1 view .LVU91
 539:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 330              		.loc 1 539 34 is_stmt 0 view .LVU92
 331 0052 8023     		movs	r3, #128
 332 0054 DB00     		lsls	r3, r3, #3
 333 0056 E362     		str	r3, [r4, #44]
ARM GAS  /tmp/ccrwP30Q.s 			page 21


 540:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 334              		.loc 1 540 3 is_stmt 1 view .LVU93
 540:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 335              		.loc 1 540 35 is_stmt 0 view .LVU94
 336 0058 2663     		str	r6, [r4, #48]
 541:Src/main.c    ****   HAL_ADC_Init(&hadc);
 337              		.loc 1 541 3 is_stmt 1 view .LVU95
 541:Src/main.c    ****   HAL_ADC_Init(&hadc);
 338              		.loc 1 541 21 is_stmt 0 view .LVU96
 339 005a 6663     		str	r6, [r4, #52]
 542:Src/main.c    **** 
 340              		.loc 1 542 3 is_stmt 1 view .LVU97
 341 005c 2000     		movs	r0, r4
 342 005e FFF7FEFF 		bl	HAL_ADC_Init
 343              	.LVL9:
 544:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 344              		.loc 1 544 3 view .LVU98
 544:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 345              		.loc 1 544 19 is_stmt 0 view .LVU99
 346 0062 0395     		str	r5, [sp, #12]
 545:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 347              		.loc 1 545 3 is_stmt 1 view .LVU100
 545:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 348              		.loc 1 545 16 is_stmt 0 view .LVU101
 349 0064 8023     		movs	r3, #128
 350 0066 5B01     		lsls	r3, r3, #5
 351 0068 0493     		str	r3, [sp, #16]
 546:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 352              		.loc 1 546 3 is_stmt 1 view .LVU102
 546:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 353              		.loc 1 546 24 is_stmt 0 view .LVU103
 354 006a 0623     		movs	r3, #6
 355 006c 0593     		str	r3, [sp, #20]
 547:Src/main.c    **** 
 356              		.loc 1 547 3 is_stmt 1 view .LVU104
 357 006e 03A9     		add	r1, sp, #12
 358 0070 2000     		movs	r0, r4
 359 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 360              	.LVL10:
 549:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 361              		.loc 1 549 3 view .LVU105
 549:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 362              		.loc 1 549 19 is_stmt 0 view .LVU106
 363 0076 0396     		str	r6, [sp, #12]
 550:Src/main.c    **** 
 364              		.loc 1 550 3 is_stmt 1 view .LVU107
 365 0078 03A9     		add	r1, sp, #12
 366 007a 2000     		movs	r0, r4
 367 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 368              	.LVL11:
 552:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 369              		.loc 1 552 3 view .LVU108
 552:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 370              		.loc 1 552 19 is_stmt 0 view .LVU109
 371 0080 0223     		movs	r3, #2
 372 0082 0393     		str	r3, [sp, #12]
 553:Src/main.c    **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 22


 373              		.loc 1 553 3 is_stmt 1 view .LVU110
 374 0084 03A9     		add	r1, sp, #12
 375 0086 2000     		movs	r0, r4
 376 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 377              	.LVL12:
 555:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 378              		.loc 1 555 3 view .LVU111
 555:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 379              		.loc 1 555 19 is_stmt 0 view .LVU112
 380 008c 0523     		movs	r3, #5
 381 008e 0393     		str	r3, [sp, #12]
 556:Src/main.c    **** 
 382              		.loc 1 556 3 is_stmt 1 view .LVU113
 383 0090 03A9     		add	r1, sp, #12
 384 0092 2000     		movs	r0, r4
 385 0094 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 386              	.LVL13:
 558:Src/main.c    **** }
 387              		.loc 1 558 3 view .LVU114
 388 0098 2000     		movs	r0, r4
 389 009a FFF7FEFF 		bl	HAL_ADC_MspInit
 390              	.LVL14:
 559:Src/main.c    **** 
 391              		.loc 1 559 1 is_stmt 0 view .LVU115
 392 009e 06B0     		add	sp, sp, #24
 393              		@ sp needed
 394 00a0 70BD     		pop	{r4, r5, r6, pc}
 395              	.L9:
 396 00a2 C046     		.align	2
 397              	.L8:
 398 00a4 00100240 		.word	1073876992
 399 00a8 00000000 		.word	.LANCHOR0
 400 00ac 00240140 		.word	1073816576
 401              		.cfi_endproc
 402              	.LFE52:
 404              		.section	.text.MX_I2C1_Init,"ax",%progbits
 405              		.align	1
 406              		.syntax unified
 407              		.code	16
 408              		.thumb_func
 409              		.fpu softvfp
 411              	MX_I2C1_Init:
 412              	.LFB53:
 562:Src/main.c    **** 
 413              		.loc 1 562 1 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 10B5     		push	{r4, lr}
 418              	.LCFI6:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 564:Src/main.c    ****   hi2c1.Init.Timing = 0x0000020B;
 422              		.loc 1 564 3 view .LVU117
 564:Src/main.c    ****   hi2c1.Init.Timing = 0x0000020B;
 423              		.loc 1 564 18 is_stmt 0 view .LVU118
ARM GAS  /tmp/ccrwP30Q.s 			page 23


 424 0002 0D4C     		ldr	r4, .L11
 425 0004 0D4B     		ldr	r3, .L11+4
 426 0006 2360     		str	r3, [r4]
 565:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 427              		.loc 1 565 3 is_stmt 1 view .LVU119
 565:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 428              		.loc 1 565 21 is_stmt 0 view .LVU120
 429 0008 0D4B     		ldr	r3, .L11+8
 430 000a 6360     		str	r3, [r4, #4]
 566:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 431              		.loc 1 566 3 is_stmt 1 view .LVU121
 566:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 432              		.loc 1 566 26 is_stmt 0 view .LVU122
 433 000c 0023     		movs	r3, #0
 434 000e A360     		str	r3, [r4, #8]
 567:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 435              		.loc 1 567 3 is_stmt 1 view .LVU123
 567:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 436              		.loc 1 567 29 is_stmt 0 view .LVU124
 437 0010 0122     		movs	r2, #1
 438 0012 E260     		str	r2, [r4, #12]
 568:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 439              		.loc 1 568 3 is_stmt 1 view .LVU125
 568:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 440              		.loc 1 568 30 is_stmt 0 view .LVU126
 441 0014 2361     		str	r3, [r4, #16]
 569:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 442              		.loc 1 569 3 is_stmt 1 view .LVU127
 569:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 443              		.loc 1 569 26 is_stmt 0 view .LVU128
 444 0016 6361     		str	r3, [r4, #20]
 570:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 445              		.loc 1 570 3 is_stmt 1 view .LVU129
 570:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 446              		.loc 1 570 31 is_stmt 0 view .LVU130
 447 0018 A361     		str	r3, [r4, #24]
 571:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 448              		.loc 1 571 3 is_stmt 1 view .LVU131
 571:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 449              		.loc 1 571 30 is_stmt 0 view .LVU132
 450 001a E361     		str	r3, [r4, #28]
 572:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 451              		.loc 1 572 3 is_stmt 1 view .LVU133
 572:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 452              		.loc 1 572 28 is_stmt 0 view .LVU134
 453 001c 2362     		str	r3, [r4, #32]
 573:Src/main.c    **** 
 454              		.loc 1 573 3 is_stmt 1 view .LVU135
 455 001e 2000     		movs	r0, r4
 456 0020 FFF7FEFF 		bl	HAL_I2C_Init
 457              	.LVL15:
 575:Src/main.c    **** 
 458              		.loc 1 575 3 view .LVU136
 459 0024 0021     		movs	r1, #0
 460 0026 2000     		movs	r0, r4
 461 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 462              	.LVL16:
ARM GAS  /tmp/ccrwP30Q.s 			page 24


 577:Src/main.c    **** }
 463              		.loc 1 577 3 view .LVU137
 464 002c 0021     		movs	r1, #0
 465 002e 2000     		movs	r0, r4
 466 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 467              	.LVL17:
 578:Src/main.c    **** 
 468              		.loc 1 578 1 is_stmt 0 view .LVU138
 469              		@ sp needed
 470 0034 10BD     		pop	{r4, pc}
 471              	.L12:
 472 0036 C046     		.align	2
 473              	.L11:
 474 0038 00000000 		.word	.LANCHOR1
 475 003c 00540040 		.word	1073763328
 476 0040 0B020000 		.word	523
 477              		.cfi_endproc
 478              	.LFE53:
 480              		.section	.text.TIM3_Init,"ax",%progbits
 481              		.align	1
 482              		.syntax unified
 483              		.code	16
 484              		.thumb_func
 485              		.fpu softvfp
 487              	TIM3_Init:
 488              	.LFB56:
 609:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 489              		.loc 1 609 1 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 24
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493 0000 10B5     		push	{r4, lr}
 494              	.LCFI7:
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 4, -8
 497              		.cfi_offset 14, -4
 498 0002 86B0     		sub	sp, sp, #24
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 32
 610:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 501              		.loc 1 610 3 view .LVU140
 502              	.LBB16:
 610:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 503              		.loc 1 610 3 view .LVU141
 610:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 504              		.loc 1 610 3 view .LVU142
 505 0004 124A     		ldr	r2, .L14
 506 0006 D169     		ldr	r1, [r2, #28]
 507 0008 0223     		movs	r3, #2
 508 000a 1943     		orrs	r1, r3
 509 000c D161     		str	r1, [r2, #28]
 610:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 510              		.loc 1 610 3 view .LVU143
 511 000e D269     		ldr	r2, [r2, #28]
 512 0010 1340     		ands	r3, r2
 513 0012 0193     		str	r3, [sp, #4]
 610:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
ARM GAS  /tmp/ccrwP30Q.s 			page 25


 514              		.loc 1 610 3 view .LVU144
 515 0014 019B     		ldr	r3, [sp, #4]
 516              	.LBE16:
 610:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 517              		.loc 1 610 3 view .LVU145
 611:Src/main.c    **** 
 518              		.loc 1 611 3 view .LVU146
 611:Src/main.c    **** 
 519              		.loc 1 611 26 is_stmt 0 view .LVU147
 520 0016 1022     		movs	r2, #16
 521 0018 0021     		movs	r1, #0
 522 001a 02A8     		add	r0, sp, #8
 523 001c FFF7FEFF 		bl	memset
 524              	.LVL18:
 618:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 525              		.loc 1 618 3 is_stmt 1 view .LVU148
 618:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 526              		.loc 1 618 18 is_stmt 0 view .LVU149
 527 0020 0C4C     		ldr	r4, .L14+4
 528 0022 0D4B     		ldr	r3, .L14+8
 529 0024 2360     		str	r3, [r4]
 619:Src/main.c    ****   htim3.Init.Prescaler = 399;
 530              		.loc 1 619 3 is_stmt 1 view .LVU150
 619:Src/main.c    ****   htim3.Init.Prescaler = 399;
 531              		.loc 1 619 21 is_stmt 0 view .LVU151
 532 0026 0D4B     		ldr	r3, .L14+12
 533 0028 E360     		str	r3, [r4, #12]
 620:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 534              		.loc 1 620 3 is_stmt 1 view .LVU152
 620:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 535              		.loc 1 620 24 is_stmt 0 view .LVU153
 536 002a 9023     		movs	r3, #144
 537 002c FF33     		adds	r3, r3, #255
 538 002e 6360     		str	r3, [r4, #4]
 621:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 539              		.loc 1 621 3 is_stmt 1 view .LVU154
 621:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 540              		.loc 1 621 28 is_stmt 0 view .LVU155
 541 0030 0023     		movs	r3, #0
 542 0032 2361     		str	r3, [r4, #16]
 622:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 543              		.loc 1 622 3 is_stmt 1 view .LVU156
 622:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 544              		.loc 1 622 26 is_stmt 0 view .LVU157
 545 0034 A360     		str	r3, [r4, #8]
 623:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 546              		.loc 1 623 3 is_stmt 1 view .LVU158
 623:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 547              		.loc 1 623 32 is_stmt 0 view .LVU159
 548 0036 A361     		str	r3, [r4, #24]
 624:Src/main.c    ****   {
 549              		.loc 1 624 3 is_stmt 1 view .LVU160
 624:Src/main.c    ****   {
 550              		.loc 1 624 6 is_stmt 0 view .LVU161
 551 0038 2000     		movs	r0, r4
 552 003a FFF7FEFF 		bl	HAL_TIM_Base_Init
 553              	.LVL19:
ARM GAS  /tmp/ccrwP30Q.s 			page 26


 629:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 554              		.loc 1 629 3 is_stmt 1 view .LVU162
 629:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 555              		.loc 1 629 34 is_stmt 0 view .LVU163
 556 003e 8023     		movs	r3, #128
 557 0040 5B01     		lsls	r3, r3, #5
 558 0042 0293     		str	r3, [sp, #8]
 630:Src/main.c    **** }
 559              		.loc 1 630 3 is_stmt 1 view .LVU164
 560 0044 02A9     		add	r1, sp, #8
 561 0046 2000     		movs	r0, r4
 562 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 563              	.LVL20:
 631:Src/main.c    **** 
 564              		.loc 1 631 1 is_stmt 0 view .LVU165
 565 004c 06B0     		add	sp, sp, #24
 566              		@ sp needed
 567 004e 10BD     		pop	{r4, pc}
 568              	.L15:
 569              		.align	2
 570              	.L14:
 571 0050 00100240 		.word	1073876992
 572 0054 00000000 		.word	.LANCHOR2
 573 0058 00040040 		.word	1073742848
 574 005c 0F270000 		.word	9999
 575              		.cfi_endproc
 576              	.LFE56:
 578              		.section	.text.MX_TIM1_Init,"ax",%progbits
 579              		.align	1
 580              		.syntax unified
 581              		.code	16
 582              		.thumb_func
 583              		.fpu softvfp
 585              	MX_TIM1_Init:
 586              	.LFB57:
 634:Src/main.c    **** 
 587              		.loc 1 634 1 is_stmt 1 view -0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 88
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591 0000 70B5     		push	{r4, r5, r6, lr}
 592              	.LCFI9:
 593              		.cfi_def_cfa_offset 16
 594              		.cfi_offset 4, -16
 595              		.cfi_offset 5, -12
 596              		.cfi_offset 6, -8
 597              		.cfi_offset 14, -4
 598 0002 96B0     		sub	sp, sp, #88
 599              	.LCFI10:
 600              		.cfi_def_cfa_offset 104
 636:Src/main.c    **** 
 601              		.loc 1 636 3 view .LVU167
 602              	.LBB17:
 636:Src/main.c    **** 
 603              		.loc 1 636 3 view .LVU168
 636:Src/main.c    **** 
 604              		.loc 1 636 3 view .LVU169
ARM GAS  /tmp/ccrwP30Q.s 			page 27


 605 0004 334A     		ldr	r2, .L17
 606 0006 9169     		ldr	r1, [r2, #24]
 607 0008 8020     		movs	r0, #128
 608 000a 0001     		lsls	r0, r0, #4
 609 000c 0143     		orrs	r1, r0
 610 000e 9161     		str	r1, [r2, #24]
 636:Src/main.c    **** 
 611              		.loc 1 636 3 view .LVU170
 612 0010 9369     		ldr	r3, [r2, #24]
 613 0012 0340     		ands	r3, r0
 614 0014 0193     		str	r3, [sp, #4]
 636:Src/main.c    **** 
 615              		.loc 1 636 3 view .LVU171
 616 0016 019B     		ldr	r3, [sp, #4]
 617              	.LBE17:
 636:Src/main.c    **** 
 618              		.loc 1 636 3 view .LVU172
 638:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 619              		.loc 1 638 3 view .LVU173
 638:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 620              		.loc 1 638 26 is_stmt 0 view .LVU174
 621 0018 1022     		movs	r2, #16
 622 001a 0021     		movs	r1, #0
 623 001c 12A8     		add	r0, sp, #72
 624 001e FFF7FEFF 		bl	memset
 625              	.LVL21:
 639:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 626              		.loc 1 639 3 is_stmt 1 view .LVU175
 639:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 627              		.loc 1 639 27 is_stmt 0 view .LVU176
 628 0022 0822     		movs	r2, #8
 629 0024 0021     		movs	r1, #0
 630 0026 10A8     		add	r0, sp, #64
 631 0028 FFF7FEFF 		bl	memset
 632              	.LVL22:
 640:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 633              		.loc 1 640 3 is_stmt 1 view .LVU177
 640:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 634              		.loc 1 640 22 is_stmt 0 view .LVU178
 635 002c 1C22     		movs	r2, #28
 636 002e 0021     		movs	r1, #0
 637 0030 09A8     		add	r0, sp, #36
 638 0032 FFF7FEFF 		bl	memset
 639              	.LVL23:
 641:Src/main.c    **** 
 640              		.loc 1 641 3 is_stmt 1 view .LVU179
 641:Src/main.c    **** 
 641              		.loc 1 641 34 is_stmt 0 view .LVU180
 642 0036 1C22     		movs	r2, #28
 643 0038 0021     		movs	r1, #0
 644 003a 02A8     		add	r0, sp, #8
 645 003c FFF7FEFF 		bl	memset
 646              	.LVL24:
 643:Src/main.c    ****   htim1.Init.Prescaler = 6; // 2048
 647              		.loc 1 643 3 is_stmt 1 view .LVU181
 643:Src/main.c    ****   htim1.Init.Prescaler = 6; // 2048
 648              		.loc 1 643 18 is_stmt 0 view .LVU182
ARM GAS  /tmp/ccrwP30Q.s 			page 28


 649 0040 254D     		ldr	r5, .L17+4
 650 0042 264B     		ldr	r3, .L17+8
 651 0044 2B60     		str	r3, [r5]
 644:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 652              		.loc 1 644 3 is_stmt 1 view .LVU183
 644:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 653              		.loc 1 644 24 is_stmt 0 view .LVU184
 654 0046 0623     		movs	r3, #6
 655 0048 6B60     		str	r3, [r5, #4]
 645:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 656              		.loc 1 645 3 is_stmt 1 view .LVU185
 645:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 657              		.loc 1 645 26 is_stmt 0 view .LVU186
 658 004a 0024     		movs	r4, #0
 659 004c AC60     		str	r4, [r5, #8]
 646:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 660              		.loc 1 646 3 is_stmt 1 view .LVU187
 646:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 661              		.loc 1 646 21 is_stmt 0 view .LVU188
 662 004e 8026     		movs	r6, #128
 663 0050 7601     		lsls	r6, r6, #5
 664 0052 EE60     		str	r6, [r5, #12]
 647:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 665              		.loc 1 647 3 is_stmt 1 view .LVU189
 647:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 666              		.loc 1 647 28 is_stmt 0 view .LVU190
 667 0054 2C61     		str	r4, [r5, #16]
 648:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 668              		.loc 1 648 3 is_stmt 1 view .LVU191
 648:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 669              		.loc 1 648 32 is_stmt 0 view .LVU192
 670 0056 6C61     		str	r4, [r5, #20]
 649:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 671              		.loc 1 649 3 is_stmt 1 view .LVU193
 649:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 672              		.loc 1 649 32 is_stmt 0 view .LVU194
 673 0058 7A33     		adds	r3, r3, #122
 674 005a AB61     		str	r3, [r5, #24]
 650:Src/main.c    **** 
 675              		.loc 1 650 3 is_stmt 1 view .LVU195
 676 005c 2800     		movs	r0, r5
 677 005e FFF7FEFF 		bl	HAL_TIM_Base_Init
 678              	.LVL25:
 652:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 679              		.loc 1 652 3 view .LVU196
 652:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 680              		.loc 1 652 34 is_stmt 0 view .LVU197
 681 0062 1296     		str	r6, [sp, #72]
 653:Src/main.c    **** 
 682              		.loc 1 653 3 is_stmt 1 view .LVU198
 683 0064 12A9     		add	r1, sp, #72
 684 0066 2800     		movs	r0, r5
 685 0068 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 686              	.LVL26:
 655:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 687              		.loc 1 655 3 view .LVU199
 688 006c 2800     		movs	r0, r5
ARM GAS  /tmp/ccrwP30Q.s 			page 29


 689 006e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 690              	.LVL27:
 656:Src/main.c    **** 
 691              		.loc 1 656 3 view .LVU200
 692 0072 2800     		movs	r0, r5
 693 0074 FFF7FEFF 		bl	HAL_TIM_OC_Init
 694              	.LVL28:
 658:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 695              		.loc 1 658 3 view .LVU201
 658:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 696              		.loc 1 658 37 is_stmt 0 view .LVU202
 697 0078 1094     		str	r4, [sp, #64]
 659:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 698              		.loc 1 659 3 is_stmt 1 view .LVU203
 659:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 699              		.loc 1 659 33 is_stmt 0 view .LVU204
 700 007a 1194     		str	r4, [sp, #68]
 660:Src/main.c    **** 
 701              		.loc 1 660 3 is_stmt 1 view .LVU205
 702 007c 10A9     		add	r1, sp, #64
 703 007e 2800     		movs	r0, r5
 704 0080 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 705              	.LVL29:
 662:Src/main.c    ****   sConfigOC.Pulse = 0;
 706              		.loc 1 662 3 view .LVU206
 662:Src/main.c    ****   sConfigOC.Pulse = 0;
 707              		.loc 1 662 20 is_stmt 0 view .LVU207
 708 0084 6023     		movs	r3, #96
 709 0086 0993     		str	r3, [sp, #36]
 663:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 710              		.loc 1 663 3 is_stmt 1 view .LVU208
 663:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 711              		.loc 1 663 19 is_stmt 0 view .LVU209
 712 0088 0A94     		str	r4, [sp, #40]
 664:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 713              		.loc 1 664 3 is_stmt 1 view .LVU210
 664:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 714              		.loc 1 664 24 is_stmt 0 view .LVU211
 715 008a 0B94     		str	r4, [sp, #44]
 665:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 716              		.loc 1 665 3 is_stmt 1 view .LVU212
 665:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 717              		.loc 1 665 25 is_stmt 0 view .LVU213
 718 008c 0C94     		str	r4, [sp, #48]
 666:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 719              		.loc 1 666 3 is_stmt 1 view .LVU214
 666:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 720              		.loc 1 666 24 is_stmt 0 view .LVU215
 721 008e 0D94     		str	r4, [sp, #52]
 667:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 722              		.loc 1 667 3 is_stmt 1 view .LVU216
 667:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 723              		.loc 1 667 25 is_stmt 0 view .LVU217
 724 0090 0E94     		str	r4, [sp, #56]
 668:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 725              		.loc 1 668 3 is_stmt 1 view .LVU218
 668:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
ARM GAS  /tmp/ccrwP30Q.s 			page 30


 726              		.loc 1 668 26 is_stmt 0 view .LVU219
 727 0092 0F94     		str	r4, [sp, #60]
 669:Src/main.c    **** 
 728              		.loc 1 669 3 is_stmt 1 view .LVU220
 729 0094 0022     		movs	r2, #0
 730 0096 09A9     		add	r1, sp, #36
 731 0098 2800     		movs	r0, r5
 732 009a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 733              	.LVL30:
 671:Src/main.c    ****   sConfigOC.Pulse = 10;
 734              		.loc 1 671 3 view .LVU221
 671:Src/main.c    ****   sConfigOC.Pulse = 10;
 735              		.loc 1 671 20 is_stmt 0 view .LVU222
 736 009e 7023     		movs	r3, #112
 737 00a0 0993     		str	r3, [sp, #36]
 672:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 738              		.loc 1 672 3 is_stmt 1 view .LVU223
 672:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 739              		.loc 1 672 19 is_stmt 0 view .LVU224
 740 00a2 663B     		subs	r3, r3, #102
 741 00a4 0A93     		str	r3, [sp, #40]
 673:Src/main.c    **** 
 742              		.loc 1 673 3 is_stmt 1 view .LVU225
 743 00a6 0C22     		movs	r2, #12
 744 00a8 09A9     		add	r1, sp, #36
 745 00aa 2800     		movs	r0, r5
 746 00ac FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 747              	.LVL31:
 675:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 748              		.loc 1 675 3 view .LVU226
 675:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 749              		.loc 1 675 40 is_stmt 0 view .LVU227
 750 00b0 0294     		str	r4, [sp, #8]
 676:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 751              		.loc 1 676 3 is_stmt 1 view .LVU228
 676:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 752              		.loc 1 676 41 is_stmt 0 view .LVU229
 753 00b2 0394     		str	r4, [sp, #12]
 677:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 754              		.loc 1 677 3 is_stmt 1 view .LVU230
 677:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 755              		.loc 1 677 34 is_stmt 0 view .LVU231
 756 00b4 0494     		str	r4, [sp, #16]
 678:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 757              		.loc 1 678 3 is_stmt 1 view .LVU232
 678:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 758              		.loc 1 678 33 is_stmt 0 view .LVU233
 759 00b6 0594     		str	r4, [sp, #20]
 679:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 760              		.loc 1 679 3 is_stmt 1 view .LVU234
 679:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 761              		.loc 1 679 35 is_stmt 0 view .LVU235
 762 00b8 0694     		str	r4, [sp, #24]
 680:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 763              		.loc 1 680 3 is_stmt 1 view .LVU236
 680:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 764              		.loc 1 680 38 is_stmt 0 view .LVU237
ARM GAS  /tmp/ccrwP30Q.s 			page 31


 765 00ba 8023     		movs	r3, #128
 766 00bc 9B01     		lsls	r3, r3, #6
 767 00be 0793     		str	r3, [sp, #28]
 681:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 768              		.loc 1 681 3 is_stmt 1 view .LVU238
 681:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 769              		.loc 1 681 40 is_stmt 0 view .LVU239
 770 00c0 0894     		str	r4, [sp, #32]
 682:Src/main.c    **** 
 771              		.loc 1 682 3 is_stmt 1 view .LVU240
 772 00c2 02A9     		add	r1, sp, #8
 773 00c4 2800     		movs	r0, r5
 774 00c6 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 775              	.LVL32:
 684:Src/main.c    **** }
 776              		.loc 1 684 3 view .LVU241
 777 00ca 2800     		movs	r0, r5
 778 00cc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 779              	.LVL33:
 685:Src/main.c    **** /*
 780              		.loc 1 685 1 is_stmt 0 view .LVU242
 781 00d0 16B0     		add	sp, sp, #88
 782              		@ sp needed
 783 00d2 70BD     		pop	{r4, r5, r6, pc}
 784              	.L18:
 785              		.align	2
 786              	.L17:
 787 00d4 00100240 		.word	1073876992
 788 00d8 00000000 		.word	.LANCHOR3
 789 00dc 002C0140 		.word	1073818624
 790              		.cfi_endproc
 791              	.LFE57:
 793              		.section	.text.MX_IWDG_Init,"ax",%progbits
 794              		.align	1
 795              		.syntax unified
 796              		.code	16
 797              		.thumb_func
 798              		.fpu softvfp
 800              	MX_IWDG_Init:
 801              	.LFB55:
 600:Src/main.c    ****   hiwdg.Instance = IWDG;
 802              		.loc 1 600 1 is_stmt 1 view -0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806 0000 10B5     		push	{r4, lr}
 807              	.LCFI11:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 4, -8
 810              		.cfi_offset 14, -4
 601:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 811              		.loc 1 601 3 view .LVU244
 601:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 812              		.loc 1 601 18 is_stmt 0 view .LVU245
 813 0002 0548     		ldr	r0, .L20
 814 0004 054B     		ldr	r3, .L20+4
 815 0006 0360     		str	r3, [r0]
ARM GAS  /tmp/ccrwP30Q.s 			page 32


 602:Src/main.c    ****   hiwdg.Init.Window = 4095;
 816              		.loc 1 602 3 is_stmt 1 view .LVU246
 602:Src/main.c    ****   hiwdg.Init.Window = 4095;
 817              		.loc 1 602 24 is_stmt 0 view .LVU247
 818 0008 0023     		movs	r3, #0
 819 000a 4360     		str	r3, [r0, #4]
 603:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 820              		.loc 1 603 3 is_stmt 1 view .LVU248
 603:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 821              		.loc 1 603 21 is_stmt 0 view .LVU249
 822 000c 044B     		ldr	r3, .L20+8
 823 000e C360     		str	r3, [r0, #12]
 604:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 824              		.loc 1 604 3 is_stmt 1 view .LVU250
 604:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 825              		.loc 1 604 21 is_stmt 0 view .LVU251
 826 0010 8360     		str	r3, [r0, #8]
 605:Src/main.c    **** }
 827              		.loc 1 605 3 is_stmt 1 view .LVU252
 828 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 829              	.LVL34:
 606:Src/main.c    **** 
 830              		.loc 1 606 1 is_stmt 0 view .LVU253
 831              		@ sp needed
 832 0016 10BD     		pop	{r4, pc}
 833              	.L21:
 834              		.align	2
 835              	.L20:
 836 0018 00000000 		.word	.LANCHOR4
 837 001c 00300040 		.word	1073754112
 838 0020 FF0F0000 		.word	4095
 839              		.cfi_endproc
 840              	.LFE55:
 842              		.global	__aeabi_ui2f
 843              		.global	__aeabi_f2d
 844              		.global	__aeabi_ddiv
 845              		.global	__aeabi_dmul
 846              		.global	__aeabi_dsub
 847              		.global	__aeabi_d2f
 848              		.global	__aeabi_i2f
 849              		.global	__aeabi_fsub
 850              		.global	__aeabi_fmul
 851              		.global	__aeabi_fdiv
 852              		.global	__aeabi_fadd
 853              		.global	__aeabi_i2d
 854              		.global	__aeabi_dadd
 855              		.global	__aeabi_fcmpge
 856              		.global	__aeabi_fcmple
 857              		.global	__aeabi_fcmpgt
 858              		.global	__aeabi_fcmplt
 859              		.global	__aeabi_f2iz
 860              		.global	__aeabi_dcmple
 861              		.section	.text.reg,"ax",%progbits
 862              		.align	1
 863              		.global	reg
 864              		.syntax unified
 865              		.code	16
ARM GAS  /tmp/ccrwP30Q.s 			page 33


 866              		.thumb_func
 867              		.fpu softvfp
 869              	reg:
 870              	.LFB39:
 288:Src/main.c    ****   static uint16_t count = 0;
 871              		.loc 1 288 16 is_stmt 1 view -0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 876              	.LCFI12:
 877              		.cfi_def_cfa_offset 24
 878              		.cfi_offset 3, -24
 879              		.cfi_offset 4, -20
 880              		.cfi_offset 5, -16
 881              		.cfi_offset 6, -12
 882              		.cfi_offset 7, -8
 883              		.cfi_offset 14, -4
 884 0002 CE46     		mov	lr, r9
 885 0004 4746     		mov	r7, r8
 886 0006 80B5     		push	{r7, lr}
 887              	.LCFI13:
 888              		.cfi_def_cfa_offset 32
 889              		.cfi_offset 8, -32
 890              		.cfi_offset 9, -28
 289:Src/main.c    **** 
 891              		.loc 1 289 3 view .LVU255
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 892              		.loc 1 291 3 view .LVU256
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 893              		.loc 1 291 29 is_stmt 0 view .LVU257
 894 0008 B54B     		ldr	r3, .L59
 895 000a 9946     		mov	r9, r3
 896 000c D888     		ldrh	r0, [r3, #6]
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 897              		.loc 1 291 15 view .LVU258
 898 000e FFF7FEFF 		bl	__aeabi_ui2f
 899              	.LVL35:
 900 0012 FFF7FEFF 		bl	__aeabi_f2d
 901              	.LVL36:
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 902              		.loc 1 291 32 view .LVU259
 903 0016 0022     		movs	r2, #0
 904 0018 B24B     		ldr	r3, .L59+4
 905 001a FFF7FEFF 		bl	__aeabi_ddiv
 906              	.LVL37:
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 907              		.loc 1 291 40 view .LVU260
 908 001e B24A     		ldr	r2, .L59+8
 909 0020 B24B     		ldr	r3, .L59+12
 910 0022 FFF7FEFF 		bl	__aeabi_dmul
 911              	.LVL38:
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 912              		.loc 1 291 45 view .LVU261
 913 0026 0022     		movs	r2, #0
 914 0028 B14B     		ldr	r3, .L59+16
 915 002a FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /tmp/ccrwP30Q.s 			page 34


 916              	.LVL39:
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 917              		.loc 1 291 50 view .LVU262
 918 002e B14A     		ldr	r2, .L59+20
 919 0030 B14B     		ldr	r3, .L59+24
 920 0032 FFF7FEFF 		bl	__aeabi_ddiv
 921              	.LVL40:
 922 0036 FFF7FEFF 		bl	__aeabi_d2f
 923              	.LVL41:
 924 003a 051C     		adds	r5, r0, #0
 291:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 925              		.loc 1 291 10 view .LVU263
 926 003c AF4C     		ldr	r4, .L59+28
 927 003e A061     		str	r0, [r4, #24]
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 928              		.loc 1 292 3 is_stmt 1 view .LVU264
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 929              		.loc 1 292 21 is_stmt 0 view .LVU265
 930 0040 4B46     		mov	r3, r9
 931 0042 5888     		ldrh	r0, [r3, #2]
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 932              		.loc 1 292 31 view .LVU266
 933 0044 AE4E     		ldr	r6, .L59+32
 934 0046 3768     		ldr	r7, [r6]
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 935              		.loc 1 292 24 view .LVU267
 936 0048 FFF7FEFF 		bl	__aeabi_i2f
 937              	.LVL42:
 938 004c 391C     		adds	r1, r7, #0
 939 004e FFF7FEFF 		bl	__aeabi_fsub
 940              	.LVL43:
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 941              		.loc 1 292 46 view .LVU268
 942 0052 7168     		ldr	r1, [r6, #4]
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 943              		.loc 1 292 39 view .LVU269
 944 0054 FFF7FEFF 		bl	__aeabi_fmul
 945              	.LVL44:
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 946              		.loc 1 292 59 view .LVU270
 947 0058 AA49     		ldr	r1, .L59+36
 948 005a FFF7FEFF 		bl	__aeabi_fdiv
 949              	.LVL45:
 950 005e 011C     		adds	r1, r0, #0
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 951              		.loc 1 292 64 view .LVU271
 952 0060 281C     		adds	r0, r5, #0
 953 0062 FFF7FEFF 		bl	__aeabi_fadd
 954              	.LVL46:
 955 0066 051C     		adds	r5, r0, #0
 292:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 956              		.loc 1 292 10 view .LVU272
 957 0068 2060     		str	r0, [r4]
 293:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 958              		.loc 1 293 3 is_stmt 1 view .LVU273
 293:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 959              		.loc 1 293 20 is_stmt 0 view .LVU274
ARM GAS  /tmp/ccrwP30Q.s 			page 35


 960 006a 4B46     		mov	r3, r9
 961 006c 9888     		ldrh	r0, [r3, #4]
 293:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 962              		.loc 1 293 23 view .LVU275
 963 006e FFF7FEFF 		bl	__aeabi_i2d
 964              	.LVL47:
 965 0072 0022     		movs	r2, #0
 966 0074 9B4B     		ldr	r3, .L59+4
 967 0076 FFF7FEFF 		bl	__aeabi_ddiv
 968              	.LVL48:
 293:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 969              		.loc 1 293 31 view .LVU276
 970 007a 9B4A     		ldr	r2, .L59+8
 971 007c 9B4B     		ldr	r3, .L59+12
 972 007e FFF7FEFF 		bl	__aeabi_dmul
 973              	.LVL49:
 293:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 974              		.loc 1 293 36 view .LVU277
 975 0082 994A     		ldr	r2, .L59+8
 976 0084 A04B     		ldr	r3, .L59+40
 977 0086 FFF7FEFF 		bl	__aeabi_dmul
 978              	.LVL50:
 979 008a FFF7FEFF 		bl	__aeabi_d2f
 980              	.LVL51:
 981 008e 8046     		mov	r8, r0
 293:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 982              		.loc 1 293 9 view .LVU278
 983 0090 A060     		str	r0, [r4, #8]
 294:Src/main.c    **** 
 984              		.loc 1 294 3 is_stmt 1 view .LVU279
 294:Src/main.c    **** 
 985              		.loc 1 294 11 is_stmt 0 view .LVU280
 986 0092 9E49     		ldr	r1, .L59+44
 987 0094 E068     		ldr	r0, [r4, #12]
 988 0096 FFF7FEFF 		bl	__aeabi_fmul
 989              	.LVL52:
 990 009a FFF7FEFF 		bl	__aeabi_f2d
 991              	.LVL53:
 992 009e 0600     		movs	r6, r0
 993 00a0 0F00     		movs	r7, r1
 994 00a2 4B46     		mov	r3, r9
 995 00a4 1888     		ldrh	r0, [r3]
 996 00a6 FFF7FEFF 		bl	__aeabi_i2d
 997              	.LVL54:
 998 00aa 0022     		movs	r2, #0
 999 00ac 8D4B     		ldr	r3, .L59+4
 1000 00ae FFF7FEFF 		bl	__aeabi_ddiv
 1001              	.LVL55:
 1002 00b2 8D4A     		ldr	r2, .L59+8
 1003 00b4 8D4B     		ldr	r3, .L59+12
 1004 00b6 FFF7FEFF 		bl	__aeabi_dmul
 1005              	.LVL56:
 1006 00ba 954A     		ldr	r2, .L59+48
 1007 00bc 954B     		ldr	r3, .L59+52
 1008 00be FFF7FEFF 		bl	__aeabi_dmul
 1009              	.LVL57:
 1010 00c2 954A     		ldr	r2, .L59+56
ARM GAS  /tmp/ccrwP30Q.s 			page 36


 1011 00c4 954B     		ldr	r3, .L59+60
 1012 00c6 FFF7FEFF 		bl	__aeabi_ddiv
 1013              	.LVL58:
 1014 00ca 0022     		movs	r2, #0
 1015 00cc 944B     		ldr	r3, .L59+64
 1016 00ce FFF7FEFF 		bl	__aeabi_dmul
 1017              	.LVL59:
 1018 00d2 0200     		movs	r2, r0
 1019 00d4 0B00     		movs	r3, r1
 1020 00d6 3000     		movs	r0, r6
 1021 00d8 3900     		movs	r1, r7
 1022 00da FFF7FEFF 		bl	__aeabi_dadd
 1023              	.LVL60:
 1024 00de FFF7FEFF 		bl	__aeabi_d2f
 1025              	.LVL61:
 1026 00e2 061C     		adds	r6, r0, #0
 294:Src/main.c    **** 
 1027              		.loc 1 294 9 view .LVU281
 1028 00e4 E060     		str	r0, [r4, #12]
 296:Src/main.c    **** 
 1029              		.loc 1 296 3 is_stmt 1 view .LVU282
 296:Src/main.c    **** 
 1030              		.loc 1 296 15 is_stmt 0 view .LVU283
 1031 00e6 8949     		ldr	r1, .L59+44
 1032 00e8 6068     		ldr	r0, [r4, #4]
 1033 00ea FFF7FEFF 		bl	__aeabi_fmul
 1034              	.LVL62:
 1035 00ee 071C     		adds	r7, r0, #0
 1036 00f0 8C49     		ldr	r1, .L59+68
 1037 00f2 281C     		adds	r0, r5, #0
 1038 00f4 FFF7FEFF 		bl	__aeabi_fmul
 1039              	.LVL63:
 1040 00f8 011C     		adds	r1, r0, #0
 1041 00fa 381C     		adds	r0, r7, #0
 1042 00fc FFF7FEFF 		bl	__aeabi_fadd
 1043              	.LVL64:
 1044 0100 051C     		adds	r5, r0, #0
 296:Src/main.c    **** 
 1045              		.loc 1 296 13 view .LVU284
 1046 0102 6060     		str	r0, [r4, #4]
 299:Src/main.c    ****     // Check if within deadband, decide on two-way or PID control
 1047              		.loc 1 299 3 is_stmt 1 view .LVU285
 1048              	.LBB18:
 1049              	.LBI18:
 279:Src/main.c    ****  #ifdef CHECKUSBPD
 1050              		.loc 1 279 16 view .LVU286
 1051              	.LBB19:
 281:Src/main.c    ****  #else
 1052              		.loc 1 281 3 view .LVU287
 281:Src/main.c    ****  #else
 1053              		.loc 1 281 25 is_stmt 0 view .LVU288
 1054 0104 8849     		ldr	r1, .L59+72
 1055 0106 4046     		mov	r0, r8
 1056 0108 FFF7FEFF 		bl	__aeabi_fcmpge
 1057              	.LVL65:
 1058 010c 0028     		cmp	r0, #0
 1059 010e 08D0     		beq	.L56
ARM GAS  /tmp/ccrwP30Q.s 			page 37


 281:Src/main.c    ****  #else
 1060              		.loc 1 281 29 view .LVU289
 1061 0110 6069     		ldr	r0, [r4, #20]
 281:Src/main.c    ****  #else
 1062              		.loc 1 281 25 view .LVU290
 1063 0112 8021     		movs	r1, #128
 1064 0114 C905     		lsls	r1, r1, #23
 1065 0116 FFF7FEFF 		bl	__aeabi_fcmpge
 1066              	.LVL66:
 1067 011a 0028     		cmp	r0, #0
 1068 011c 59D1     		bne	.L46
 1069 011e 0023     		movs	r3, #0
 1070 0120 00E0     		b	.L23
 1071              	.L56:
 1072 0122 0023     		movs	r3, #0
 1073              	.L23:
 1074              	.LBE19:
 1075              	.LBE18:
 299:Src/main.c    ****     // Check if within deadband, decide on two-way or PID control
 1076              		.loc 1 299 6 view .LVU291
 1077 0124 002B     		cmp	r3, #0
 1078 0126 00D1     		bne	.LCB828
 1079 0128 D4E0     		b	.L25	@long jump
 1080              	.LCB828:
 301:Src/main.c    ****       r.error = r.target - s.ttipavg;
 1081              		.loc 1 301 5 is_stmt 1 view .LVU292
 301:Src/main.c    ****       r.error = r.target - s.ttipavg;
 1082              		.loc 1 301 22 is_stmt 0 view .LVU293
 1083 012a 804B     		ldr	r3, .L59+76
 1084 012c 1C68     		ldr	r4, [r3]
 301:Src/main.c    ****       r.error = r.target - s.ttipavg;
 1085              		.loc 1 301 31 view .LVU294
 1086 012e DF6A     		ldr	r7, [r3, #44]
 301:Src/main.c    ****       r.error = r.target - s.ttipavg;
 1087              		.loc 1 301 29 view .LVU295
 1088 0130 391C     		adds	r1, r7, #0
 1089 0132 201C     		adds	r0, r4, #0
 1090 0134 FFF7FEFF 		bl	__aeabi_fsub
 1091              	.LVL67:
 1092 0138 011C     		adds	r1, r0, #0
 301:Src/main.c    ****       r.error = r.target - s.ttipavg;
 1093              		.loc 1 301 7 view .LVU296
 1094 013a 281C     		adds	r0, r5, #0
 1095 013c FFF7FEFF 		bl	__aeabi_fcmpge
 1096              	.LVL68:
 1097 0140 0028     		cmp	r0, #0
 1098 0142 48D0     		beq	.L26
 301:Src/main.c    ****       r.error = r.target - s.ttipavg;
 1099              		.loc 1 301 65 discriminator 1 view .LVU297
 1100 0144 391C     		adds	r1, r7, #0
 1101 0146 201C     		adds	r0, r4, #0
 1102 0148 FFF7FEFF 		bl	__aeabi_fadd
 1103              	.LVL69:
 1104 014c 011C     		adds	r1, r0, #0
 301:Src/main.c    ****       r.error = r.target - s.ttipavg;
 1105              		.loc 1 301 41 discriminator 1 view .LVU298
 1106 014e 281C     		adds	r0, r5, #0
ARM GAS  /tmp/ccrwP30Q.s 			page 38


 1107 0150 FFF7FEFF 		bl	__aeabi_fcmple
 1108              	.LVL70:
 1109 0154 0028     		cmp	r0, #0
 1110 0156 3ED0     		beq	.L26
 302:Src/main.c    ****       r.ierror = r.ierror + (r.error*r.cycletime);
 1111              		.loc 1 302 7 is_stmt 1 view .LVU299
 302:Src/main.c    ****       r.ierror = r.ierror + (r.error*r.cycletime);
 1112              		.loc 1 302 26 is_stmt 0 view .LVU300
 1113 0158 291C     		adds	r1, r5, #0
 1114 015a 201C     		adds	r0, r4, #0
 1115 015c FFF7FEFF 		bl	__aeabi_fsub
 1116              	.LVL71:
 1117 0160 041C     		adds	r4, r0, #0
 302:Src/main.c    ****       r.ierror = r.ierror + (r.error*r.cycletime);
 1118              		.loc 1 302 15 view .LVU301
 1119 0162 724F     		ldr	r7, .L59+76
 1120 0164 7860     		str	r0, [r7, #4]
 303:Src/main.c    ****       r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1121              		.loc 1 303 7 is_stmt 1 view .LVU302
 303:Src/main.c    ****       r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1122              		.loc 1 303 19 is_stmt 0 view .LVU303
 1123 0166 FB68     		ldr	r3, [r7, #12]
 1124 0168 9846     		mov	r8, r3
 303:Src/main.c    ****       r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1125              		.loc 1 303 37 view .LVU304
 1126 016a F969     		ldr	r1, [r7, #28]
 1127 016c FFF7FEFF 		bl	__aeabi_fmul
 1128              	.LVL72:
 1129 0170 011C     		adds	r1, r0, #0
 303:Src/main.c    ****       r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1130              		.loc 1 303 27 view .LVU305
 1131 0172 4046     		mov	r0, r8
 1132 0174 FFF7FEFF 		bl	__aeabi_fadd
 1133              	.LVL73:
 1134 0178 8046     		mov	r8, r0
 303:Src/main.c    ****       r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1135              		.loc 1 303 16 view .LVU306
 1136 017a F860     		str	r0, [r7, #12]
 304:Src/main.c    ****       r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1137              		.loc 1 304 7 is_stmt 1 view .LVU307
 304:Src/main.c    ****       r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1138              		.loc 1 304 18 is_stmt 0 view .LVU308
 1139 017c 3B69     		ldr	r3, [r7, #16]
 1140 017e 9946     		mov	r9, r3
 1141 0180 191C     		adds	r1, r3, #0
 1142 0182 FFF7FEFF 		bl	__aeabi_fcmpgt
 1143              	.LVL74:
 1144 0186 0028     		cmp	r0, #0
 1145 0188 0AD1     		bne	.L29
 304:Src/main.c    ****       r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1146              		.loc 1 304 18 discriminator 2 view .LVU309
 1147 018a 8023     		movs	r3, #128
 1148 018c 1B06     		lsls	r3, r3, #24
 1149 018e 4B44     		add	r3, r3, r9
 1150 0190 1900     		movs	r1, r3
 1151 0192 9946     		mov	r9, r3
 1152 0194 4046     		mov	r0, r8
ARM GAS  /tmp/ccrwP30Q.s 			page 39


 1153 0196 FFF7FEFF 		bl	__aeabi_fcmplt
 1154              	.LVL75:
 1155 019a 0028     		cmp	r0, #0
 1156 019c 00D1     		bne	.L29
 1157 019e C146     		mov	r9, r8
 1158              	.L29:
 304:Src/main.c    ****       r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1159              		.loc 1 304 16 discriminator 8 view .LVU310
 1160 01a0 624F     		ldr	r7, .L59+76
 1161 01a2 4B46     		mov	r3, r9
 1162 01a4 FB60     		str	r3, [r7, #12]
 305:Src/main.c    ****       r.errorprior = r.error;
 1163              		.loc 1 305 7 is_stmt 1 discriminator 8 view .LVU311
 305:Src/main.c    ****       r.errorprior = r.error;
 1164              		.loc 1 305 32 is_stmt 0 discriminator 8 view .LVU312
 1165 01a6 396A     		ldr	r1, [r7, #32]
 1166 01a8 201C     		adds	r0, r4, #0
 1167 01aa FFF7FEFF 		bl	__aeabi_fmul
 1168              	.LVL76:
 1169 01ae 8046     		mov	r8, r0
 305:Src/main.c    ****       r.errorprior = r.error;
 1170              		.loc 1 305 47 discriminator 8 view .LVU313
 1171 01b0 4946     		mov	r1, r9
 1172 01b2 786A     		ldr	r0, [r7, #36]
 1173 01b4 FFF7FEFF 		bl	__aeabi_fmul
 1174              	.LVL77:
 1175 01b8 011C     		adds	r1, r0, #0
 305:Src/main.c    ****       r.errorprior = r.error;
 1176              		.loc 1 305 41 discriminator 8 view .LVU314
 1177 01ba 4046     		mov	r0, r8
 1178 01bc FFF7FEFF 		bl	__aeabi_fadd
 1179              	.LVL78:
 305:Src/main.c    ****       r.errorprior = r.error;
 1180              		.loc 1 305 17 discriminator 8 view .LVU315
 1181 01c0 FFF7FEFF 		bl	__aeabi_f2iz
 1182              	.LVL79:
 1183 01c4 03B2     		sxth	r3, r0
 305:Src/main.c    ****       r.errorprior = r.error;
 1184              		.loc 1 305 14 discriminator 8 view .LVU316
 1185 01c6 5A4A     		ldr	r2, .L59+80
 1186 01c8 1088     		ldrh	r0, [r2]
 1187 01ca 5843     		muls	r0, r3
 1188 01cc 3883     		strh	r0, [r7, #24]
 306:Src/main.c    ****     } else {
 1189              		.loc 1 306 7 is_stmt 1 discriminator 8 view .LVU317
 306:Src/main.c    ****     } else {
 1190              		.loc 1 306 20 is_stmt 0 discriminator 8 view .LVU318
 1191 01ce BC60     		str	r4, [r7, #8]
 1192 01d0 0DE0     		b	.L31
 1193              	.L46:
 1194              	.LBB21:
 1195              	.LBB20:
 281:Src/main.c    ****  #else
 1196              		.loc 1 281 25 view .LVU319
 1197 01d2 0123     		movs	r3, #1
 1198 01d4 A6E7     		b	.L23
 1199              	.L26:
ARM GAS  /tmp/ccrwP30Q.s 			page 40


 1200              	.LBE20:
 1201              	.LBE21:
 308:Src/main.c    ****         r.duty = wduty;
 1202              		.loc 1 308 7 is_stmt 1 view .LVU320
 308:Src/main.c    ****         r.duty = wduty;
 1203              		.loc 1 308 9 is_stmt 0 view .LVU321
 1204 01d6 211C     		adds	r1, r4, #0
 1205 01d8 281C     		adds	r0, r5, #0
 1206 01da FFF7FEFF 		bl	__aeabi_fcmple
 1207              	.LVL80:
 1208 01de 0028     		cmp	r0, #0
 1209 01e0 2AD0     		beq	.L57
 309:Src/main.c    ****         r.error = 12.0;
 1210              		.loc 1 309 9 is_stmt 1 view .LVU322
 309:Src/main.c    ****         r.error = 12.0;
 1211              		.loc 1 309 16 is_stmt 0 view .LVU323
 1212 01e2 524B     		ldr	r3, .L59+76
 1213 01e4 524A     		ldr	r2, .L59+80
 1214 01e6 1288     		ldrh	r2, [r2]
 1215 01e8 1A83     		strh	r2, [r3, #24]
 310:Src/main.c    ****       } else {
 1216              		.loc 1 310 9 is_stmt 1 view .LVU324
 310:Src/main.c    ****       } else {
 1217              		.loc 1 310 17 is_stmt 0 view .LVU325
 1218 01ea 524A     		ldr	r2, .L59+84
 1219 01ec 5A60     		str	r2, [r3, #4]
 1220              	.L31:
 318:Src/main.c    ****       if (count > 2000) {
 1221              		.loc 1 318 5 is_stmt 1 view .LVU326
 318:Src/main.c    ****       if (count > 2000) {
 1222              		.loc 1 318 10 is_stmt 0 view .LVU327
 1223 01ee 301C     		adds	r0, r6, #0
 1224 01f0 FFF7FEFF 		bl	__aeabi_f2d
 1225              	.LVL81:
 318:Src/main.c    ****       if (count > 2000) {
 1226              		.loc 1 318 8 view .LVU328
 1227 01f4 504A     		ldr	r2, .L59+88
 1228 01f6 514B     		ldr	r3, .L59+92
 1229 01f8 FFF7FEFF 		bl	__aeabi_dcmple
 1230              	.LVL82:
 1231 01fc 0028     		cmp	r0, #0
 1232 01fe 25D0     		beq	.L34
 318:Src/main.c    ****       if (count > 2000) {
 1233              		.loc 1 318 24 discriminator 1 view .LVU329
 1234 0200 4F49     		ldr	r1, .L59+96
 1235 0202 281C     		adds	r0, r5, #0
 1236 0204 FFF7FEFF 		bl	__aeabi_fcmpgt
 1237              	.LVL83:
 1238 0208 0028     		cmp	r0, #0
 1239 020a 1FD0     		beq	.L34
 319:Src/main.c    ****         r.duty = 100;
 1240              		.loc 1 319 7 is_stmt 1 view .LVU330
 319:Src/main.c    ****         r.duty = 100;
 1241              		.loc 1 319 17 is_stmt 0 view .LVU331
 1242 020c 4D4B     		ldr	r3, .L59+100
 1243 020e 1B88     		ldrh	r3, [r3]
 319:Src/main.c    ****         r.duty = 100;
ARM GAS  /tmp/ccrwP30Q.s 			page 41


 1244              		.loc 1 319 10 view .LVU332
 1245 0210 FA22     		movs	r2, #250
 1246 0212 D200     		lsls	r2, r2, #3
 1247 0214 9342     		cmp	r3, r2
 1248 0216 15D9     		bls	.L37
 320:Src/main.c    ****         r.error = 0.0;
 1249              		.loc 1 320 9 is_stmt 1 view .LVU333
 320:Src/main.c    ****         r.error = 0.0;
 1250              		.loc 1 320 16 is_stmt 0 view .LVU334
 1251 0218 444B     		ldr	r3, .L59+76
 1252 021a 6422     		movs	r2, #100
 1253 021c 1A83     		strh	r2, [r3, #24]
 321:Src/main.c    ****         r.ierror = 0.0;
 1254              		.loc 1 321 9 is_stmt 1 view .LVU335
 321:Src/main.c    ****         r.ierror = 0.0;
 1255              		.loc 1 321 17 is_stmt 0 view .LVU336
 1256 021e 0022     		movs	r2, #0
 1257 0220 5A60     		str	r2, [r3, #4]
 322:Src/main.c    ****         r.derror = 0.0;
 1258              		.loc 1 322 9 is_stmt 1 view .LVU337
 322:Src/main.c    ****         r.derror = 0.0;
 1259              		.loc 1 322 18 is_stmt 0 view .LVU338
 1260 0222 DA60     		str	r2, [r3, #12]
 323:Src/main.c    ****         r.errorprior = 0.0;
 1261              		.loc 1 323 9 is_stmt 1 view .LVU339
 323:Src/main.c    ****         r.errorprior = 0.0;
 1262              		.loc 1 323 18 is_stmt 0 view .LVU340
 1263 0224 5A61     		str	r2, [r3, #20]
 324:Src/main.c    ****         wduty = 150;
 1264              		.loc 1 324 9 is_stmt 1 view .LVU341
 324:Src/main.c    ****         wduty = 150;
 1265              		.loc 1 324 22 is_stmt 0 view .LVU342
 1266 0226 9A60     		str	r2, [r3, #8]
 325:Src/main.c    ****         s.active = 0;
 1267              		.loc 1 325 9 is_stmt 1 view .LVU343
 325:Src/main.c    ****         s.active = 0;
 1268              		.loc 1 325 15 is_stmt 0 view .LVU344
 1269 0228 414B     		ldr	r3, .L59+80
 1270 022a 9622     		movs	r2, #150
 1271 022c 1A80     		strh	r2, [r3]
 326:Src/main.c    ****       } else {
 1272              		.loc 1 326 9 is_stmt 1 view .LVU345
 326:Src/main.c    ****       } else {
 1273              		.loc 1 326 18 is_stmt 0 view .LVU346
 1274 022e 334A     		ldr	r2, .L59+28
 1275 0230 2523     		movs	r3, #37
 1276 0232 0021     		movs	r1, #0
 1277 0234 D154     		strb	r1, [r2, r3]
 1278 0236 10E0     		b	.L38
 1279              	.L57:
 312:Src/main.c    ****         r.error = 0.0;
 1280              		.loc 1 312 9 is_stmt 1 view .LVU347
 312:Src/main.c    ****         r.error = 0.0;
 1281              		.loc 1 312 16 is_stmt 0 view .LVU348
 1282 0238 3C4B     		ldr	r3, .L59+76
 1283 023a 0022     		movs	r2, #0
 1284 023c 1A83     		strh	r2, [r3, #24]
ARM GAS  /tmp/ccrwP30Q.s 			page 42


 313:Src/main.c    ****       }
 1285              		.loc 1 313 9 is_stmt 1 view .LVU349
 313:Src/main.c    ****       }
 1286              		.loc 1 313 17 is_stmt 0 view .LVU350
 1287 023e 0022     		movs	r2, #0
 1288 0240 5A60     		str	r2, [r3, #4]
 1289 0242 D4E7     		b	.L31
 1290              	.L37:
 328:Src/main.c    ****       }
 1291              		.loc 1 328 9 is_stmt 1 view .LVU351
 328:Src/main.c    ****       }
 1292              		.loc 1 328 14 is_stmt 0 view .LVU352
 1293 0244 0133     		adds	r3, r3, #1
 1294 0246 3F4A     		ldr	r2, .L59+100
 1295 0248 1380     		strh	r3, [r2]
 1296 024a 06E0     		b	.L38
 1297              	.L34:
 331:Src/main.c    ****       s.active = 1;
 1298              		.loc 1 331 7 is_stmt 1 view .LVU353
 331:Src/main.c    ****       s.active = 1;
 1299              		.loc 1 331 13 is_stmt 0 view .LVU354
 1300 024c 3D4B     		ldr	r3, .L59+100
 1301 024e 0022     		movs	r2, #0
 1302 0250 1A80     		strh	r2, [r3]
 332:Src/main.c    ****     }
 1303              		.loc 1 332 7 is_stmt 1 view .LVU355
 332:Src/main.c    ****     }
 1304              		.loc 1 332 16 is_stmt 0 view .LVU356
 1305 0252 2A4A     		ldr	r2, .L59+28
 1306 0254 2523     		movs	r3, #37
 1307 0256 0121     		movs	r1, #1
 1308 0258 D154     		strb	r1, [r2, r3]
 1309              	.L38:
 335:Src/main.c    **** 
 1310              		.loc 1 335 5 is_stmt 1 view .LVU357
 335:Src/main.c    **** 
 1311              		.loc 1 335 14 is_stmt 0 view .LVU358
 1312 025a 344B     		ldr	r3, .L59+76
 1313 025c 1822     		movs	r2, #24
 1314 025e 9B5E     		ldrsh	r3, [r3, r2]
 335:Src/main.c    **** 
 1315              		.loc 1 335 12 view .LVU359
 1316 0260 FA22     		movs	r2, #250
 1317 0262 D200     		lsls	r2, r2, #3
 1318 0264 9342     		cmp	r3, r2
 1319 0266 06DC     		bgt	.L48
 335:Src/main.c    **** 
 1320              		.loc 1 335 12 discriminator 1 view .LVU360
 1321 0268 1C1C     		adds	r4, r3, #0
 1322 026a 002B     		cmp	r3, #0
 1323 026c 01DB     		blt	.L58
 1324              	.L40:
 1325 026e 24B2     		sxth	r4, r4
 1326 0270 03E0     		b	.L39
 1327              	.L58:
 1328 0272 0024     		movs	r4, #0
 1329 0274 FBE7     		b	.L40
ARM GAS  /tmp/ccrwP30Q.s 			page 43


 1330              	.L48:
 335:Src/main.c    **** 
 1331              		.loc 1 335 12 view .LVU361
 1332 0276 FA24     		movs	r4, #250
 1333 0278 E400     		lsls	r4, r4, #3
 1334              	.L39:
 335:Src/main.c    **** 
 1335              		.loc 1 335 12 discriminator 4 view .LVU362
 1336 027a 2C4B     		ldr	r3, .L59+76
 1337 027c 1C83     		strh	r4, [r3, #24]
 337:Src/main.c    ****       wduty = r.duty - 2;
 1338              		.loc 1 337 5 is_stmt 1 discriminator 4 view .LVU363
 337:Src/main.c    ****       wduty = r.duty - 2;
 1339              		.loc 1 337 17 is_stmt 0 discriminator 4 view .LVU364
 1340 027e 1F4B     		ldr	r3, .L59+28
 1341 0280 5969     		ldr	r1, [r3, #20]
 337:Src/main.c    ****       wduty = r.duty - 2;
 1342              		.loc 1 337 7 discriminator 4 view .LVU365
 1343 0282 301C     		adds	r0, r6, #0
 1344 0284 FFF7FEFF 		bl	__aeabi_fcmpgt
 1345              	.LVL84:
 1346 0288 0028     		cmp	r0, #0
 1347 028a 09D0     		beq	.L41
 337:Src/main.c    ****       wduty = r.duty - 2;
 1348              		.loc 1 337 23 discriminator 1 view .LVU366
 1349 028c 642C     		cmp	r4, #100
 1350 028e 07DD     		ble	.L41
 338:Src/main.c    ****       r.duty -= 100;
 1351              		.loc 1 338 7 is_stmt 1 view .LVU367
 338:Src/main.c    ****       r.duty -= 100;
 1352              		.loc 1 338 16 is_stmt 0 view .LVU368
 1353 0290 A4B2     		uxth	r4, r4
 338:Src/main.c    ****       r.duty -= 100;
 1354              		.loc 1 338 22 view .LVU369
 1355 0292 A21E     		subs	r2, r4, #2
 338:Src/main.c    ****       r.duty -= 100;
 1356              		.loc 1 338 13 view .LVU370
 1357 0294 264B     		ldr	r3, .L59+80
 1358 0296 1A80     		strh	r2, [r3]
 339:Src/main.c    ****     } else {
 1359              		.loc 1 339 7 is_stmt 1 view .LVU371
 339:Src/main.c    ****     } else {
 1360              		.loc 1 339 14 is_stmt 0 view .LVU372
 1361 0298 643C     		subs	r4, r4, #100
 1362 029a 244B     		ldr	r3, .L59+76
 1363 029c 1C83     		strh	r4, [r3, #24]
 1364 029e 0AE0     		b	.L43
 1365              	.L41:
 341:Src/main.c    ****       if(wduty >= MAX_DUTY) wduty = MAX_DUTY;
 1366              		.loc 1 341 7 is_stmt 1 view .LVU373
 341:Src/main.c    ****       if(wduty >= MAX_DUTY) wduty = MAX_DUTY;
 1367              		.loc 1 341 12 is_stmt 0 view .LVU374
 1368 02a0 234A     		ldr	r2, .L59+80
 1369 02a2 1388     		ldrh	r3, [r2]
 1370 02a4 0133     		adds	r3, r3, #1
 1371 02a6 9BB2     		uxth	r3, r3
 1372 02a8 1380     		strh	r3, [r2]
ARM GAS  /tmp/ccrwP30Q.s 			page 44


 342:Src/main.c    ****     }
 1373              		.loc 1 342 7 is_stmt 1 view .LVU375
 342:Src/main.c    ****     }
 1374              		.loc 1 342 9 is_stmt 0 view .LVU376
 1375 02aa FA22     		movs	r2, #250
 1376 02ac D200     		lsls	r2, r2, #3
 1377 02ae 9342     		cmp	r3, r2
 1378 02b0 01D3     		bcc	.L43
 342:Src/main.c    ****     }
 1379              		.loc 1 342 29 is_stmt 1 discriminator 1 view .LVU377
 342:Src/main.c    ****     }
 1380              		.loc 1 342 35 is_stmt 0 discriminator 1 view .LVU378
 1381 02b2 1F4B     		ldr	r3, .L59+80
 1382 02b4 1A80     		strh	r2, [r3]
 1383              	.L43:
 345:Src/main.c    ****   } else {
 1384              		.loc 1 345 5 is_stmt 1 view .LVU379
 1385 02b6 244B     		ldr	r3, .L59+104
 1386 02b8 1B68     		ldr	r3, [r3]
 1387 02ba 1C4A     		ldr	r2, .L59+76
 1388 02bc 1821     		movs	r1, #24
 1389 02be 525E     		ldrsh	r2, [r2, r1]
 1390 02c0 5A63     		str	r2, [r3, #52]
 1391              	.L44:
 350:Src/main.c    **** }
 1392              		.loc 1 350 3 view .LVU380
 1393 02c2 214B     		ldr	r3, .L59+104
 1394 02c4 1B68     		ldr	r3, [r3]
 1395 02c6 FA22     		movs	r2, #250
 1396 02c8 1201     		lsls	r2, r2, #4
 1397 02ca 1A64     		str	r2, [r3, #64]
 351:Src/main.c    **** 
 1398              		.loc 1 351 1 is_stmt 0 view .LVU381
 1399              		@ sp needed
 1400 02cc C0BC     		pop	{r6, r7}
 1401 02ce B946     		mov	r9, r7
 1402 02d0 B046     		mov	r8, r6
 1403 02d2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1404              	.L25:
 347:Src/main.c    ****   }
 1405              		.loc 1 347 5 is_stmt 1 view .LVU382
 347:Src/main.c    ****   }
 1406              		.loc 1 347 14 is_stmt 0 view .LVU383
 1407 02d4 094A     		ldr	r2, .L59+28
 1408 02d6 2523     		movs	r3, #37
 1409 02d8 0021     		movs	r1, #0
 1410 02da D154     		strb	r1, [r2, r3]
 1411 02dc F1E7     		b	.L44
 1412              	.L60:
 1413 02de C046     		.align	2
 1414              	.L59:
 1415 02e0 00000000 		.word	.LANCHOR5
 1416 02e4 00FEAF40 		.word	1085275648
 1417 02e8 66666666 		.word	1717986918
 1418 02ec 66660A40 		.word	1074423398
 1419 02f0 0000E03F 		.word	1071644672
 1420 02f4 7B14AE47 		.word	1202590843
ARM GAS  /tmp/ccrwP30Q.s 			page 45


 1421 02f8 E17A843F 		.word	1065646817
 1422 02fc 00000000 		.word	.LANCHOR6
 1423 0300 00000000 		.word	.LANCHOR7
 1424 0304 00007A44 		.word	1148846080
 1425 0308 66661A40 		.word	1075471974
 1426 030c A4707D3F 		.word	1065185444
 1427 0310 25068195 		.word	-1786706395
 1428 0314 438BFA3F 		.word	1073384259
 1429 0318 B81E85EB 		.word	-343597384
 1430 031c 51B8E63F 		.word	1072085073
 1431 0320 E07A843F 		.word	1065646816
 1432 0324 00D7233C 		.word	1008981760
 1433 0328 00007041 		.word	1097859072
 1434 032c 00000000 		.word	.LANCHOR8
 1435 0330 00000000 		.word	.LANCHOR9
 1436 0334 00004041 		.word	1094713344
 1437 0338 FCA9F1D2 		.word	-755914244
 1438 033c 4D62503F 		.word	1062232653
 1439 0340 0000C842 		.word	1120403456
 1440 0344 00000000 		.word	.LANCHOR10
 1441 0348 00000000 		.word	.LANCHOR3
 1442              		.cfi_endproc
 1443              	.LFE39:
 1445              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1446              		.align	1
 1447              		.global	HAL_TIM_PeriodElapsedCallback
 1448              		.syntax unified
 1449              		.code	16
 1450              		.thumb_func
 1451              		.fpu softvfp
 1453              	HAL_TIM_PeriodElapsedCallback:
 1454              	.LVL85:
 1455              	.LFB40:
 354:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 1456              		.loc 1 354 1 is_stmt 1 view -0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 354:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 1460              		.loc 1 354 1 is_stmt 0 view .LVU385
 1461 0000 10B5     		push	{r4, lr}
 1462              	.LCFI14:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 4, -8
 1465              		.cfi_offset 14, -4
 355:Src/main.c    ****   {
 1466              		.loc 1 355 3 is_stmt 1 view .LVU386
 355:Src/main.c    ****   {
 1467              		.loc 1 355 6 is_stmt 0 view .LVU387
 1468 0002 094B     		ldr	r3, .L64
 1469 0004 1B68     		ldr	r3, [r3]
 355:Src/main.c    ****   {
 1470              		.loc 1 355 5 view .LVU388
 1471 0006 002B     		cmp	r3, #0
 1472 0008 00D1     		bne	.L63
 1473              	.LVL86:
 1474              	.L61:
ARM GAS  /tmp/ccrwP30Q.s 			page 46


 362:Src/main.c    **** 
 1475              		.loc 1 362 1 view .LVU389
 1476              		@ sp needed
 1477 000a 10BD     		pop	{r4, pc}
 1478              	.LVL87:
 1479              	.L63:
 357:Src/main.c    **** 
 1480              		.loc 1 357 5 is_stmt 1 view .LVU390
 357:Src/main.c    **** 
 1481              		.loc 1 357 17 is_stmt 0 view .LVU391
 1482 000c 064B     		ldr	r3, .L64
 1483 000e 0022     		movs	r2, #0
 1484 0010 1A60     		str	r2, [r3]
 359:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 1485              		.loc 1 359 5 is_stmt 1 view .LVU392
 1486 0012 8032     		adds	r2, r2, #128
 1487 0014 054C     		ldr	r4, .L64+4
 1488 0016 9200     		lsls	r2, r2, #2
 1489 0018 0549     		ldr	r1, .L64+8
 1490 001a 2000     		movs	r0, r4
 1491              	.LVL88:
 359:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 1492              		.loc 1 359 5 is_stmt 0 view .LVU393
 1493 001c FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 1494              	.LVL89:
 360:Src/main.c    ****   }
 1495              		.loc 1 360 5 is_stmt 1 view .LVU394
 1496 0020 2000     		movs	r0, r4
 1497 0022 FFF7FEFF 		bl	USBD_CDC_TransmitPacket
 1498              	.LVL90:
 362:Src/main.c    **** 
 1499              		.loc 1 362 1 is_stmt 0 view .LVU395
 1500 0026 F0E7     		b	.L61
 1501              	.L65:
 1502              		.align	2
 1503              	.L64:
 1504 0028 00000000 		.word	.LANCHOR11
 1505 002c 00000000 		.word	USBD_Device
 1506 0030 00000000 		.word	UserTxBuffer
 1507              		.cfi_endproc
 1508              	.LFE40:
 1510              		.global	__aeabi_f2uiz
 1511              		.section	.rodata.USB_printfloat.str1.4,"aMS",%progbits,1
 1512              		.align	2
 1513              	.LC16:
 1514 0000 25642E25 		.ascii	"%d.%d \015\012\000"
 1514      64200D0A 
 1514      00
 1515              		.section	.text.USB_printfloat,"ax",%progbits
 1516              		.align	1
 1517              		.global	USB_printfloat
 1518              		.syntax unified
 1519              		.code	16
 1520              		.thumb_func
 1521              		.fpu softvfp
 1523              	USB_printfloat:
 1524              	.LVL91:
ARM GAS  /tmp/ccrwP30Q.s 			page 47


 1525              	.LFB41:
 364:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 1526              		.loc 1 364 32 is_stmt 1 view -0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 364:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 1530              		.loc 1 364 32 is_stmt 0 view .LVU397
 1531 0000 70B5     		push	{r4, r5, r6, lr}
 1532              	.LCFI15:
 1533              		.cfi_def_cfa_offset 16
 1534              		.cfi_offset 4, -16
 1535              		.cfi_offset 5, -12
 1536              		.cfi_offset 6, -8
 1537              		.cfi_offset 14, -4
 1538 0002 051C     		adds	r5, r0, #0
 365:Src/main.c    ****   sprintf((char * restrict) UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_
 1539              		.loc 1 365 3 is_stmt 1 view .LVU398
 1540 0004 104E     		ldr	r6, .L67
 1541 0006 8022     		movs	r2, #128
 1542 0008 9200     		lsls	r2, r2, #2
 1543 000a 0021     		movs	r1, #0
 1544 000c 3000     		movs	r0, r6
 1545              	.LVL92:
 365:Src/main.c    ****   sprintf((char * restrict) UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_
 1546              		.loc 1 365 3 is_stmt 0 view .LVU399
 1547 000e FFF7FEFF 		bl	memset
 1548              	.LVL93:
 366:Src/main.c    ****   sendDataUSB = 1;
 1549              		.loc 1 366 3 is_stmt 1 view .LVU400
 366:Src/main.c    ****   sendDataUSB = 1;
 1550              		.loc 1 366 57 is_stmt 0 view .LVU401
 1551 0012 281C     		adds	r0, r5, #0
 1552 0014 FFF7FEFF 		bl	__aeabi_f2uiz
 1553              	.LVL94:
 1554 0018 84B2     		uxth	r4, r0
 366:Src/main.c    ****   sendDataUSB = 1;
 1555              		.loc 1 366 88 view .LVU402
 1556 001a 2000     		movs	r0, r4
 1557 001c FFF7FEFF 		bl	__aeabi_i2f
 1558              	.LVL95:
 1559 0020 011C     		adds	r1, r0, #0
 1560 0022 281C     		adds	r0, r5, #0
 1561 0024 FFF7FEFF 		bl	__aeabi_fsub
 1562              	.LVL96:
 366:Src/main.c    ****   sendDataUSB = 1;
 1563              		.loc 1 366 104 view .LVU403
 1564 0028 0849     		ldr	r1, .L67+4
 1565 002a FFF7FEFF 		bl	__aeabi_fmul
 1566              	.LVL97:
 366:Src/main.c    ****   sendDataUSB = 1;
 1567              		.loc 1 366 72 view .LVU404
 1568 002e FFF7FEFF 		bl	__aeabi_f2uiz
 1569              	.LVL98:
 1570 0032 83B2     		uxth	r3, r0
 366:Src/main.c    ****   sendDataUSB = 1;
 1571              		.loc 1 366 3 view .LVU405
ARM GAS  /tmp/ccrwP30Q.s 			page 48


 1572 0034 2200     		movs	r2, r4
 1573 0036 0649     		ldr	r1, .L67+8
 1574 0038 3000     		movs	r0, r6
 1575 003a FFF7FEFF 		bl	sprintf
 1576              	.LVL99:
 367:Src/main.c    **** }
 1577              		.loc 1 367 3 is_stmt 1 view .LVU406
 367:Src/main.c    **** }
 1578              		.loc 1 367 15 is_stmt 0 view .LVU407
 1579 003e 054B     		ldr	r3, .L67+12
 1580 0040 0122     		movs	r2, #1
 1581 0042 1A60     		str	r2, [r3]
 368:Src/main.c    **** 
 1582              		.loc 1 368 1 view .LVU408
 1583              		@ sp needed
 1584              	.LVL100:
 368:Src/main.c    **** 
 1585              		.loc 1 368 1 view .LVU409
 1586 0044 70BD     		pop	{r4, r5, r6, pc}
 1587              	.L68:
 1588 0046 C046     		.align	2
 1589              	.L67:
 1590 0048 00000000 		.word	UserTxBuffer
 1591 004c 00002041 		.word	1092616192
 1592 0050 00000000 		.word	.LC16
 1593 0054 00000000 		.word	.LANCHOR11
 1594              		.cfi_endproc
 1595              	.LFE41:
 1597              		.section	.text.read_stusb_rdo,"ax",%progbits
 1598              		.align	1
 1599              		.global	read_stusb_rdo
 1600              		.syntax unified
 1601              		.code	16
 1602              		.thumb_func
 1603              		.fpu softvfp
 1605              	read_stusb_rdo:
 1606              	.LFB42:
 406:Src/main.c    ****   HAL_StatusTypeDef ret;
 1607              		.loc 1 406 27 is_stmt 1 view -0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 1611 0000 10B5     		push	{r4, lr}
 1612              	.LCFI16:
 1613              		.cfi_def_cfa_offset 8
 1614              		.cfi_offset 4, -8
 1615              		.cfi_offset 14, -4
 1616 0002 84B0     		sub	sp, sp, #16
 1617              	.LCFI17:
 1618              		.cfi_def_cfa_offset 24
 407:Src/main.c    ****   /* uint8_t pdo_count = 0; */
 1619              		.loc 1 407 3 view .LVU411
 409:Src/main.c    ****   /* ret = HAL_I2C_Mem_Read(&hi2c1, (0x28 << 1), (uint16_t) DPM_PDO_NUMB, I2C_MEMADD_SIZE_8BIT, &pd
 1620              		.loc 1 409 3 view .LVU412
 409:Src/main.c    ****   /* ret = HAL_I2C_Mem_Read(&hi2c1, (0x28 << 1), (uint16_t) DPM_PDO_NUMB, I2C_MEMADD_SIZE_8BIT, &pd
 1621              		.loc 1 409 9 is_stmt 0 view .LVU413
 1622 0004 0A23     		movs	r3, #10
ARM GAS  /tmp/ccrwP30Q.s 			page 49


 1623 0006 0293     		str	r3, [sp, #8]
 1624 0008 063B     		subs	r3, r3, #6
 1625 000a 0193     		str	r3, [sp, #4]
 1626 000c 114B     		ldr	r3, .L72
 1627 000e 0093     		str	r3, [sp]
 1628 0010 0123     		movs	r3, #1
 1629 0012 9122     		movs	r2, #145
 1630 0014 5021     		movs	r1, #80
 1631 0016 1048     		ldr	r0, .L72+4
 1632 0018 FFF7FEFF 		bl	HAL_I2C_Mem_Read
 1633              	.LVL101:
 412:Src/main.c    ****     s.imax = (float) Nego_RDO.b.MaxCurrent / 100.0;
 1634              		.loc 1 412 3 is_stmt 1 view .LVU414
 412:Src/main.c    ****     s.imax = (float) Nego_RDO.b.MaxCurrent / 100.0;
 1635              		.loc 1 412 6 is_stmt 0 view .LVU415
 1636 001c 0028     		cmp	r0, #0
 1637 001e 11D1     		bne	.L70
 413:Src/main.c    ****     s.pdo = Nego_RDO.b.Object_Pos;
 1638              		.loc 1 413 5 is_stmt 1 view .LVU416
 413:Src/main.c    ****     s.pdo = Nego_RDO.b.Object_Pos;
 1639              		.loc 1 413 32 is_stmt 0 view .LVU417
 1640 0020 0C4C     		ldr	r4, .L72
 1641 0022 2088     		ldrh	r0, [r4]
 1642              	.LVL102:
 413:Src/main.c    ****     s.pdo = Nego_RDO.b.Object_Pos;
 1643              		.loc 1 413 32 view .LVU418
 1644 0024 8005     		lsls	r0, r0, #22
 1645 0026 800D     		lsrs	r0, r0, #22
 413:Src/main.c    ****     s.pdo = Nego_RDO.b.Object_Pos;
 1646              		.loc 1 413 14 view .LVU419
 1647 0028 FFF7FEFF 		bl	__aeabi_ui2f
 1648              	.LVL103:
 413:Src/main.c    ****     s.pdo = Nego_RDO.b.Object_Pos;
 1649              		.loc 1 413 44 view .LVU420
 1650 002c 0B49     		ldr	r1, .L72+8
 1651 002e FFF7FEFF 		bl	__aeabi_fdiv
 1652              	.LVL104:
 413:Src/main.c    ****     s.pdo = Nego_RDO.b.Object_Pos;
 1653              		.loc 1 413 12 view .LVU421
 1654 0032 0B4A     		ldr	r2, .L72+12
 1655 0034 5061     		str	r0, [r2, #20]
 414:Src/main.c    ****   } else {
 1656              		.loc 1 414 5 is_stmt 1 view .LVU422
 414:Src/main.c    ****   } else {
 1657              		.loc 1 414 23 is_stmt 0 view .LVU423
 1658 0036 E378     		ldrb	r3, [r4, #3]
 1659 0038 5B06     		lsls	r3, r3, #25
 1660 003a 5B0F     		lsrs	r3, r3, #29
 414:Src/main.c    ****   } else {
 1661              		.loc 1 414 11 view .LVU424
 1662 003c 2621     		movs	r1, #38
 1663 003e 5354     		strb	r3, [r2, r1]
 1664              	.L69:
 419:Src/main.c    **** 
 1665              		.loc 1 419 1 view .LVU425
 1666 0040 04B0     		add	sp, sp, #16
 1667              		@ sp needed
ARM GAS  /tmp/ccrwP30Q.s 			page 50


 1668 0042 10BD     		pop	{r4, pc}
 1669              	.LVL105:
 1670              	.L70:
 416:Src/main.c    ****     s.pdo = 0;
 1671              		.loc 1 416 5 is_stmt 1 view .LVU426
 416:Src/main.c    ****     s.pdo = 0;
 1672              		.loc 1 416 12 is_stmt 0 view .LVU427
 1673 0044 064B     		ldr	r3, .L72+12
 1674 0046 0022     		movs	r2, #0
 1675 0048 5A61     		str	r2, [r3, #20]
 417:Src/main.c    ****   }
 1676              		.loc 1 417 5 is_stmt 1 view .LVU428
 417:Src/main.c    ****   }
 1677              		.loc 1 417 11 is_stmt 0 view .LVU429
 1678 004a 2622     		movs	r2, #38
 1679 004c 0021     		movs	r1, #0
 1680 004e 9954     		strb	r1, [r3, r2]
 419:Src/main.c    **** 
 1681              		.loc 1 419 1 view .LVU430
 1682 0050 F6E7     		b	.L69
 1683              	.L73:
 1684 0052 C046     		.align	2
 1685              	.L72:
 1686 0054 00000000 		.word	.LANCHOR12
 1687 0058 00000000 		.word	.LANCHOR1
 1688 005c 0000C842 		.word	1120403456
 1689 0060 00000000 		.word	.LANCHOR6
 1690              		.cfi_endproc
 1691              	.LFE42:
 1693              		.section	.text.disp_init,"ax",%progbits
 1694              		.align	1
 1695              		.global	disp_init
 1696              		.syntax unified
 1697              		.code	16
 1698              		.thumb_func
 1699              		.fpu softvfp
 1701              	disp_init:
 1702              	.LFB43:
 422:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 1703              		.loc 1 422 22 is_stmt 1 view -0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 1707 0000 10B5     		push	{r4, lr}
 1708              	.LCFI18:
 1709              		.cfi_def_cfa_offset 8
 1710              		.cfi_offset 4, -8
 1711              		.cfi_offset 14, -4
 1712 0002 82B0     		sub	sp, sp, #8
 1713              	.LCFI19:
 1714              		.cfi_def_cfa_offset 16
 423:Src/main.c    ****   uint16_t _cnt = 0;
 1715              		.loc 1 423 3 view .LVU432
 1716 0004 104A     		ldr	r2, .L78
 1717 0006 114B     		ldr	r3, .L78+4
 1718 0008 13CB     		ldmia	r3!, {r0, r1, r4}
 1719 000a 13C2     		stmia	r2!, {r0, r1, r4}
ARM GAS  /tmp/ccrwP30Q.s 			page 51


 1720 000c 1100     		movs	r1, r2
 1721 000e 1A68     		ldr	r2, [r3]
 1722 0010 0A60     		str	r2, [r1]
 1723 0012 1B79     		ldrb	r3, [r3, #4]
 1724 0014 0B71     		strb	r3, [r1, #4]
 424:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1725              		.loc 1 424 3 view .LVU433
 1726              	.LVL106:
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1727              		.loc 1 425 3 view .LVU434
 424:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1728              		.loc 1 424 12 is_stmt 0 view .LVU435
 1729 0016 0024     		movs	r4, #0
 1730              	.LVL107:
 1731              	.L75:
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1732              		.loc 1 425 9 is_stmt 1 discriminator 1 view .LVU436
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1733              		.loc 1 425 10 is_stmt 0 discriminator 1 view .LVU437
 1734 0018 0D48     		ldr	r0, .L78+8
 1735 001a FFF7FEFF 		bl	HAL_I2C_GetState
 1736              	.LVL108:
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1737              		.loc 1 425 9 discriminator 1 view .LVU438
 1738 001e 2028     		cmp	r0, #32
 1739 0020 06D0     		beq	.L76
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1740              		.loc 1 425 59 is_stmt 1 discriminator 2 view .LVU439
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1741              		.loc 1 425 67 is_stmt 0 discriminator 2 view .LVU440
 1742 0022 631C     		adds	r3, r4, #1
 1743 0024 9BB2     		uxth	r3, r3
 1744              	.LVL109:
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1745              		.loc 1 425 62 discriminator 2 view .LVU441
 1746 0026 0B4A     		ldr	r2, .L78+12
 1747 0028 9442     		cmp	r4, r2
 1748 002a 01D8     		bhi	.L76
 425:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1749              		.loc 1 425 67 view .LVU442
 1750 002c 1C00     		movs	r4, r3
 1751 002e F3E7     		b	.L75
 1752              	.LVL110:
 1753              	.L76:
 426:Src/main.c    **** }
 1754              		.loc 1 426 3 is_stmt 1 view .LVU443
 1755 0030 FA23     		movs	r3, #250
 1756 0032 9B00     		lsls	r3, r3, #2
 1757 0034 0093     		str	r3, [sp]
 1758 0036 3223     		movs	r3, #50
 1759 0038 074A     		ldr	r2, .L78+16
 1760 003a 7821     		movs	r1, #120
 1761 003c 0448     		ldr	r0, .L78+8
 1762 003e FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1763              	.LVL111:
 427:Src/main.c    **** 
 1764              		.loc 1 427 1 is_stmt 0 view .LVU444
ARM GAS  /tmp/ccrwP30Q.s 			page 52


 1765 0042 02B0     		add	sp, sp, #8
 1766              		@ sp needed
 1767 0044 10BD     		pop	{r4, pc}
 1768              	.L79:
 1769 0046 C046     		.align	2
 1770              	.L78:
 1771 0048 00000000 		.word	screenBuffer
 1772 004c 00000000 		.word	.LANCHOR13
 1773 0050 00000000 		.word	.LANCHOR1
 1774 0054 10270000 		.word	10000
 1775 0058 00000000 		.word	.LANCHOR14
 1776              		.cfi_endproc
 1777              	.LFE43:
 1779              		.section	.text.refresh,"ax",%progbits
 1780              		.align	1
 1781              		.global	refresh
 1782              		.syntax unified
 1783              		.code	16
 1784              		.thumb_func
 1785              		.fpu softvfp
 1787              	refresh:
 1788              	.LFB44:
 429:Src/main.c    ****   uint16_t _cnt = 0;
 1789              		.loc 1 429 20 is_stmt 1 view -0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 0
 1792              		@ frame_needed = 0, uses_anonymous_args = 0
 1793 0000 10B5     		push	{r4, lr}
 1794              	.LCFI20:
 1795              		.cfi_def_cfa_offset 8
 1796              		.cfi_offset 4, -8
 1797              		.cfi_offset 14, -4
 1798 0002 82B0     		sub	sp, sp, #8
 1799              	.LCFI21:
 1800              		.cfi_def_cfa_offset 16
 430:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1801              		.loc 1 430 3 view .LVU446
 1802              	.LVL112:
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1803              		.loc 1 431 3 view .LVU447
 430:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1804              		.loc 1 430 12 is_stmt 0 view .LVU448
 1805 0004 0024     		movs	r4, #0
 1806              	.LVL113:
 1807              	.L81:
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1808              		.loc 1 431 9 is_stmt 1 discriminator 1 view .LVU449
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1809              		.loc 1 431 10 is_stmt 0 discriminator 1 view .LVU450
 1810 0006 0B48     		ldr	r0, .L84
 1811 0008 FFF7FEFF 		bl	HAL_I2C_GetState
 1812              	.LVL114:
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1813              		.loc 1 431 9 discriminator 1 view .LVU451
 1814 000c 2028     		cmp	r0, #32
 1815 000e 06D0     		beq	.L82
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
ARM GAS  /tmp/ccrwP30Q.s 			page 53


 1816              		.loc 1 431 59 is_stmt 1 discriminator 2 view .LVU452
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1817              		.loc 1 431 67 is_stmt 0 discriminator 2 view .LVU453
 1818 0010 631C     		adds	r3, r4, #1
 1819 0012 9BB2     		uxth	r3, r3
 1820              	.LVL115:
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1821              		.loc 1 431 62 discriminator 2 view .LVU454
 1822 0014 084A     		ldr	r2, .L84+4
 1823 0016 9442     		cmp	r4, r2
 1824 0018 01D8     		bhi	.L82
 431:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1825              		.loc 1 431 67 view .LVU455
 1826 001a 1C00     		movs	r4, r3
 1827 001c F3E7     		b	.L81
 1828              	.LVL116:
 1829              	.L82:
 432:Src/main.c    **** }
 1830              		.loc 1 432 3 is_stmt 1 view .LVU456
 1831 001e FA23     		movs	r3, #250
 1832 0020 9B00     		lsls	r3, r3, #2
 1833 0022 0093     		str	r3, [sp]
 1834 0024 D123     		movs	r3, #209
 1835 0026 054A     		ldr	r2, .L84+8
 1836 0028 7821     		movs	r1, #120
 1837 002a 0248     		ldr	r0, .L84
 1838 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1839              	.LVL117:
 433:Src/main.c    **** 
 1840              		.loc 1 433 1 is_stmt 0 view .LVU457
 1841 0030 02B0     		add	sp, sp, #8
 1842              		@ sp needed
 1843 0032 10BD     		pop	{r4, pc}
 1844              	.L85:
 1845              		.align	2
 1846              	.L84:
 1847 0034 00000000 		.word	.LANCHOR1
 1848 0038 10270000 		.word	10000
 1849 003c 00000000 		.word	screenBuffer
 1850              		.cfi_endproc
 1851              	.LFE44:
 1853              		.section	.text.clear_screen,"ax",%progbits
 1854              		.align	1
 1855              		.global	clear_screen
 1856              		.syntax unified
 1857              		.code	16
 1858              		.thumb_func
 1859              		.fpu softvfp
 1861              	clear_screen:
 1862              	.LFB45:
 435:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 1863              		.loc 1 435 25 is_stmt 1 view -0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867 0000 10B5     		push	{r4, lr}
 1868              	.LCFI22:
ARM GAS  /tmp/ccrwP30Q.s 			page 54


 1869              		.cfi_def_cfa_offset 8
 1870              		.cfi_offset 4, -8
 1871              		.cfi_offset 14, -4
 436:Src/main.c    **** }
 1872              		.loc 1 436 3 view .LVU459
 1873 0002 C022     		movs	r2, #192
 1874 0004 0021     		movs	r1, #0
 1875 0006 0248     		ldr	r0, .L87
 1876 0008 FFF7FEFF 		bl	memset
 1877              	.LVL118:
 437:Src/main.c    **** void set_screen(void) {
 1878              		.loc 1 437 1 is_stmt 0 view .LVU460
 1879              		@ sp needed
 1880 000c 10BD     		pop	{r4, pc}
 1881              	.L88:
 1882 000e C046     		.align	2
 1883              	.L87:
 1884 0010 11000000 		.word	screenBuffer+17
 1885              		.cfi_endproc
 1886              	.LFE45:
 1888              		.section	.text.set_screen,"ax",%progbits
 1889              		.align	1
 1890              		.global	set_screen
 1891              		.syntax unified
 1892              		.code	16
 1893              		.thumb_func
 1894              		.fpu softvfp
 1896              	set_screen:
 1897              	.LFB46:
 438:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 1898              		.loc 1 438 23 is_stmt 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902 0000 10B5     		push	{r4, lr}
 1903              	.LCFI23:
 1904              		.cfi_def_cfa_offset 8
 1905              		.cfi_offset 4, -8
 1906              		.cfi_offset 14, -4
 439:Src/main.c    **** }
 1907              		.loc 1 439 3 view .LVU462
 1908 0002 C022     		movs	r2, #192
 1909 0004 FF21     		movs	r1, #255
 1910 0006 0248     		ldr	r0, .L90
 1911 0008 FFF7FEFF 		bl	memset
 1912              	.LVL119:
 440:Src/main.c    **** 
 1913              		.loc 1 440 1 is_stmt 0 view .LVU463
 1914              		@ sp needed
 1915 000c 10BD     		pop	{r4, pc}
 1916              	.L91:
 1917 000e C046     		.align	2
 1918              	.L90:
 1919 0010 11000000 		.word	screenBuffer+17
 1920              		.cfi_endproc
 1921              	.LFE46:
 1923              		.section	.text.write_pixel,"ax",%progbits
ARM GAS  /tmp/ccrwP30Q.s 			page 55


 1924              		.align	1
 1925              		.global	write_pixel
 1926              		.syntax unified
 1927              		.code	16
 1928              		.thumb_func
 1929              		.fpu softvfp
 1931              	write_pixel:
 1932              	.LVL120:
 1933              	.LFB48:
 448:Src/main.c    ****   if(x>95 || y >15){
 1934              		.loc 1 448 54 is_stmt 1 view -0
 1935              		.cfi_startproc
 1936              		@ args = 0, pretend = 0, frame = 0
 1937              		@ frame_needed = 0, uses_anonymous_args = 0
 448:Src/main.c    ****   if(x>95 || y >15){
 1938              		.loc 1 448 54 is_stmt 0 view .LVU465
 1939 0000 30B5     		push	{r4, r5, lr}
 1940              	.LCFI24:
 1941              		.cfi_def_cfa_offset 12
 1942              		.cfi_offset 4, -12
 1943              		.cfi_offset 5, -8
 1944              		.cfi_offset 14, -4
 449:Src/main.c    ****     return;
 1945              		.loc 1 449 3 is_stmt 1 view .LVU466
 449:Src/main.c    ****     return;
 1946              		.loc 1 449 5 is_stmt 0 view .LVU467
 1947 0002 5F28     		cmp	r0, #95
 1948 0004 32DC     		bgt	.L92
 449:Src/main.c    ****     return;
 1949              		.loc 1 449 11 discriminator 1 view .LVU468
 1950 0006 0F29     		cmp	r1, #15
 1951 0008 30DC     		bgt	.L92
 452:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1952              		.loc 1 452 3 is_stmt 1 view .LVU469
 452:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1953              		.loc 1 452 5 is_stmt 0 view .LVU470
 1954 000a 012A     		cmp	r2, #1
 1955 000c 18D0     		beq	.L95
 454:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1956              		.loc 1 454 10 is_stmt 1 view .LVU471
 454:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1957              		.loc 1 454 13 is_stmt 0 view .LVU472
 1958 000e 002A     		cmp	r2, #0
 1959 0010 2CD1     		bne	.L92
 455:Src/main.c    ****   }
 1960              		.loc 1 455 5 is_stmt 1 view .LVU473
 455:Src/main.c    ****   }
 1961              		.loc 1 455 56 is_stmt 0 view .LVU474
 1962 0012 CD17     		asrs	r5, r1, #31
 1963 0014 0732     		adds	r2, r2, #7
 1964              	.LVL121:
 455:Src/main.c    ****   }
 1965              		.loc 1 455 56 view .LVU475
 1966 0016 1300     		movs	r3, r2
 1967 0018 2B40     		ands	r3, r5
 1968 001a 5B18     		adds	r3, r3, r1
 1969 001c DC10     		asrs	r4, r3, #3
ARM GAS  /tmp/ccrwP30Q.s 			page 56


 1970 001e 6300     		lsls	r3, r4, #1
 1971 0020 1B19     		adds	r3, r3, r4
 1972 0022 5B01     		lsls	r3, r3, #5
 1973 0024 1818     		adds	r0, r3, r0
 1974              	.LVL122:
 455:Src/main.c    ****   }
 1975              		.loc 1 455 56 view .LVU476
 1976 0026 1130     		adds	r0, r0, #17
 455:Src/main.c    ****   }
 1977              		.loc 1 455 68 view .LVU477
 1978 0028 6D0F     		lsrs	r5, r5, #29
 1979 002a 4919     		adds	r1, r1, r5
 1980              	.LVL123:
 455:Src/main.c    ****   }
 1981              		.loc 1 455 68 view .LVU478
 1982 002c 1140     		ands	r1, r2
 1983 002e 491B     		subs	r1, r1, r5
 1984 0030 09B2     		sxth	r1, r1
 455:Src/main.c    ****   }
 1985              		.loc 1 455 63 view .LVU479
 1986 0032 063A     		subs	r2, r2, #6
 1987 0034 8A40     		lsls	r2, r2, r1
 455:Src/main.c    ****   }
 1988              		.loc 1 455 56 view .LVU480
 1989 0036 0E49     		ldr	r1, .L96
 1990 0038 0B5C     		ldrb	r3, [r1, r0]
 1991 003a 9343     		bics	r3, r2
 1992 003c 0B54     		strb	r3, [r1, r0]
 1993 003e 15E0     		b	.L92
 1994              	.LVL124:
 1995              	.L95:
 453:Src/main.c    ****   } else if (color == 0){
 1996              		.loc 1 453 5 is_stmt 1 view .LVU481
 453:Src/main.c    ****   } else if (color == 0){
 1997              		.loc 1 453 56 is_stmt 0 view .LVU482
 1998 0040 CD17     		asrs	r5, r1, #31
 1999 0042 0632     		adds	r2, r2, #6
 2000              	.LVL125:
 453:Src/main.c    ****   } else if (color == 0){
 2001              		.loc 1 453 56 view .LVU483
 2002 0044 1300     		movs	r3, r2
 2003 0046 2B40     		ands	r3, r5
 2004 0048 5B18     		adds	r3, r3, r1
 2005 004a DC10     		asrs	r4, r3, #3
 2006 004c 6300     		lsls	r3, r4, #1
 2007 004e 1B19     		adds	r3, r3, r4
 2008 0050 5B01     		lsls	r3, r3, #5
 2009 0052 1818     		adds	r0, r3, r0
 2010              	.LVL126:
 453:Src/main.c    ****   } else if (color == 0){
 2011              		.loc 1 453 56 view .LVU484
 2012 0054 1130     		adds	r0, r0, #17
 453:Src/main.c    ****   } else if (color == 0){
 2013              		.loc 1 453 68 view .LVU485
 2014 0056 6D0F     		lsrs	r5, r5, #29
 2015 0058 4919     		adds	r1, r1, r5
 2016              	.LVL127:
ARM GAS  /tmp/ccrwP30Q.s 			page 57


 453:Src/main.c    ****   } else if (color == 0){
 2017              		.loc 1 453 68 view .LVU486
 2018 005a 1140     		ands	r1, r2
 2019 005c 491B     		subs	r1, r1, r5
 2020 005e 09B2     		sxth	r1, r1
 453:Src/main.c    ****   } else if (color == 0){
 2021              		.loc 1 453 63 view .LVU487
 2022 0060 063A     		subs	r2, r2, #6
 2023 0062 8A40     		lsls	r2, r2, r1
 453:Src/main.c    ****   } else if (color == 0){
 2024              		.loc 1 453 56 view .LVU488
 2025 0064 0249     		ldr	r1, .L96
 2026 0066 0B5C     		ldrb	r3, [r1, r0]
 2027 0068 1343     		orrs	r3, r2
 2028 006a 0B54     		strb	r3, [r1, r0]
 2029              	.L92:
 457:Src/main.c    **** 
 2030              		.loc 1 457 1 view .LVU489
 2031              		@ sp needed
 2032 006c 30BD     		pop	{r4, r5, pc}
 2033              	.L97:
 2034 006e C046     		.align	2
 2035              	.L96:
 2036 0070 00000000 		.word	screenBuffer
 2037              		.cfi_endproc
 2038              	.LFE48:
 2040              		.section	.text.draw_v_line,"ax",%progbits
 2041              		.align	1
 2042              		.global	draw_v_line
 2043              		.syntax unified
 2044              		.code	16
 2045              		.thumb_func
 2046              		.fpu softvfp
 2048              	draw_v_line:
 2049              	.LVL128:
 2050              	.LFB47:
 442:Src/main.c    ****   for(int i = 0; i <= h; i++){
 2051              		.loc 1 442 66 is_stmt 1 view -0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 0
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
 442:Src/main.c    ****   for(int i = 0; i <= h; i++){
 2055              		.loc 1 442 66 is_stmt 0 view .LVU491
 2056 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2057              	.LCFI25:
 2058              		.cfi_def_cfa_offset 20
 2059              		.cfi_offset 4, -20
 2060              		.cfi_offset 5, -16
 2061              		.cfi_offset 6, -12
 2062              		.cfi_offset 7, -8
 2063              		.cfi_offset 14, -4
 2064 0002 C646     		mov	lr, r8
 2065 0004 00B5     		push	{lr}
 2066              	.LCFI26:
 2067              		.cfi_def_cfa_offset 24
 2068              		.cfi_offset 8, -24
 2069 0006 8046     		mov	r8, r0
ARM GAS  /tmp/ccrwP30Q.s 			page 58


 2070 0008 0F00     		movs	r7, r1
 2071 000a 1500     		movs	r5, r2
 2072 000c 1E00     		movs	r6, r3
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2073              		.loc 1 443 3 is_stmt 1 view .LVU492
 2074              	.LBB22:
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2075              		.loc 1 443 7 view .LVU493
 2076              	.LVL129:
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2077              		.loc 1 443 11 is_stmt 0 view .LVU494
 2078 000e 0024     		movs	r4, #0
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2079              		.loc 1 443 3 view .LVU495
 2080 0010 06E0     		b	.L99
 2081              	.LVL130:
 2082              	.L100:
 444:Src/main.c    ****   }
 2083              		.loc 1 444 5 is_stmt 1 discriminator 3 view .LVU496
 444:Src/main.c    ****   }
 2084              		.loc 1 444 21 is_stmt 0 discriminator 3 view .LVU497
 2085 0012 E119     		adds	r1, r4, r7
 444:Src/main.c    ****   }
 2086              		.loc 1 444 5 discriminator 3 view .LVU498
 2087 0014 09B2     		sxth	r1, r1
 2088 0016 3200     		movs	r2, r6
 2089 0018 4046     		mov	r0, r8
 2090 001a FFF7FEFF 		bl	write_pixel
 2091              	.LVL131:
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2092              		.loc 1 443 26 is_stmt 1 discriminator 3 view .LVU499
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2093              		.loc 1 443 27 is_stmt 0 discriminator 3 view .LVU500
 2094 001e 0134     		adds	r4, r4, #1
 2095              	.LVL132:
 2096              	.L99:
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2097              		.loc 1 443 18 is_stmt 1 discriminator 1 view .LVU501
 443:Src/main.c    ****     write_pixel(x, y+i, color);
 2098              		.loc 1 443 3 is_stmt 0 discriminator 1 view .LVU502
 2099 0020 A542     		cmp	r5, r4
 2100 0022 F6DA     		bge	.L100
 2101              	.LBE22:
 446:Src/main.c    **** 
 2102              		.loc 1 446 1 view .LVU503
 2103              		@ sp needed
 2104              	.LVL133:
 446:Src/main.c    **** 
 2105              		.loc 1 446 1 view .LVU504
 2106 0024 80BC     		pop	{r7}
 2107 0026 B846     		mov	r8, r7
 2108 0028 F0BD     		pop	{r4, r5, r6, r7, pc}
 2109              		.cfi_endproc
 2110              	.LFE47:
 2112              		.section	.text.draw_char,"ax",%progbits
 2113              		.align	1
 2114              		.global	draw_char
ARM GAS  /tmp/ccrwP30Q.s 			page 59


 2115              		.syntax unified
 2116              		.code	16
 2117              		.thumb_func
 2118              		.fpu softvfp
 2120              	draw_char:
 2121              	.LVL134:
 2122              	.LFB49:
 461:Src/main.c    ****     c = c & 0x7F;
 2123              		.loc 1 461 75 is_stmt 1 view -0
 2124              		.cfi_startproc
 2125              		@ args = 0, pretend = 0, frame = 0
 2126              		@ frame_needed = 0, uses_anonymous_args = 0
 461:Src/main.c    ****     c = c & 0x7F;
 2127              		.loc 1 461 75 is_stmt 0 view .LVU506
 2128 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2129              	.LCFI27:
 2130              		.cfi_def_cfa_offset 20
 2131              		.cfi_offset 4, -20
 2132              		.cfi_offset 5, -16
 2133              		.cfi_offset 6, -12
 2134              		.cfi_offset 7, -8
 2135              		.cfi_offset 14, -4
 2136 0002 C646     		mov	lr, r8
 2137 0004 00B5     		push	{lr}
 2138              	.LCFI28:
 2139              		.cfi_def_cfa_offset 24
 2140              		.cfi_offset 8, -24
 2141 0006 0F00     		movs	r7, r1
 2142 0008 9046     		mov	r8, r2
 462:Src/main.c    ****     if (c < ' ') {
 2143              		.loc 1 462 5 is_stmt 1 view .LVU507
 462:Src/main.c    ****     if (c < ' ') {
 2144              		.loc 1 462 7 is_stmt 0 view .LVU508
 2145 000a 7F23     		movs	r3, #127
 2146              	.LVL135:
 462:Src/main.c    ****     if (c < ' ') {
 2147              		.loc 1 462 7 view .LVU509
 2148 000c 0340     		ands	r3, r0
 2149              	.LVL136:
 463:Src/main.c    ****         c = 0;
 2150              		.loc 1 463 5 is_stmt 1 view .LVU510
 2151 000e 6021     		movs	r1, #96
 2152              	.LVL137:
 463:Src/main.c    ****         c = 0;
 2153              		.loc 1 463 5 is_stmt 0 view .LVU511
 2154 0010 0A00     		movs	r2, r1
 2155              	.LVL138:
 463:Src/main.c    ****         c = 0;
 2156              		.loc 1 463 5 view .LVU512
 2157 0012 0240     		ands	r2, r0
 463:Src/main.c    ****         c = 0;
 2158              		.loc 1 463 8 view .LVU513
 2159 0014 0142     		tst	r1, r0
 2160 0016 01D0     		beq	.L102
 466:Src/main.c    ****     }
 2161              		.loc 1 466 9 is_stmt 1 view .LVU514
 466:Src/main.c    ****     }
ARM GAS  /tmp/ccrwP30Q.s 			page 60


 2162              		.loc 1 466 11 is_stmt 0 view .LVU515
 2163 0018 203B     		subs	r3, r3, #32
 2164              	.LVL139:
 466:Src/main.c    ****     }
 2165              		.loc 1 466 11 view .LVU516
 2166 001a DAB2     		uxtb	r2, r3
 2167              	.LVL140:
 2168              	.L102:
 468:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 2169              		.loc 1 468 5 is_stmt 1 view .LVU517
 468:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 2170              		.loc 1 468 15 is_stmt 0 view .LVU518
 2171 001c 5600     		lsls	r6, r2, #1
 2172 001e B618     		adds	r6, r6, r2
 2173 0020 7600     		lsls	r6, r6, #1
 2174 0022 114B     		ldr	r3, .L111
 2175 0024 F618     		adds	r6, r6, r3
 2176              	.LVL141:
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2177              		.loc 1 469 5 is_stmt 1 view .LVU519
 2178              	.LBB23:
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2179              		.loc 1 469 10 view .LVU520
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2180              		.loc 1 469 18 is_stmt 0 view .LVU521
 2181 0026 0025     		movs	r5, #0
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2182              		.loc 1 469 5 view .LVU522
 2183 0028 16E0     		b	.L103
 2184              	.LVL142:
 2185              	.L104:
 2186              	.LBB24:
 474:Src/main.c    ****             }
 2187              		.loc 1 474 17 is_stmt 1 view .LVU523
 2188 002a 4346     		mov	r3, r8
 2189 002c 1919     		adds	r1, r3, r4
 2190 002e 7819     		adds	r0, r7, r5
 2191 0030 0022     		movs	r2, #0
 2192 0032 FFF7FEFF 		bl	write_pixel
 2193              	.LVL143:
 2194              	.L105:
 470:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2195              		.loc 1 470 42 discriminator 2 view .LVU524
 470:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2196              		.loc 1 470 43 is_stmt 0 discriminator 2 view .LVU525
 2197 0036 0134     		adds	r4, r4, #1
 2198              	.LVL144:
 470:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2199              		.loc 1 470 43 discriminator 2 view .LVU526
 2200 0038 E4B2     		uxtb	r4, r4
 2201              	.LVL145:
 2202              	.L107:
 470:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2203              		.loc 1 470 27 is_stmt 1 discriminator 1 view .LVU527
 470:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2204              		.loc 1 470 9 is_stmt 0 discriminator 1 view .LVU528
 2205 003a 072C     		cmp	r4, #7
ARM GAS  /tmp/ccrwP30Q.s 			page 61


 2206 003c 0AD8     		bhi	.L109
 471:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2207              		.loc 1 471 13 is_stmt 1 view .LVU529
 471:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2208              		.loc 1 471 20 is_stmt 0 view .LVU530
 2209 003e 735D     		ldrb	r3, [r6, r5]
 471:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2210              		.loc 1 471 17 view .LVU531
 2211 0040 2341     		asrs	r3, r3, r4
 471:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2212              		.loc 1 471 16 view .LVU532
 2213 0042 DB07     		lsls	r3, r3, #31
 2214 0044 F1D5     		bpl	.L104
 472:Src/main.c    ****             } else {
 2215              		.loc 1 472 17 is_stmt 1 view .LVU533
 2216 0046 4346     		mov	r3, r8
 2217 0048 1919     		adds	r1, r3, r4
 2218 004a 7819     		adds	r0, r7, r5
 2219 004c 0122     		movs	r2, #1
 2220 004e FFF7FEFF 		bl	write_pixel
 2221              	.LVL146:
 2222 0052 F0E7     		b	.L105
 2223              	.L109:
 472:Src/main.c    ****             } else {
 2224              		.loc 1 472 17 is_stmt 0 view .LVU534
 2225              	.LBE24:
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2226              		.loc 1 469 37 is_stmt 1 discriminator 2 view .LVU535
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2227              		.loc 1 469 38 is_stmt 0 discriminator 2 view .LVU536
 2228 0054 0135     		adds	r5, r5, #1
 2229              	.LVL147:
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2230              		.loc 1 469 38 discriminator 2 view .LVU537
 2231 0056 EDB2     		uxtb	r5, r5
 2232              	.LVL148:
 2233              	.L103:
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2234              		.loc 1 469 23 is_stmt 1 discriminator 1 view .LVU538
 469:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2235              		.loc 1 469 5 is_stmt 0 discriminator 1 view .LVU539
 2236 0058 052D     		cmp	r5, #5
 2237 005a 01D8     		bhi	.L110
 2238              	.LBB25:
 470:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2239              		.loc 1 470 22 view .LVU540
 2240 005c 0024     		movs	r4, #0
 2241 005e ECE7     		b	.L107
 2242              	.L110:
 2243              	.LBE25:
 2244              	.LBE23:
 478:Src/main.c    **** 
 2245              		.loc 1 478 1 view .LVU541
 2246              		@ sp needed
 2247              	.LVL149:
 2248              	.LVL150:
 478:Src/main.c    **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 62


 2249              		.loc 1 478 1 view .LVU542
 2250 0060 80BC     		pop	{r7}
 2251 0062 B846     		mov	r8, r7
 2252 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 2253              	.L112:
 2254 0066 C046     		.align	2
 2255              	.L111:
 2256 0068 00000000 		.word	font
 2257              		.cfi_endproc
 2258              	.LFE49:
 2260              		.section	.text.draw_string,"ax",%progbits
 2261              		.align	1
 2262              		.global	draw_string
 2263              		.syntax unified
 2264              		.code	16
 2265              		.thumb_func
 2266              		.fpu softvfp
 2268              	draw_string:
 2269              	.LVL151:
 2270              	.LFB50:
 480:Src/main.c    ****     while (*str) {
 2271              		.loc 1 480 86 is_stmt 1 view -0
 2272              		.cfi_startproc
 2273              		@ args = 0, pretend = 0, frame = 0
 2274              		@ frame_needed = 0, uses_anonymous_args = 0
 480:Src/main.c    ****     while (*str) {
 2275              		.loc 1 480 86 is_stmt 0 view .LVU544
 2276 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2277              	.LCFI29:
 2278              		.cfi_def_cfa_offset 24
 2279              		.cfi_offset 3, -24
 2280              		.cfi_offset 4, -20
 2281              		.cfi_offset 5, -16
 2282              		.cfi_offset 6, -12
 2283              		.cfi_offset 7, -8
 2284              		.cfi_offset 14, -4
 2285 0002 0500     		movs	r5, r0
 2286 0004 0C00     		movs	r4, r1
 2287 0006 1700     		movs	r7, r2
 2288 0008 1E00     		movs	r6, r3
 481:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2289              		.loc 1 481 5 is_stmt 1 view .LVU545
 481:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2290              		.loc 1 481 11 is_stmt 0 view .LVU546
 2291 000a 07E0     		b	.L114
 2292              	.LVL152:
 2293              	.L115:
 482:Src/main.c    ****         x += CHAR_WIDTH;
 2294              		.loc 1 482 9 is_stmt 1 view .LVU547
 482:Src/main.c    ****         x += CHAR_WIDTH;
 2295              		.loc 1 482 23 is_stmt 0 view .LVU548
 2296 000c 0135     		adds	r5, r5, #1
 2297              	.LVL153:
 482:Src/main.c    ****         x += CHAR_WIDTH;
 2298              		.loc 1 482 9 view .LVU549
 2299 000e 3300     		movs	r3, r6
 2300 0010 3A00     		movs	r2, r7
ARM GAS  /tmp/ccrwP30Q.s 			page 63


 2301 0012 2100     		movs	r1, r4
 2302 0014 FFF7FEFF 		bl	draw_char
 2303              	.LVL154:
 483:Src/main.c    ****     }
 2304              		.loc 1 483 9 is_stmt 1 view .LVU550
 483:Src/main.c    ****     }
 2305              		.loc 1 483 11 is_stmt 0 view .LVU551
 2306 0018 0634     		adds	r4, r4, #6
 2307              	.LVL155:
 483:Src/main.c    ****     }
 2308              		.loc 1 483 11 view .LVU552
 2309 001a E4B2     		uxtb	r4, r4
 2310              	.LVL156:
 2311              	.L114:
 481:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2312              		.loc 1 481 11 is_stmt 1 view .LVU553
 481:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2313              		.loc 1 481 12 is_stmt 0 view .LVU554
 2314 001c 2878     		ldrb	r0, [r5]
 481:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2315              		.loc 1 481 11 view .LVU555
 2316 001e 0028     		cmp	r0, #0
 2317 0020 F4D1     		bne	.L115
 485:Src/main.c    **** 
 2318              		.loc 1 485 1 view .LVU556
 2319              		@ sp needed
 2320              	.LVL157:
 2321              	.LVL158:
 485:Src/main.c    **** 
 2322              		.loc 1 485 1 view .LVU557
 2323 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2324              		.cfi_endproc
 2325              	.LFE50:
 2327              		.section	.text.SystemClock_Config,"ax",%progbits
 2328              		.align	1
 2329              		.global	SystemClock_Config
 2330              		.syntax unified
 2331              		.code	16
 2332              		.thumb_func
 2333              		.fpu softvfp
 2335              	SystemClock_Config:
 2336              	.LFB51:
 488:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2337              		.loc 1 488 1 is_stmt 1 view -0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 96
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 2341 0000 10B5     		push	{r4, lr}
 2342              	.LCFI30:
 2343              		.cfi_def_cfa_offset 8
 2344              		.cfi_offset 4, -8
 2345              		.cfi_offset 14, -4
 2346 0002 98B0     		sub	sp, sp, #96
 2347              	.LCFI31:
 2348              		.cfi_def_cfa_offset 104
 489:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2349              		.loc 1 489 3 view .LVU559
ARM GAS  /tmp/ccrwP30Q.s 			page 64


 489:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2350              		.loc 1 489 22 is_stmt 0 view .LVU560
 2351 0004 3422     		movs	r2, #52
 2352 0006 0021     		movs	r1, #0
 2353 0008 0BA8     		add	r0, sp, #44
 2354 000a FFF7FEFF 		bl	memset
 2355              	.LVL159:
 490:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2356              		.loc 1 490 3 is_stmt 1 view .LVU561
 490:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2357              		.loc 1 490 22 is_stmt 0 view .LVU562
 2358 000e 1024     		movs	r4, #16
 2359 0010 1022     		movs	r2, #16
 2360 0012 0021     		movs	r1, #0
 2361 0014 07A8     		add	r0, sp, #28
 2362 0016 FFF7FEFF 		bl	memset
 2363              	.LVL160:
 491:Src/main.c    **** 
 2364              		.loc 1 491 3 is_stmt 1 view .LVU563
 491:Src/main.c    **** 
 2365              		.loc 1 491 28 is_stmt 0 view .LVU564
 2366 001a 1C22     		movs	r2, #28
 2367 001c 0021     		movs	r1, #0
 2368 001e 6846     		mov	r0, sp
 2369 0020 FFF7FEFF 		bl	memset
 2370              	.LVL161:
 493:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 2371              		.loc 1 493 3 is_stmt 1 view .LVU565
 493:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 2372              		.loc 1 493 36 is_stmt 0 view .LVU566
 2373 0024 3223     		movs	r3, #50
 2374 0026 0B93     		str	r3, [sp, #44]
 495:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2375              		.loc 1 495 3 is_stmt 1 view .LVU567
 495:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2376              		.loc 1 495 30 is_stmt 0 view .LVU568
 2377 0028 313B     		subs	r3, r3, #49
 2378 002a 0E93     		str	r3, [sp, #56]
 496:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 2379              		.loc 1 496 3 is_stmt 1 view .LVU569
 496:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 2380              		.loc 1 496 32 is_stmt 0 view .LVU570
 2381 002c 1393     		str	r3, [sp, #76]
 497:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2382              		.loc 1 497 3 is_stmt 1 view .LVU571
 497:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2383              		.loc 1 497 32 is_stmt 0 view .LVU572
 2384 002e 1093     		str	r3, [sp, #64]
 498:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 2385              		.loc 1 498 3 is_stmt 1 view .LVU573
 498:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 2386              		.loc 1 498 41 is_stmt 0 view .LVU574
 2387 0030 0F94     		str	r4, [sp, #60]
 499:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2388              		.loc 1 499 3 is_stmt 1 view .LVU575
 499:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2389              		.loc 1 499 43 is_stmt 0 view .LVU576
ARM GAS  /tmp/ccrwP30Q.s 			page 65


 2390 0032 1194     		str	r4, [sp, #68]
 500:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 2391              		.loc 1 500 3 is_stmt 1 view .LVU577
 500:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 2392              		.loc 1 500 34 is_stmt 0 view .LVU578
 2393 0034 0E3C     		subs	r4, r4, #14
 2394 0036 1494     		str	r4, [sp, #80]
 501:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 2395              		.loc 1 501 3 is_stmt 1 view .LVU579
 501:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 2396              		.loc 1 501 35 is_stmt 0 view .LVU580
 2397 0038 C022     		movs	r2, #192
 2398 003a 5202     		lsls	r2, r2, #9
 2399 003c 1592     		str	r2, [sp, #84]
 502:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 2400              		.loc 1 502 3 is_stmt 1 view .LVU581
 503:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 2401              		.loc 1 503 3 view .LVU582
 503:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 2402              		.loc 1 503 32 is_stmt 0 view .LVU583
 2403 003e 1793     		str	r3, [sp, #92]
 504:Src/main.c    **** 
 2404              		.loc 1 504 3 is_stmt 1 view .LVU584
 2405 0040 0BA8     		add	r0, sp, #44
 2406 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2407              	.LVL162:
 506:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 2408              		.loc 1 506 3 view .LVU585
 506:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 2409              		.loc 1 506 31 is_stmt 0 view .LVU586
 2410 0046 0723     		movs	r3, #7
 2411 0048 0793     		str	r3, [sp, #28]
 508:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2412              		.loc 1 508 3 is_stmt 1 view .LVU587
 508:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2413              		.loc 1 508 34 is_stmt 0 view .LVU588
 2414 004a 0894     		str	r4, [sp, #32]
 509:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2415              		.loc 1 509 3 is_stmt 1 view .LVU589
 509:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2416              		.loc 1 509 35 is_stmt 0 view .LVU590
 2417 004c 0024     		movs	r4, #0
 2418 004e 0994     		str	r4, [sp, #36]
 510:Src/main.c    **** 
 2419              		.loc 1 510 3 is_stmt 1 view .LVU591
 510:Src/main.c    **** 
 2420              		.loc 1 510 36 is_stmt 0 view .LVU592
 2421 0050 0A94     		str	r4, [sp, #40]
 512:Src/main.c    **** 
 2422              		.loc 1 512 3 is_stmt 1 view .LVU593
 2423 0052 0121     		movs	r1, #1
 2424 0054 07A8     		add	r0, sp, #28
 2425 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2426              	.LVL163:
 514:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 2427              		.loc 1 514 3 view .LVU594
 514:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
ARM GAS  /tmp/ccrwP30Q.s 			page 66


 2428              		.loc 1 514 38 is_stmt 0 view .LVU595
 2429 005a 044B     		ldr	r3, .L117
 2430 005c 0093     		str	r3, [sp]
 515:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2431              		.loc 1 515 3 is_stmt 1 view .LVU596
 515:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2432              		.loc 1 515 36 is_stmt 0 view .LVU597
 2433 005e 0494     		str	r4, [sp, #16]
 516:Src/main.c    **** 
 2434              		.loc 1 516 3 is_stmt 1 view .LVU598
 516:Src/main.c    **** 
 2435              		.loc 1 516 35 is_stmt 0 view .LVU599
 2436 0060 0694     		str	r4, [sp, #24]
 518:Src/main.c    **** }
 2437              		.loc 1 518 3 is_stmt 1 view .LVU600
 2438 0062 6846     		mov	r0, sp
 2439 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2440              	.LVL164:
 519:Src/main.c    **** 
 2441              		.loc 1 519 1 is_stmt 0 view .LVU601
 2442 0068 18B0     		add	sp, sp, #96
 2443              		@ sp needed
 2444 006a 10BD     		pop	{r4, pc}
 2445              	.L118:
 2446              		.align	2
 2447              	.L117:
 2448 006c 20000200 		.word	131104
 2449              		.cfi_endproc
 2450              	.LFE51:
 2452              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2453              		.align	2
 2454              	.LC44:
 2455 0000 25642043 		.ascii	"%d C   \000"
 2455      20202000 
 2456              		.align	2
 2457              	.LC46:
 2458 0008 25642E25 		.ascii	"%d.%d C\000"
 2458      64204300 
 2459              		.align	2
 2460              	.LC48:
 2461 0010 25642E25 		.ascii	"%d.%d V\000"
 2461      64205600 
 2462              		.align	2
 2463              	.LC50:
 2464 0018 25642E25 		.ascii	"%d.%d A\000"
 2464      64204100 
 2465              		.align	2
 2466              	.LC52:
 2467 0020 50444F20 		.ascii	"PDO %d\000"
 2467      256400
 2468 0027 00       		.align	2
 2469              	.LC54:
 2470 0028 21414354 		.ascii	"!ACTV\000"
 2470      5600
 2471              		.section	.text.main,"ax",%progbits
 2472              		.align	1
 2473              		.global	main
ARM GAS  /tmp/ccrwP30Q.s 			page 67


 2474              		.syntax unified
 2475              		.code	16
 2476              		.thumb_func
 2477              		.fpu softvfp
 2479              	main:
 2480              	.LFB37:
 129:Src/main.c    ****   HAL_Init();
 2481              		.loc 1 129 1 is_stmt 1 view -0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 96
 2484              		@ frame_needed = 0, uses_anonymous_args = 0
 2485 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2486              	.LCFI32:
 2487              		.cfi_def_cfa_offset 20
 2488              		.cfi_offset 4, -20
 2489              		.cfi_offset 5, -16
 2490              		.cfi_offset 6, -12
 2491              		.cfi_offset 7, -8
 2492              		.cfi_offset 14, -4
 2493 0002 DE46     		mov	lr, fp
 2494 0004 5746     		mov	r7, r10
 2495 0006 4E46     		mov	r6, r9
 2496 0008 4546     		mov	r5, r8
 2497 000a E0B5     		push	{r5, r6, r7, lr}
 2498              	.LCFI33:
 2499              		.cfi_def_cfa_offset 36
 2500              		.cfi_offset 8, -36
 2501              		.cfi_offset 9, -32
 2502              		.cfi_offset 10, -28
 2503              		.cfi_offset 11, -24
 2504 000c 99B0     		sub	sp, sp, #100
 2505              	.LCFI34:
 2506              		.cfi_def_cfa_offset 136
 130:Src/main.c    **** 
 2507              		.loc 1 130 3 view .LVU603
 2508 000e FFF7FEFF 		bl	HAL_Init
 2509              	.LVL165:
 132:Src/main.c    **** 
 2510              		.loc 1 132 3 view .LVU604
 2511 0012 FFF7FEFF 		bl	SystemClock_Config
 2512              	.LVL166:
 134:Src/main.c    ****   MX_DMA_Init();
 2513              		.loc 1 134 3 view .LVU605
 2514 0016 FFF7FEFF 		bl	MX_GPIO_Init
 2515              	.LVL167:
 135:Src/main.c    ****   MX_ADC_Init();
 2516              		.loc 1 135 3 view .LVU606
 2517 001a FFF7FEFF 		bl	MX_DMA_Init
 2518              	.LVL168:
 136:Src/main.c    ****   MX_I2C1_Init();
 2519              		.loc 1 136 3 view .LVU607
 2520 001e FFF7FEFF 		bl	MX_ADC_Init
 2521              	.LVL169:
 137:Src/main.c    ****   /* MX_I2C2_Init(); */
 2522              		.loc 1 137 3 view .LVU608
 2523 0022 FFF7FEFF 		bl	MX_I2C1_Init
 2524              	.LVL170:
ARM GAS  /tmp/ccrwP30Q.s 			page 68


 139:Src/main.c    ****   TIM3_Init();
 2525              		.loc 1 139 3 view .LVU609
 2526 0026 FFF7FEFF 		bl	MX_TIM1_Init
 2527              	.LVL171:
 140:Src/main.c    **** 
 2528              		.loc 1 140 3 view .LVU610
 2529 002a FFF7FEFF 		bl	TIM3_Init
 2530              	.LVL172:
 142:Src/main.c    ****   disp_init();
 2531              		.loc 1 142 3 view .LVU611
 2532 002e 3220     		movs	r0, #50
 2533 0030 FFF7FEFF 		bl	HAL_Delay
 2534              	.LVL173:
 143:Src/main.c    ****   HAL_Delay(150);
 2535              		.loc 1 143 3 view .LVU612
 2536 0034 FFF7FEFF 		bl	disp_init
 2537              	.LVL174:
 144:Src/main.c    ****   clear_screen();
 2538              		.loc 1 144 3 view .LVU613
 2539 0038 9620     		movs	r0, #150
 2540 003a FFF7FEFF 		bl	HAL_Delay
 2541              	.LVL175:
 145:Src/main.c    **** 
 2542              		.loc 1 145 3 view .LVU614
 2543 003e FFF7FEFF 		bl	clear_screen
 2544              	.LVL176:
 147:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 2545              		.loc 1 147 3 view .LVU615
 2546 0042 EF4C     		ldr	r4, .L151
 2547 0044 0021     		movs	r1, #0
 2548 0046 2000     		movs	r0, r4
 2549 0048 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2550              	.LVL177:
 148:Src/main.c    **** 
 2551              		.loc 1 148 3 view .LVU616
 2552 004c 0C21     		movs	r1, #12
 2553 004e 2000     		movs	r0, r4
 2554 0050 FFF7FEFF 		bl	HAL_TIM_OC_Start
 2555              	.LVL178:
 150:Src/main.c    **** 
 2556              		.loc 1 150 3 view .LVU617
 2557 0054 0422     		movs	r2, #4
 2558 0056 EB49     		ldr	r1, .L151+4
 2559 0058 EB48     		ldr	r0, .L151+8
 2560 005a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2561              	.LVL179:
 153:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2562              		.loc 1 153 3 view .LVU618
 153:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2563              		.loc 1 153 6 is_stmt 0 view .LVU619
 2564 005e 9020     		movs	r0, #144
 2565 0060 0821     		movs	r1, #8
 2566 0062 C005     		lsls	r0, r0, #23
 2567 0064 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2568              	.LVL180:
 153:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2569              		.loc 1 153 5 view .LVU620
ARM GAS  /tmp/ccrwP30Q.s 			page 69


 2570 0068 0028     		cmp	r0, #0
 2571 006a 06D0     		beq	.L120
 153:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2572              		.loc 1 153 40 discriminator 1 view .LVU621
 2573 006c 9020     		movs	r0, #144
 2574 006e 1021     		movs	r1, #16
 2575 0070 C005     		lsls	r0, r0, #23
 2576 0072 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2577              	.LVL181:
 153:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2578              		.loc 1 153 37 discriminator 1 view .LVU622
 2579 0076 0028     		cmp	r0, #0
 2580 0078 3FD1     		bne	.L144
 2581              	.L120:
 161:Src/main.c    ****     draw_string(by_string, 10, 9 ,1);
 2582              		.loc 1 161 5 is_stmt 1 view .LVU623
 2583 007a E44B     		ldr	r3, .L151+12
 2584 007c 1868     		ldr	r0, [r3]
 2585 007e 0123     		movs	r3, #1
 2586 0080 0122     		movs	r2, #1
 2587 0082 0F21     		movs	r1, #15
 2588 0084 FFF7FEFF 		bl	draw_string
 2589              	.LVL182:
 162:Src/main.c    ****     refresh();
 2590              		.loc 1 162 5 view .LVU624
 2591 0088 E14B     		ldr	r3, .L151+16
 2592 008a 1868     		ldr	r0, [r3]
 2593 008c 0123     		movs	r3, #1
 2594 008e 0922     		movs	r2, #9
 2595 0090 0A21     		movs	r1, #10
 2596 0092 FFF7FEFF 		bl	draw_string
 2597              	.LVL183:
 163:Src/main.c    ****     HAL_Delay(1000);
 2598              		.loc 1 163 5 view .LVU625
 2599 0096 FFF7FEFF 		bl	refresh
 2600              	.LVL184:
 164:Src/main.c    ****     clear_screen();
 2601              		.loc 1 164 5 view .LVU626
 2602 009a FA24     		movs	r4, #250
 2603 009c A400     		lsls	r4, r4, #2
 2604 009e 2000     		movs	r0, r4
 2605 00a0 FFF7FEFF 		bl	HAL_Delay
 2606              	.LVL185:
 165:Src/main.c    ****     draw_string(assembly_string, 14, 1 ,1);
 2607              		.loc 1 165 5 view .LVU627
 2608 00a4 FFF7FEFF 		bl	clear_screen
 2609              	.LVL186:
 166:Src/main.c    ****     draw_string(jbr_string, 8, 9 ,1);
 2610              		.loc 1 166 5 view .LVU628
 2611 00a8 DA4B     		ldr	r3, .L151+20
 2612 00aa 1868     		ldr	r0, [r3]
 2613 00ac 0123     		movs	r3, #1
 2614 00ae 0122     		movs	r2, #1
 2615 00b0 0E21     		movs	r1, #14
 2616 00b2 FFF7FEFF 		bl	draw_string
 2617              	.LVL187:
 167:Src/main.c    ****     refresh();
ARM GAS  /tmp/ccrwP30Q.s 			page 70


 2618              		.loc 1 167 5 view .LVU629
 2619 00b6 D84B     		ldr	r3, .L151+24
 2620 00b8 1868     		ldr	r0, [r3]
 2621 00ba 0123     		movs	r3, #1
 2622 00bc 0922     		movs	r2, #9
 2623 00be 0821     		movs	r1, #8
 2624 00c0 FFF7FEFF 		bl	draw_string
 2625              	.LVL188:
 168:Src/main.c    **** #ifdef ENABLESERIAL
 2626              		.loc 1 168 5 view .LVU630
 2627 00c4 FFF7FEFF 		bl	refresh
 2628              	.LVL189:
 178:Src/main.c    **** #endif
 2629              		.loc 1 178 7 view .LVU631
 178:Src/main.c    **** #endif
 2630              		.loc 1 178 17 is_stmt 0 view .LVU632
 2631 00c8 D44A     		ldr	r2, .L151+28
 2632 00ca 2423     		movs	r3, #36
 2633 00cc 1421     		movs	r1, #20
 2634 00ce D154     		strb	r1, [r2, r3]
 182:Src/main.c    ****   MX_IWDG_Init();
 2635              		.loc 1 182 3 is_stmt 1 view .LVU633
 2636 00d0 2000     		movs	r0, r4
 2637 00d2 FFF7FEFF 		bl	HAL_Delay
 2638              	.LVL190:
 183:Src/main.c    **** 
 2639              		.loc 1 183 3 view .LVU634
 2640 00d6 FFF7FEFF 		bl	MX_IWDG_Init
 2641              	.LVL191:
 185:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 2642              		.loc 1 185 3 view .LVU635
 185:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 2643              		.loc 1 185 14 is_stmt 0 view .LVU636
 2644 00da D14B     		ldr	r3, .L151+32
 2645 00dc 1888     		ldrh	r0, [r3]
 185:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 2646              		.loc 1 185 12 view .LVU637
 2647 00de FFF7FEFF 		bl	__aeabi_ui2f
 2648              	.LVL192:
 2649 00e2 D04B     		ldr	r3, .L151+36
 2650 00e4 1860     		str	r0, [r3]
 186:Src/main.c    **** 
 2651              		.loc 1 186 3 is_stmt 1 view .LVU638
 186:Src/main.c    **** 
 2652              		.loc 1 186 6 is_stmt 0 view .LVU639
 2653 00e6 D049     		ldr	r1, .L151+40
 2654 00e8 FFF7FEFF 		bl	__aeabi_fcmpge
 2655              	.LVL193:
 2656 00ec 0028     		cmp	r0, #0
 2657 00ee 00D1     		bne	.LCB2170
 2658 00f0 0CE2     		b	.L138	@long jump
 2659              	.LCB2170:
 186:Src/main.c    **** 
 2660              		.loc 1 186 24 is_stmt 1 discriminator 1 view .LVU640
 186:Src/main.c    **** 
 2661              		.loc 1 186 33 is_stmt 0 discriminator 1 view .LVU641
 2662 00f2 CC4B     		ldr	r3, .L151+36
ARM GAS  /tmp/ccrwP30Q.s 			page 71


 2663 00f4 CD4A     		ldr	r2, .L151+44
 2664 00f6 1A60     		str	r2, [r3]
 2665 00f8 08E2     		b	.L138
 2666              	.L144:
 154:Src/main.c    ****     draw_string(dfu_string, 1, 8 ,1);
 2667              		.loc 1 154 5 is_stmt 1 view .LVU642
 2668 00fa CD4C     		ldr	r4, .L151+48
 2669 00fc 0123     		movs	r3, #1
 2670 00fe 1A00     		movs	r2, r3
 2671 0100 1900     		movs	r1, r3
 2672 0102 2068     		ldr	r0, [r4]
 2673 0104 FFF7FEFF 		bl	draw_string
 2674              	.LVL194:
 155:Src/main.c    ****     refresh();
 2675              		.loc 1 155 5 view .LVU643
 2676 0108 0123     		movs	r3, #1
 2677 010a 0822     		movs	r2, #8
 2678 010c 1900     		movs	r1, r3
 2679 010e 2068     		ldr	r0, [r4]
 2680 0110 FFF7FEFF 		bl	draw_string
 2681              	.LVL195:
 156:Src/main.c    ****     HAL_Delay(40);
 2682              		.loc 1 156 5 view .LVU644
 2683 0114 FFF7FEFF 		bl	refresh
 2684              	.LVL196:
 157:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 2685              		.loc 1 157 5 view .LVU645
 2686 0118 2820     		movs	r0, #40
 2687 011a FFF7FEFF 		bl	HAL_Delay
 2688              	.LVL197:
 158:Src/main.c    ****     NVIC_SystemReset();
 2689              		.loc 1 158 5 view .LVU646
 158:Src/main.c    ****     NVIC_SystemReset();
 2690              		.loc 1 158 36 is_stmt 0 view .LVU647
 2691 011e C54B     		ldr	r3, .L151+52
 2692 0120 C54A     		ldr	r2, .L151+56
 2693 0122 1A60     		str	r2, [r3]
 159:Src/main.c    ****   } else {
 2694              		.loc 1 159 5 is_stmt 1 view .LVU648
 2695              	.LBB36:
 2696              	.LBI36:
 2697              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
ARM GAS  /tmp/ccrwP30Q.s 			page 72


  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 73


  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccrwP30Q.s 			page 74


 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccrwP30Q.s 			page 75


 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 76


 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
ARM GAS  /tmp/ccrwP30Q.s 			page 77


 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccrwP30Q.s 			page 78


 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 79


 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 80


 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 81


 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
ARM GAS  /tmp/ccrwP30Q.s 			page 82


 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
ARM GAS  /tmp/ccrwP30Q.s 			page 83


 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/ccrwP30Q.s 			page 84


 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 2698              		.loc 2 730 22 view .LVU649
 2699              	.LBB37:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 2700              		.loc 2 732 3 view .LVU650
 2701              	.LBB38:
 2702              	.LBI38:
 2703              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
ARM GAS  /tmp/ccrwP30Q.s 			page 85


  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccrwP30Q.s 			page 86


  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
ARM GAS  /tmp/ccrwP30Q.s 			page 87


 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccrwP30Q.s 			page 88


 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
ARM GAS  /tmp/ccrwP30Q.s 			page 89


 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 90


 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
ARM GAS  /tmp/ccrwP30Q.s 			page 91


 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccrwP30Q.s 			page 92


 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 2704              		.loc 3 427 53 view .LVU651
 2705              	.LBB39:
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2706              		.loc 3 429 3 view .LVU652
 2707              		.syntax divided
 2708              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2709 0124 BFF34F8F 		dsb 0xF
 2710              	@ 0 "" 2
 2711              		.thumb
 2712              		.syntax unified
 2713              	.LBE39:
 2714              	.LBE38:
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 2715              		.loc 2 734 3 view .LVU653
 2716              		.loc 2 734 15 is_stmt 0 view .LVU654
 2717 0128 C44B     		ldr	r3, .L151+60
 2718 012a C54A     		ldr	r2, .L151+64
 2719 012c DA60     		str	r2, [r3, #12]
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 2720              		.loc 2 736 3 is_stmt 1 view .LVU655
 2721              	.LBB40:
 2722              	.LBI40:
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2723              		.loc 3 427 53 view .LVU656
 2724              	.LBB41:
 2725              		.loc 3 429 3 view .LVU657
 2726              		.syntax divided
 2727              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2728 012e BFF34F8F 		dsb 0xF
 2729              	@ 0 "" 2
 2730              		.thumb
 2731              		.syntax unified
 2732              	.L121:
 2733              	.LBE41:
 2734              	.LBE40:
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 2735              		.loc 2 738 3 view .LVU658
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 2736              		.loc 2 740 5 view .LVU659
 2737              	.LBB42:
 2738              	.LBI42:
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccrwP30Q.s 			page 93


 2739              		.loc 3 373 53 view .LVU660
 2740              	.LBB43:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2741              		.loc 3 375 3 view .LVU661
 2742              		.syntax divided
 2743              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2744 0132 C046     		nop
 2745              	@ 0 "" 2
 2746              		.thumb
 2747              		.syntax unified
 2748 0134 FDE7     		b	.L121
 2749              	.L149:
 2750              	.LBE43:
 2751              	.LBE42:
 2752              	.LBE37:
 2753              	.LBE36:
 2754              	.LBB44:
 197:Src/main.c    ****       s.writeFlash = 1;
 2755              		.loc 1 197 7 view .LVU662
 197:Src/main.c    ****       s.writeFlash = 1;
 2756              		.loc 1 197 16 is_stmt 0 view .LVU663
 2757 0136 BB4C     		ldr	r4, .L151+36
 2758 0138 C249     		ldr	r1, .L151+68
 2759 013a 2068     		ldr	r0, [r4]
 2760 013c FFF7FEFF 		bl	__aeabi_fsub
 2761              	.LVL198:
 2762 0140 2060     		str	r0, [r4]
 198:Src/main.c    ****       HAL_Delay(40);
 2763              		.loc 1 198 7 is_stmt 1 view .LVU664
 198:Src/main.c    ****       HAL_Delay(40);
 2764              		.loc 1 198 20 is_stmt 0 view .LVU665
 2765 0142 B64B     		ldr	r3, .L151+28
 2766 0144 0122     		movs	r2, #1
 2767 0146 1A77     		strb	r2, [r3, #28]
 199:Src/main.c    ****     }
 2768              		.loc 1 199 7 is_stmt 1 view .LVU666
 2769 0148 2820     		movs	r0, #40
 2770 014a FFF7FEFF 		bl	HAL_Delay
 2771              	.LVL199:
 2772 014e F8E1     		b	.L124
 2773              	.L150:
 203:Src/main.c    ****       s.writeFlash = 1;
 2774              		.loc 1 203 7 view .LVU667
 203:Src/main.c    ****       s.writeFlash = 1;
 2775              		.loc 1 203 16 is_stmt 0 view .LVU668
 2776 0150 B44C     		ldr	r4, .L151+36
 2777 0152 BC49     		ldr	r1, .L151+68
 2778 0154 2068     		ldr	r0, [r4]
 2779 0156 FFF7FEFF 		bl	__aeabi_fadd
 2780              	.LVL200:
 2781 015a 2060     		str	r0, [r4]
 204:Src/main.c    ****       HAL_Delay(40);
 2782              		.loc 1 204 7 is_stmt 1 view .LVU669
 204:Src/main.c    ****       HAL_Delay(40);
 2783              		.loc 1 204 20 is_stmt 0 view .LVU670
 2784 015c AF4B     		ldr	r3, .L151+28
 2785 015e 0122     		movs	r2, #1
ARM GAS  /tmp/ccrwP30Q.s 			page 94


 2786 0160 1A77     		strb	r2, [r3, #28]
 205:Src/main.c    ****     }
 2787              		.loc 1 205 7 is_stmt 1 view .LVU671
 2788 0162 2820     		movs	r0, #40
 2789 0164 FFF7FEFF 		bl	HAL_Delay
 2790              	.LVL201:
 2791 0168 F0E1     		b	.L125
 2792              	.L139:
 208:Src/main.c    **** 
 2793              		.loc 1 208 16 is_stmt 0 view .LVU672
 2794 016a AF4C     		ldr	r4, .L151+40
 2795              	.L126:
 208:Src/main.c    **** 
 2796              		.loc 1 208 14 discriminator 8 view .LVU673
 2797 016c AD4B     		ldr	r3, .L151+36
 2798 016e 1C60     		str	r4, [r3]
 210:Src/main.c    ****       HAL_FLASH_Unlock();
 2799              		.loc 1 210 5 is_stmt 1 discriminator 8 view .LVU674
 210:Src/main.c    ****       HAL_FLASH_Unlock();
 2800              		.loc 1 210 9 is_stmt 0 discriminator 8 view .LVU675
 2801 0170 AA4B     		ldr	r3, .L151+28
 2802 0172 1B7F     		ldrb	r3, [r3, #28]
 210:Src/main.c    ****       HAL_FLASH_Unlock();
 2803              		.loc 1 210 7 discriminator 8 view .LVU676
 2804 0174 012B     		cmp	r3, #1
 2805 0176 00D1     		bne	.LCB2288
 2806 0178 28E1     		b	.L145	@long jump
 2807              	.LCB2288:
 2808              	.L128:
 234:Src/main.c    ****     unsigned char str2[14] = "          ";
 2809              		.loc 1 234 5 is_stmt 1 view .LVU677
 234:Src/main.c    ****     unsigned char str2[14] = "          ";
 2810              		.loc 1 234 19 is_stmt 0 view .LVU678
 2811 017a 6F46     		mov	r7, sp
 2812 017c B24C     		ldr	r4, .L151+72
 2813 017e 3B00     		movs	r3, r7
 2814 0180 2500     		movs	r5, r4
 2815 0182 06CD     		ldmia	r5!, {r1, r2}
 2816 0184 06C3     		stmia	r3!, {r1, r2}
 2817 0186 2A88     		ldrh	r2, [r5]
 2818 0188 1A80     		strh	r2, [r3]
 2819 018a AA78     		ldrb	r2, [r5, #2]
 2820 018c 9A70     		strb	r2, [r3, #2]
 2821 018e 0322     		movs	r2, #3
 2822 0190 0021     		movs	r1, #0
 2823 0192 0B20     		movs	r0, #11
 2824 0194 6844     		add	r0, r0, sp
 2825 0196 FFF7FEFF 		bl	memset
 2826              	.LVL202:
 235:Src/main.c    ****     unsigned char str3[14] = "          ";
 2827              		.loc 1 235 5 is_stmt 1 view .LVU679
 235:Src/main.c    ****     unsigned char str3[14] = "          ";
 2828              		.loc 1 235 19 is_stmt 0 view .LVU680
 2829 019a 04AB     		add	r3, sp, #16
 2830 019c 9A46     		mov	r10, r3
 2831 019e 2200     		movs	r2, r4
 2832 01a0 03CA     		ldmia	r2!, {r0, r1}
ARM GAS  /tmp/ccrwP30Q.s 			page 95


 2833 01a2 03C3     		stmia	r3!, {r0, r1}
 2834 01a4 2A88     		ldrh	r2, [r5]
 2835 01a6 1A80     		strh	r2, [r3]
 2836 01a8 AA78     		ldrb	r2, [r5, #2]
 2837 01aa 9A70     		strb	r2, [r3, #2]
 2838 01ac 0322     		movs	r2, #3
 2839 01ae 0021     		movs	r1, #0
 2840 01b0 1B20     		movs	r0, #27
 2841 01b2 6844     		add	r0, r0, sp
 2842 01b4 FFF7FEFF 		bl	memset
 2843              	.LVL203:
 236:Src/main.c    ****     unsigned char str4[14] = "          ";
 2844              		.loc 1 236 5 is_stmt 1 view .LVU681
 236:Src/main.c    ****     unsigned char str4[14] = "          ";
 2845              		.loc 1 236 19 is_stmt 0 view .LVU682
 2846 01b8 08AB     		add	r3, sp, #32
 2847 01ba 9946     		mov	r9, r3
 2848 01bc 2200     		movs	r2, r4
 2849 01be 03CA     		ldmia	r2!, {r0, r1}
 2850 01c0 03C3     		stmia	r3!, {r0, r1}
 2851 01c2 2A88     		ldrh	r2, [r5]
 2852 01c4 1A80     		strh	r2, [r3]
 2853 01c6 AA78     		ldrb	r2, [r5, #2]
 2854 01c8 9A70     		strb	r2, [r3, #2]
 2855 01ca 0322     		movs	r2, #3
 2856 01cc 0021     		movs	r1, #0
 2857 01ce 2B20     		movs	r0, #43
 2858 01d0 6844     		add	r0, r0, sp
 2859 01d2 FFF7FEFF 		bl	memset
 2860              	.LVL204:
 237:Src/main.c    ****     unsigned char str5[14] = "          ";
 2861              		.loc 1 237 5 is_stmt 1 view .LVU683
 237:Src/main.c    ****     unsigned char str5[14] = "          ";
 2862              		.loc 1 237 19 is_stmt 0 view .LVU684
 2863 01d6 0CAB     		add	r3, sp, #48
 2864 01d8 9846     		mov	r8, r3
 2865 01da 2200     		movs	r2, r4
 2866 01dc 03CA     		ldmia	r2!, {r0, r1}
 2867 01de 03C3     		stmia	r3!, {r0, r1}
 2868 01e0 2A88     		ldrh	r2, [r5]
 2869 01e2 1A80     		strh	r2, [r3]
 2870 01e4 AA78     		ldrb	r2, [r5, #2]
 2871 01e6 9A70     		strb	r2, [r3, #2]
 2872 01e8 0322     		movs	r2, #3
 2873 01ea 0021     		movs	r1, #0
 2874 01ec 3B20     		movs	r0, #59
 2875 01ee 6844     		add	r0, r0, sp
 2876 01f0 FFF7FEFF 		bl	memset
 2877              	.LVL205:
 238:Src/main.c    ****     unsigned char str6[14] = "          ";
 2878              		.loc 1 238 5 is_stmt 1 view .LVU685
 238:Src/main.c    ****     unsigned char str6[14] = "          ";
 2879              		.loc 1 238 19 is_stmt 0 view .LVU686
 2880 01f4 10AB     		add	r3, sp, #64
 2881 01f6 2200     		movs	r2, r4
 2882 01f8 03CA     		ldmia	r2!, {r0, r1}
 2883 01fa 03C3     		stmia	r3!, {r0, r1}
ARM GAS  /tmp/ccrwP30Q.s 			page 96


 2884 01fc 2A88     		ldrh	r2, [r5]
 2885 01fe 1A80     		strh	r2, [r3]
 2886 0200 AA78     		ldrb	r2, [r5, #2]
 2887 0202 9A70     		strb	r2, [r3, #2]
 2888 0204 0322     		movs	r2, #3
 2889 0206 0021     		movs	r1, #0
 2890 0208 4B20     		movs	r0, #75
 2891 020a 6844     		add	r0, r0, sp
 2892 020c FFF7FEFF 		bl	memset
 2893              	.LVL206:
 239:Src/main.c    ****     sprintf((char * restrict) str1, "%d C   ", (uint16_t)r.target);
 2894              		.loc 1 239 5 is_stmt 1 view .LVU687
 239:Src/main.c    ****     sprintf((char * restrict) str1, "%d C   ", (uint16_t)r.target);
 2895              		.loc 1 239 19 is_stmt 0 view .LVU688
 2896 0210 14AE     		add	r6, sp, #80
 2897 0212 3300     		movs	r3, r6
 2898 0214 06CC     		ldmia	r4!, {r1, r2}
 2899 0216 06C3     		stmia	r3!, {r1, r2}
 2900 0218 2A88     		ldrh	r2, [r5]
 2901 021a 1A80     		strh	r2, [r3]
 2902 021c AA78     		ldrb	r2, [r5, #2]
 2903 021e 9A70     		strb	r2, [r3, #2]
 2904 0220 0322     		movs	r2, #3
 2905 0222 0021     		movs	r1, #0
 2906 0224 5B20     		movs	r0, #91
 2907 0226 6844     		add	r0, r0, sp
 2908 0228 FFF7FEFF 		bl	memset
 2909              	.LVL207:
 240:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2910              		.loc 1 240 5 is_stmt 1 view .LVU689
 240:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2911              		.loc 1 240 59 is_stmt 0 view .LVU690
 2912 022c 7D4B     		ldr	r3, .L151+36
 2913 022e 1868     		ldr	r0, [r3]
 240:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2914              		.loc 1 240 48 view .LVU691
 2915 0230 FFF7FEFF 		bl	__aeabi_f2uiz
 2916              	.LVL208:
 2917 0234 82B2     		uxth	r2, r0
 240:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2918              		.loc 1 240 5 view .LVU692
 2919 0236 8549     		ldr	r1, .L151+76
 2920 0238 3800     		movs	r0, r7
 2921 023a FFF7FEFF 		bl	sprintf
 2922              	.LVL209:
 241:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2923              		.loc 1 241 5 is_stmt 1 view .LVU693
 241:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2924              		.loc 1 241 59 is_stmt 0 view .LVU694
 2925 023e 774C     		ldr	r4, .L151+28
 2926 0240 6368     		ldr	r3, [r4, #4]
 2927 0242 9B46     		mov	fp, r3
 241:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2928              		.loc 1 241 48 view .LVU695
 2929 0244 181C     		adds	r0, r3, #0
 2930 0246 FFF7FEFF 		bl	__aeabi_f2uiz
 2931              	.LVL210:
ARM GAS  /tmp/ccrwP30Q.s 			page 97


 2932 024a 83B2     		uxth	r3, r0
 2933 024c 1D00     		movs	r5, r3
 241:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2934              		.loc 1 241 89 view .LVU696
 2935 024e 1800     		movs	r0, r3
 2936 0250 FFF7FEFF 		bl	__aeabi_i2f
 2937              	.LVL211:
 2938 0254 011C     		adds	r1, r0, #0
 2939 0256 5846     		mov	r0, fp
 2940 0258 FFF7FEFF 		bl	__aeabi_fsub
 2941              	.LVL212:
 241:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2942              		.loc 1 241 110 view .LVU697
 2943 025c 7C49     		ldr	r1, .L151+80
 2944 025e FFF7FEFF 		bl	__aeabi_fmul
 2945              	.LVL213:
 241:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2946              		.loc 1 241 68 view .LVU698
 2947 0262 FFF7FEFF 		bl	__aeabi_f2uiz
 2948              	.LVL214:
 2949 0266 83B2     		uxth	r3, r0
 241:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2950              		.loc 1 241 5 view .LVU699
 2951 0268 2A00     		movs	r2, r5
 2952 026a 7A49     		ldr	r1, .L151+84
 2953 026c 5046     		mov	r0, r10
 2954 026e FFF7FEFF 		bl	sprintf
 2955              	.LVL215:
 242:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2956              		.loc 1 242 5 is_stmt 1 view .LVU700
 242:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2957              		.loc 1 242 59 is_stmt 0 view .LVU701
 2958 0272 A368     		ldr	r3, [r4, #8]
 2959 0274 9B46     		mov	fp, r3
 242:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2960              		.loc 1 242 48 view .LVU702
 2961 0276 181C     		adds	r0, r3, #0
 2962 0278 FFF7FEFF 		bl	__aeabi_f2uiz
 2963              	.LVL216:
 2964 027c 83B2     		uxth	r3, r0
 2965 027e 9A46     		mov	r10, r3
 242:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2966              		.loc 1 242 81 view .LVU703
 2967 0280 1800     		movs	r0, r3
 2968 0282 FFF7FEFF 		bl	__aeabi_i2f
 2969              	.LVL217:
 2970 0286 011C     		adds	r1, r0, #0
 2971 0288 5846     		mov	r0, fp
 2972 028a FFF7FEFF 		bl	__aeabi_fsub
 2973              	.LVL218:
 242:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2974              		.loc 1 242 98 view .LVU704
 2975 028e 7049     		ldr	r1, .L151+80
 2976 0290 FFF7FEFF 		bl	__aeabi_fmul
 2977              	.LVL219:
 242:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2978              		.loc 1 242 64 view .LVU705
ARM GAS  /tmp/ccrwP30Q.s 			page 98


 2979 0294 FFF7FEFF 		bl	__aeabi_f2uiz
 2980              	.LVL220:
 2981 0298 83B2     		uxth	r3, r0
 242:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2982              		.loc 1 242 5 view .LVU706
 2983 029a 5246     		mov	r2, r10
 2984 029c 6E49     		ldr	r1, .L151+88
 2985 029e 4846     		mov	r0, r9
 2986 02a0 FFF7FEFF 		bl	sprintf
 2987              	.LVL221:
 243:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 2988              		.loc 1 243 5 is_stmt 1 view .LVU707
 243:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 2989              		.loc 1 243 59 is_stmt 0 view .LVU708
 2990 02a4 2369     		ldr	r3, [r4, #16]
 2991 02a6 9A46     		mov	r10, r3
 243:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 2992              		.loc 1 243 48 view .LVU709
 2993 02a8 181C     		adds	r0, r3, #0
 2994 02aa FFF7FEFF 		bl	__aeabi_f2uiz
 2995              	.LVL222:
 2996 02ae 83B2     		uxth	r3, r0
 2997 02b0 9946     		mov	r9, r3
 243:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 2998              		.loc 1 243 87 view .LVU710
 2999 02b2 1800     		movs	r0, r3
 3000 02b4 FFF7FEFF 		bl	__aeabi_i2f
 3001              	.LVL223:
 3002 02b8 011C     		adds	r1, r0, #0
 3003 02ba 5046     		mov	r0, r10
 3004 02bc FFF7FEFF 		bl	__aeabi_fsub
 3005              	.LVL224:
 243:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 3006              		.loc 1 243 107 view .LVU711
 3007 02c0 6349     		ldr	r1, .L151+80
 3008 02c2 FFF7FEFF 		bl	__aeabi_fmul
 3009              	.LVL225:
 243:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 3010              		.loc 1 243 67 view .LVU712
 3011 02c6 FFF7FEFF 		bl	__aeabi_f2uiz
 3012              	.LVL226:
 3013 02ca 83B2     		uxth	r3, r0
 243:Src/main.c    ****     sprintf((char * restrict) str5, "%d.%d A", (uint16_t)s.imax,(uint16_t)((s.imax-(uint16_t)s.imax
 3014              		.loc 1 243 5 view .LVU713
 3015 02cc 634A     		ldr	r2, .L151+92
 3016 02ce 9246     		mov	r10, r2
 3017 02d0 4A46     		mov	r2, r9
 3018 02d2 5146     		mov	r1, r10
 3019 02d4 4046     		mov	r0, r8
 3020 02d6 FFF7FEFF 		bl	sprintf
 3021              	.LVL227:
 244:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 3022              		.loc 1 244 5 is_stmt 1 view .LVU714
 244:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 3023              		.loc 1 244 59 is_stmt 0 view .LVU715
 3024 02da 6369     		ldr	r3, [r4, #20]
 3025 02dc 9946     		mov	r9, r3
ARM GAS  /tmp/ccrwP30Q.s 			page 99


 244:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 3026              		.loc 1 244 48 view .LVU716
 3027 02de 181C     		adds	r0, r3, #0
 3028 02e0 FFF7FEFF 		bl	__aeabi_f2uiz
 3029              	.LVL228:
 3030 02e4 83B2     		uxth	r3, r0
 3031 02e6 9846     		mov	r8, r3
 244:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 3032              		.loc 1 244 83 view .LVU717
 3033 02e8 1800     		movs	r0, r3
 3034 02ea FFF7FEFF 		bl	__aeabi_i2f
 3035              	.LVL229:
 3036 02ee 011C     		adds	r1, r0, #0
 3037 02f0 4846     		mov	r0, r9
 3038 02f2 FFF7FEFF 		bl	__aeabi_fsub
 3039              	.LVL230:
 244:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 3040              		.loc 1 244 101 view .LVU718
 3041 02f6 5649     		ldr	r1, .L151+80
 3042 02f8 FFF7FEFF 		bl	__aeabi_fmul
 3043              	.LVL231:
 244:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 3044              		.loc 1 244 65 view .LVU719
 3045 02fc FFF7FEFF 		bl	__aeabi_f2uiz
 3046              	.LVL232:
 3047 0300 83B2     		uxth	r3, r0
 244:Src/main.c    ****     sprintf((char * restrict) str6, "PDO %d", s.pdo);
 3048              		.loc 1 244 5 view .LVU720
 3049 0302 4246     		mov	r2, r8
 3050 0304 5146     		mov	r1, r10
 3051 0306 10A8     		add	r0, sp, #64
 3052 0308 FFF7FEFF 		bl	sprintf
 3053              	.LVL233:
 245:Src/main.c    **** 
 3054              		.loc 1 245 5 is_stmt 1 view .LVU721
 245:Src/main.c    **** 
 3055              		.loc 1 245 48 is_stmt 0 view .LVU722
 3056 030c 2623     		movs	r3, #38
 3057 030e E25C     		ldrb	r2, [r4, r3]
 245:Src/main.c    **** 
 3058              		.loc 1 245 5 view .LVU723
 3059 0310 5349     		ldr	r1, .L151+96
 3060 0312 3000     		movs	r0, r6
 3061 0314 FFF7FEFF 		bl	sprintf
 3062              	.LVL234:
 247:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 3063              		.loc 1 247 5 is_stmt 1 view .LVU724
 3064 0318 FFF7FEFF 		bl	clear_screen
 3065              	.LVL235:
 248:Src/main.c    ****     draw_string(str6, 60, 1 ,1);
 3066              		.loc 1 248 5 view .LVU725
 3067 031c 0123     		movs	r3, #1
 3068 031e 0122     		movs	r2, #1
 3069 0320 0A21     		movs	r1, #10
 3070 0322 3800     		movs	r0, r7
 3071 0324 FFF7FEFF 		bl	draw_string
 3072              	.LVL236:
ARM GAS  /tmp/ccrwP30Q.s 			page 100


 249:Src/main.c    ****     draw_string(str5, 10, 9 ,1);
 3073              		.loc 1 249 5 view .LVU726
 3074 0328 0123     		movs	r3, #1
 3075 032a 0122     		movs	r2, #1
 3076 032c 3C21     		movs	r1, #60
 3077 032e 3000     		movs	r0, r6
 3078 0330 FFF7FEFF 		bl	draw_string
 3079              	.LVL237:
 250:Src/main.c    **** #ifdef DISPLAYCURRENT
 3080              		.loc 1 250 5 view .LVU727
 3081 0334 0123     		movs	r3, #1
 3082 0336 0922     		movs	r2, #9
 3083 0338 0A21     		movs	r1, #10
 3084 033a 10A8     		add	r0, sp, #64
 3085 033c FFF7FEFF 		bl	draw_string
 3086              	.LVL238:
 252:Src/main.c    ****       draw_string(str2, 10, 9 ,1);
 3087              		.loc 1 252 5 view .LVU728
 252:Src/main.c    ****       draw_string(str2, 10, 9 ,1);
 3088              		.loc 1 252 9 is_stmt 0 view .LVU729
 3089 0340 2423     		movs	r3, #36
 3090 0342 E35C     		ldrb	r3, [r4, r3]
 252:Src/main.c    ****       draw_string(str2, 10, 9 ,1);
 3091              		.loc 1 252 7 view .LVU730
 3092 0344 002B     		cmp	r3, #0
 3093 0346 00D1     		bne	.LCB2505
 3094 0348 AFE0     		b	.L146	@long jump
 3095              	.LCB2505:
 257:Src/main.c    ****     }
 3096              		.loc 1 257 7 is_stmt 1 view .LVU731
 257:Src/main.c    ****     }
 3097              		.loc 1 257 16 is_stmt 0 view .LVU732
 3098 034a 013B     		subs	r3, r3, #1
 3099 034c 3349     		ldr	r1, .L151+28
 3100 034e 2422     		movs	r2, #36
 3101 0350 8B54     		strb	r3, [r1, r2]
 3102              	.L132:
 260:Src/main.c    **** 
 3103              		.loc 1 260 5 is_stmt 1 view .LVU733
 260:Src/main.c    **** 
 3104              		.loc 1 260 18 is_stmt 0 view .LVU734
 3105 0352 324C     		ldr	r4, .L151+28
 260:Src/main.c    **** 
 3106              		.loc 1 260 26 view .LVU735
 3107 0354 4349     		ldr	r1, .L151+100
 3108 0356 2069     		ldr	r0, [r4, #16]
 3109 0358 FFF7FEFF 		bl	__aeabi_fmul
 3110              	.LVL239:
 3111 035c FFF7FEFF 		bl	__aeabi_f2d
 3112              	.LVL240:
 3113 0360 0600     		movs	r6, r0
 3114 0362 0F00     		movs	r7, r1
 260:Src/main.c    **** 
 3115              		.loc 1 260 49 view .LVU736
 3116 0364 E068     		ldr	r0, [r4, #12]
 3117 0366 FFF7FEFF 		bl	__aeabi_f2d
 3118              	.LVL241:
ARM GAS  /tmp/ccrwP30Q.s 			page 101


 260:Src/main.c    **** 
 3119              		.loc 1 260 53 view .LVU737
 3120 036a 0022     		movs	r2, #0
 3121 036c 3E4B     		ldr	r3, .L151+104
 3122 036e FFF7FEFF 		bl	__aeabi_dmul
 3123              	.LVL242:
 3124 0372 0200     		movs	r2, r0
 3125 0374 0B00     		movs	r3, r1
 260:Src/main.c    **** 
 3126              		.loc 1 260 45 view .LVU738
 3127 0376 3000     		movs	r0, r6
 3128 0378 3900     		movs	r1, r7
 3129 037a FFF7FEFF 		bl	__aeabi_dadd
 3130              	.LVL243:
 3131 037e FFF7FEFF 		bl	__aeabi_d2f
 3132              	.LVL244:
 260:Src/main.c    **** 
 3133              		.loc 1 260 14 view .LVU739
 3134 0382 2061     		str	r0, [r4, #16]
 262:Src/main.c    ****       s.drawlineavg = (s.drawlineavg * DISP_AVG_FILTER) + (CLAMP(r.error*3.0f,0,30)*(1.0-DISP_AVG_F
 3135              		.loc 1 262 5 is_stmt 1 view .LVU740
 262:Src/main.c    ****       s.drawlineavg = (s.drawlineavg * DISP_AVG_FILTER) + (CLAMP(r.error*3.0f,0,30)*(1.0-DISP_AVG_F
 3136              		.loc 1 262 10 is_stmt 0 view .LVU741
 3137 0384 2523     		movs	r3, #37
 3138 0386 E35C     		ldrb	r3, [r4, r3]
 262:Src/main.c    ****       s.drawlineavg = (s.drawlineavg * DISP_AVG_FILTER) + (CLAMP(r.error*3.0f,0,30)*(1.0-DISP_AVG_F
 3139              		.loc 1 262 8 view .LVU742
 3140 0388 002B     		cmp	r3, #0
 3141 038a 00D1     		bne	.LCB2539
 3142 038c FEE0     		b	.L133	@long jump
 3143              	.LCB2539:
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3144              		.loc 1 263 7 is_stmt 1 view .LVU743
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3145              		.loc 1 263 25 is_stmt 0 view .LVU744
 3146 038e 206A     		ldr	r0, [r4, #32]
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3147              		.loc 1 263 38 view .LVU745
 3148 0390 3449     		ldr	r1, .L151+100
 3149 0392 FFF7FEFF 		bl	__aeabi_fmul
 3150              	.LVL245:
 3151 0396 FFF7FEFF 		bl	__aeabi_f2d
 3152              	.LVL246:
 3153 039a 0600     		movs	r6, r0
 3154 039c 0F00     		movs	r7, r1
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3155              		.loc 1 263 60 view .LVU746
 3156 039e 214B     		ldr	r3, .L151+36
 3157 03a0 5868     		ldr	r0, [r3, #4]
 3158 03a2 3249     		ldr	r1, .L151+108
 3159 03a4 FFF7FEFF 		bl	__aeabi_fmul
 3160              	.LVL247:
 3161 03a8 041C     		adds	r4, r0, #0
 3162 03aa 3149     		ldr	r1, .L151+112
 3163 03ac FFF7FEFF 		bl	__aeabi_fcmpgt
 3164              	.LVL248:
 3165 03b0 0028     		cmp	r0, #0
ARM GAS  /tmp/ccrwP30Q.s 			page 102


 3166 03b2 00D0     		beq	.LCB2556
 3167 03b4 8CE0     		b	.L140	@long jump
 3168              	.LCB2556:
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3169              		.loc 1 263 60 discriminator 2 view .LVU747
 3170 03b6 0021     		movs	r1, #0
 3171 03b8 201C     		adds	r0, r4, #0
 3172 03ba FFF7FEFF 		bl	__aeabi_fcmplt
 3173              	.LVL249:
 3174 03be 0028     		cmp	r0, #0
 3175 03c0 00D0     		beq	.LCB2562
 3176 03c2 D5E0     		b	.L141	@long jump
 3177              	.LCB2562:
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3178              		.loc 1 263 60 discriminator 5 view .LVU748
 3179 03c4 201C     		adds	r0, r4, #0
 3180 03c6 FFF7FEFF 		bl	__aeabi_f2d
 3181              	.LVL250:
 3182 03ca 83E0     		b	.L134
 3183              	.L145:
 211:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 3184              		.loc 1 211 7 is_stmt 1 view .LVU749
 3185 03cc FFF7FEFF 		bl	HAL_FLASH_Unlock
 3186              	.LVL251:
 212:Src/main.c    ****       FLASH->AR = 0x0800e400;
 3187              		.loc 1 212 7 view .LVU750
 212:Src/main.c    ****       FLASH->AR = 0x0800e400;
 3188              		.loc 1 212 17 is_stmt 0 view .LVU751
 3189 03d0 284B     		ldr	r3, .L151+116
 3190 03d2 1A69     		ldr	r2, [r3, #16]
 3191 03d4 0221     		movs	r1, #2
 3192 03d6 0A43     		orrs	r2, r1
 3193 03d8 1A61     		str	r2, [r3, #16]
 213:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 3194              		.loc 1 213 7 is_stmt 1 view .LVU752
 213:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 3195              		.loc 1 213 17 is_stmt 0 view .LVU753
 3196 03da 114A     		ldr	r2, .L151+32
 3197 03dc 5A61     		str	r2, [r3, #20]
 214:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 3198              		.loc 1 214 7 is_stmt 1 view .LVU754
 214:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 3199              		.loc 1 214 17 is_stmt 0 view .LVU755
 3200 03de 1A69     		ldr	r2, [r3, #16]
 3201 03e0 3E31     		adds	r1, r1, #62
 3202 03e2 0A43     		orrs	r2, r1
 3203 03e4 1A61     		str	r2, [r3, #16]
 215:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 3204              		.loc 1 215 7 is_stmt 1 view .LVU756
 3205              	.L129:
 215:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 3206              		.loc 1 215 47 discriminator 1 view .LVU757
 215:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 3207              		.loc 1 215 13 discriminator 1 view .LVU758
 215:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 3208              		.loc 1 215 20 is_stmt 0 discriminator 1 view .LVU759
 3209 03e6 234B     		ldr	r3, .L151+116
ARM GAS  /tmp/ccrwP30Q.s 			page 103


 3210 03e8 DB68     		ldr	r3, [r3, #12]
 215:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 3211              		.loc 1 215 13 discriminator 1 view .LVU760
 3212 03ea DB07     		lsls	r3, r3, #31
 3213 03ec FBD4     		bmi	.L129
 216:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 3214              		.loc 1 216 7 is_stmt 1 view .LVU761
 216:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 3215              		.loc 1 216 17 is_stmt 0 view .LVU762
 3216 03ee 214B     		ldr	r3, .L151+116
 3217 03f0 DB68     		ldr	r3, [r3, #12]
 216:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 3218              		.loc 1 216 10 view .LVU763
 3219 03f2 9B06     		lsls	r3, r3, #26
 3220 03f4 40D4     		bmi	.L147
 3221              	.L130:
 224:Src/main.c    ****       #endif
 3222              		.loc 1 224 13 is_stmt 1 view .LVU764
 224:Src/main.c    ****       #endif
 3223              		.loc 1 224 23 is_stmt 0 view .LVU765
 3224 03f6 094A     		ldr	r2, .L151+28
 3225 03f8 2423     		movs	r3, #36
 3226 03fa 0C21     		movs	r1, #12
 3227 03fc D154     		strb	r1, [r2, r3]
 3228 03fe BCE6     		b	.L128
 3229              	.L152:
 3230              		.align	2
 3231              	.L151:
 3232 0400 00000000 		.word	.LANCHOR3
 3233 0404 00000000 		.word	.LANCHOR5
 3234 0408 00000000 		.word	.LANCHOR0
 3235 040c 00000000 		.word	.LANCHOR16
 3236 0410 00000000 		.word	.LANCHOR17
 3237 0414 00000000 		.word	.LANCHOR18
 3238 0418 00000000 		.word	.LANCHOR19
 3239 041c 00000000 		.word	.LANCHOR6
 3240 0420 00E40008 		.word	134276096
 3241 0424 00000000 		.word	.LANCHOR8
 3242 0428 0000C843 		.word	1137180672
 3243 042c 00005C43 		.word	1130102784
 3244 0430 00000000 		.word	.LANCHOR15
 3245 0434 F03F0020 		.word	536887280
 3246 0438 EFBEADDE 		.word	-559038737
 3247 043c 00ED00E0 		.word	-536810240
 3248 0440 0400FA05 		.word	100270084
 3249 0444 0000A040 		.word	1084227584
 3250 0448 00000000 		.word	.LANCHOR20
 3251 044c 00000000 		.word	.LC44
 3252 0450 00002041 		.word	1092616192
 3253 0454 08000000 		.word	.LC46
 3254 0458 10000000 		.word	.LC48
 3255 045c 18000000 		.word	.LC50
 3256 0460 20000000 		.word	.LC52
 3257 0464 6666663F 		.word	1063675494
 3258 0468 9A99B93F 		.word	1069128090
 3259 046c 00004040 		.word	1077936128
 3260 0470 0000F041 		.word	1106247680
ARM GAS  /tmp/ccrwP30Q.s 			page 104


 3261 0474 00200240 		.word	1073881088
 3262              	.L147:
 217:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 3263              		.loc 1 217 9 is_stmt 1 view .LVU766
 217:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 3264              		.loc 1 217 19 is_stmt 0 view .LVU767
 3265 0478 484B     		ldr	r3, .L153
 3266 047a DA68     		ldr	r2, [r3, #12]
 3267 047c 2021     		movs	r1, #32
 3268 047e 0A43     		orrs	r2, r1
 3269 0480 DA60     		str	r2, [r3, #12]
 218:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 3270              		.loc 1 218 9 is_stmt 1 view .LVU768
 218:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 3271              		.loc 1 218 19 is_stmt 0 view .LVU769
 3272 0482 1A69     		ldr	r2, [r3, #16]
 3273 0484 1E39     		subs	r1, r1, #30
 3274 0486 8A43     		bics	r2, r1
 3275 0488 1A61     		str	r2, [r3, #16]
 219:Src/main.c    ****         HAL_FLASH_Lock();
 3276              		.loc 1 219 9 is_stmt 1 view .LVU770
 219:Src/main.c    ****         HAL_FLASH_Lock();
 3277              		.loc 1 219 78 is_stmt 0 view .LVU771
 3278 048a 454B     		ldr	r3, .L153+4
 3279 048c 1868     		ldr	r0, [r3]
 219:Src/main.c    ****         HAL_FLASH_Lock();
 3280              		.loc 1 219 67 view .LVU772
 3281 048e FFF7FEFF 		bl	__aeabi_f2uiz
 3282              	.LVL252:
 3283 0492 82B2     		uxth	r2, r0
 219:Src/main.c    ****         HAL_FLASH_Lock();
 3284              		.loc 1 219 9 view .LVU773
 3285 0494 0023     		movs	r3, #0
 3286 0496 4349     		ldr	r1, .L153+8
 3287 0498 0120     		movs	r0, #1
 3288 049a FFF7FEFF 		bl	HAL_FLASH_Program
 3289              	.LVL253:
 220:Src/main.c    ****         s.writeFlash = 0;
 3290              		.loc 1 220 9 is_stmt 1 view .LVU774
 3291 049e FFF7FEFF 		bl	HAL_FLASH_Lock
 3292              	.LVL254:
 221:Src/main.c    ****       }
 3293              		.loc 1 221 9 view .LVU775
 221:Src/main.c    ****       }
 3294              		.loc 1 221 22 is_stmt 0 view .LVU776
 3295 04a2 0022     		movs	r2, #0
 3296 04a4 404B     		ldr	r3, .L153+12
 3297 04a6 1A77     		strb	r2, [r3, #28]
 3298 04a8 A5E7     		b	.L130
 3299              	.L146:
 253:Src/main.c    ****       draw_string(str3, 60, 1 ,1);
 3300              		.loc 1 253 7 is_stmt 1 view .LVU777
 3301 04aa 0133     		adds	r3, r3, #1
 3302 04ac 0922     		movs	r2, #9
 3303 04ae 0A21     		movs	r1, #10
 3304 04b0 04A8     		add	r0, sp, #16
 3305 04b2 FFF7FEFF 		bl	draw_string
ARM GAS  /tmp/ccrwP30Q.s 			page 105


 3306              	.LVL255:
 254:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 3307              		.loc 1 254 7 view .LVU778
 3308 04b6 0123     		movs	r3, #1
 3309 04b8 0122     		movs	r2, #1
 3310 04ba 3C21     		movs	r1, #60
 3311 04bc 08A8     		add	r0, sp, #32
 3312 04be FFF7FEFF 		bl	draw_string
 3313              	.LVL256:
 255:Src/main.c    ****     } else {
 3314              		.loc 1 255 7 view .LVU779
 3315 04c2 0123     		movs	r3, #1
 3316 04c4 0122     		movs	r2, #1
 3317 04c6 0A21     		movs	r1, #10
 3318 04c8 0CA8     		add	r0, sp, #48
 3319 04ca FFF7FEFF 		bl	draw_string
 3320              	.LVL257:
 3321 04ce 40E7     		b	.L132
 3322              	.L140:
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3323              		.loc 1 263 60 is_stmt 0 view .LVU780
 3324 04d0 0020     		movs	r0, #0
 3325 04d2 3649     		ldr	r1, .L153+16
 3326              	.L134:
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3327              		.loc 1 263 84 discriminator 8 view .LVU781
 3328 04d4 0022     		movs	r2, #0
 3329 04d6 364B     		ldr	r3, .L153+20
 3330 04d8 FFF7FEFF 		bl	__aeabi_dmul
 3331              	.LVL258:
 3332 04dc 0200     		movs	r2, r0
 3333 04de 0B00     		movs	r3, r1
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3334              		.loc 1 263 57 discriminator 8 view .LVU782
 3335 04e0 3000     		movs	r0, r6
 3336 04e2 3900     		movs	r1, r7
 3337 04e4 FFF7FEFF 		bl	__aeabi_dadd
 3338              	.LVL259:
 3339 04e8 FFF7FEFF 		bl	__aeabi_d2f
 3340              	.LVL260:
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3341              		.loc 1 263 21 discriminator 8 view .LVU783
 3342 04ec 2E4B     		ldr	r3, .L153+12
 3343 04ee 1862     		str	r0, [r3, #32]
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3344              		.loc 1 264 7 is_stmt 1 discriminator 8 view .LVU784
 3345              	.LBB45:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3346              		.loc 1 264 11 discriminator 8 view .LVU785
 3347              	.LVL261:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3348              		.loc 1 264 20 is_stmt 0 discriminator 8 view .LVU786
 3349 04f0 0024     		movs	r4, #0
 3350              	.LVL262:
 3351              	.L135:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3352              		.loc 1 264 27 is_stmt 1 discriminator 1 view .LVU787
ARM GAS  /tmp/ccrwP30Q.s 			page 106


 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3353              		.loc 1 264 38 is_stmt 0 discriminator 1 view .LVU788
 3354 04f2 2D4B     		ldr	r3, .L153+12
 3355 04f4 186A     		ldr	r0, [r3, #32]
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3356              		.loc 1 264 32 discriminator 1 view .LVU789
 3357 04f6 FFF7FEFF 		bl	__aeabi_f2iz
 3358              	.LVL263:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3359              		.loc 1 264 7 discriminator 1 view .LVU790
 3360 04fa 8442     		cmp	r4, r0
 3361 04fc 3BDD     		ble	.L148
 3362              	.LVL264:
 3363              	.L137:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3364              		.loc 1 264 7 discriminator 1 view .LVU791
 3365              	.LBE45:
 271:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 3366              		.loc 1 271 5 is_stmt 1 discriminator 1 view .LVU792
 3367 04fe FFF7FEFF 		bl	refresh
 3368              	.LVL265:
 272:Src/main.c    ****  #ifdef CHECKUSBPD
 3369              		.loc 1 272 5 discriminator 1 view .LVU793
 3370 0502 2C48     		ldr	r0, .L153+24
 3371 0504 FFF7FEFF 		bl	HAL_IWDG_Refresh
 3372              	.LVL266:
 274:Src/main.c    ****   #endif
 3373              		.loc 1 274 5 discriminator 1 view .LVU794
 3374 0508 FFF7FEFF 		bl	read_stusb_rdo
 3375              	.LVL267:
 3376              	.LBE44:
 188:Src/main.c    ****   {
 3377              		.loc 1 188 9 discriminator 1 view .LVU795
 3378              	.L138:
 188:Src/main.c    ****   {
 3379              		.loc 1 188 3 view .LVU796
 3380              	.LBB47:
 190:Src/main.c    **** 
 3381              		.loc 1 190 5 view .LVU797
 3382 050c 3220     		movs	r0, #50
 3383 050e FFF7FEFF 		bl	HAL_Delay
 3384              	.LVL268:
 193:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 3385              		.loc 1 193 5 view .LVU798
 193:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 3386              		.loc 1 193 19 is_stmt 0 view .LVU799
 3387 0512 9024     		movs	r4, #144
 3388 0514 E405     		lsls	r4, r4, #23
 3389 0516 0821     		movs	r1, #8
 3390 0518 2000     		movs	r0, r4
 3391 051a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3392              	.LVL269:
 193:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 3393              		.loc 1 193 17 view .LVU800
 3394 051e 224D     		ldr	r5, .L153+12
 3395 0520 A877     		strb	r0, [r5, #30]
 194:Src/main.c    **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 107


 3396              		.loc 1 194 5 is_stmt 1 view .LVU801
 194:Src/main.c    **** 
 3397              		.loc 1 194 19 is_stmt 0 view .LVU802
 3398 0522 1021     		movs	r1, #16
 3399 0524 2000     		movs	r0, r4
 3400 0526 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3401              	.LVL270:
 3402 052a 0400     		movs	r4, r0
 194:Src/main.c    **** 
 3403              		.loc 1 194 52 view .LVU803
 3404 052c 8021     		movs	r1, #128
 3405 052e 8901     		lsls	r1, r1, #6
 3406 0530 2148     		ldr	r0, .L153+28
 3407 0532 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3408              	.LVL271:
 194:Src/main.c    **** 
 3409              		.loc 1 194 17 view .LVU804
 3410 0536 2043     		orrs	r0, r4
 3411 0538 C0B2     		uxtb	r0, r0
 3412 053a 6877     		strb	r0, [r5, #29]
 196:Src/main.c    ****       r.target -= 5;
 3413              		.loc 1 196 5 is_stmt 1 view .LVU805
 196:Src/main.c    ****       r.target -= 5;
 3414              		.loc 1 196 7 is_stmt 0 view .LVU806
 3415 053c 0128     		cmp	r0, #1
 3416 053e 00D1     		bne	.LCB2776
 3417 0540 F9E5     		b	.L149	@long jump
 3418              	.LCB2776:
 3419              	.L124:
 202:Src/main.c    ****       r.target += 5;
 3420              		.loc 1 202 5 is_stmt 1 view .LVU807
 202:Src/main.c    ****       r.target += 5;
 3421              		.loc 1 202 16 is_stmt 0 view .LVU808
 3422 0542 194B     		ldr	r3, .L153+12
 3423 0544 9B7F     		ldrb	r3, [r3, #30]
 202:Src/main.c    ****       r.target += 5;
 3424              		.loc 1 202 7 view .LVU809
 3425 0546 012B     		cmp	r3, #1
 3426 0548 00D1     		bne	.LCB2782
 3427 054a 01E6     		b	.L150	@long jump
 3428              	.LCB2782:
 3429              	.L125:
 208:Src/main.c    **** 
 3430              		.loc 1 208 5 is_stmt 1 view .LVU810
 208:Src/main.c    **** 
 3431              		.loc 1 208 16 is_stmt 0 view .LVU811
 3432 054c 144B     		ldr	r3, .L153+4
 3433 054e 1C68     		ldr	r4, [r3]
 3434 0550 1A49     		ldr	r1, .L153+32
 3435 0552 201C     		adds	r0, r4, #0
 3436 0554 FFF7FEFF 		bl	__aeabi_fcmpgt
 3437              	.LVL272:
 3438 0558 0028     		cmp	r0, #0
 3439 055a 00D0     		beq	.LCB2792
 3440 055c 05E6     		b	.L139	@long jump
 3441              	.LCB2792:
 208:Src/main.c    **** 
ARM GAS  /tmp/ccrwP30Q.s 			page 108


 3442              		.loc 1 208 16 discriminator 2 view .LVU812
 3443 055e 1849     		ldr	r1, .L153+36
 3444 0560 201C     		adds	r0, r4, #0
 3445 0562 FFF7FEFF 		bl	__aeabi_fcmplt
 3446              	.LVL273:
 3447 0566 0028     		cmp	r0, #0
 3448 0568 00D1     		bne	.LCB2798
 3449 056a FFE5     		b	.L126	@long jump
 3450              	.LCB2798:
 208:Src/main.c    **** 
 3451              		.loc 1 208 16 view .LVU813
 3452 056c 144C     		ldr	r4, .L153+36
 3453 056e FDE5     		b	.L126
 3454              	.L141:
 263:Src/main.c    ****       for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3455              		.loc 1 263 60 view .LVU814
 3456 0570 0020     		movs	r0, #0
 3457 0572 0021     		movs	r1, #0
 3458 0574 AEE7     		b	.L134
 3459              	.LVL274:
 3460              	.L148:
 3461              	.LBB46:
 265:Src/main.c    ****       }
 3462              		.loc 1 265 9 is_stmt 1 discriminator 3 view .LVU815
 265:Src/main.c    ****       }
 3463              		.loc 1 265 23 is_stmt 0 discriminator 3 view .LVU816
 3464 0576 2000     		movs	r0, r4
 3465 0578 3C30     		adds	r0, r0, #60
 265:Src/main.c    ****       }
 3466              		.loc 1 265 9 discriminator 3 view .LVU817
 3467 057a 00B2     		sxth	r0, r0
 3468 057c 0123     		movs	r3, #1
 3469 057e 0822     		movs	r2, #8
 3470 0580 0821     		movs	r1, #8
 3471 0582 FFF7FEFF 		bl	draw_v_line
 3472              	.LVL275:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3473              		.loc 1 264 52 is_stmt 1 discriminator 3 view .LVU818
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3474              		.loc 1 264 53 is_stmt 0 discriminator 3 view .LVU819
 3475 0586 0134     		adds	r4, r4, #1
 3476              	.LVL276:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3477              		.loc 1 264 53 discriminator 3 view .LVU820
 3478 0588 A4B2     		uxth	r4, r4
 3479              	.LVL277:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3480              		.loc 1 264 53 discriminator 3 view .LVU821
 3481 058a B2E7     		b	.L135
 3482              	.LVL278:
 3483              	.L133:
 264:Src/main.c    ****         draw_v_line(60+i, 8, 8, 1);
 3484              		.loc 1 264 53 discriminator 3 view .LVU822
 3485              	.LBE46:
 268:Src/main.c    ****     }
 3486              		.loc 1 268 7 is_stmt 1 view .LVU823
 3487 058c 0123     		movs	r3, #1
ARM GAS  /tmp/ccrwP30Q.s 			page 109


 3488 058e 0922     		movs	r2, #9
 3489 0590 3C21     		movs	r1, #60
 3490 0592 0C48     		ldr	r0, .L153+40
 3491 0594 FFF7FEFF 		bl	draw_string
 3492              	.LVL279:
 3493 0598 B1E7     		b	.L137
 3494              	.L154:
 3495 059a C046     		.align	2
 3496              	.L153:
 3497 059c 00200240 		.word	1073881088
 3498 05a0 00000000 		.word	.LANCHOR8
 3499 05a4 00E40008 		.word	134276096
 3500 05a8 00000000 		.word	.LANCHOR6
 3501 05ac 00003E40 		.word	1077805056
 3502 05b0 9A99B93F 		.word	1069128090
 3503 05b4 00000000 		.word	.LANCHOR4
 3504 05b8 00080048 		.word	1207961600
 3505 05bc 0000C843 		.word	1137180672
 3506 05c0 0000A041 		.word	1101004800
 3507 05c4 28000000 		.word	.LC54
 3508              	.LBE47:
 3509              		.cfi_endproc
 3510              	.LFE37:
 3512              		.section	.text.Error_Handler,"ax",%progbits
 3513              		.align	1
 3514              		.global	Error_Handler
 3515              		.syntax unified
 3516              		.code	16
 3517              		.thumb_func
 3518              		.fpu softvfp
 3520              	Error_Handler:
 3521              	.LFB60:
 762:Src/main.c    **** 
 763:Src/main.c    **** void Error_Handler(void)
 764:Src/main.c    **** {
 3522              		.loc 1 764 1 view -0
 3523              		.cfi_startproc
 3524              		@ args = 0, pretend = 0, frame = 0
 3525              		@ frame_needed = 0, uses_anonymous_args = 0
 3526              		@ link register save eliminated.
 765:Src/main.c    **** 
 766:Src/main.c    **** }
 3527              		.loc 1 766 1 view .LVU825
 3528              		@ sp needed
 3529 0000 7047     		bx	lr
 3530              		.cfi_endproc
 3531              	.LFE60:
 3533              		.global	OLED_Setup_Array
 3534              		.global	REFRESH_COMMANDS
 3535              		.global	screenBuffer
 3536              		.global	jbr_string
 3537              		.section	.rodata.str1.4,"aMS",%progbits,1
 3538              		.align	2
 3539              	.LC57:
 3540 0000 4A425220 		.ascii	"JBR Eng 2020\000"
 3540      456E6720 
 3540      32303230 
ARM GAS  /tmp/ccrwP30Q.s 			page 110


 3540      00
 3541              		.global	assembly_string
 3542 000d 000000   		.align	2
 3543              	.LC58:
 3544 0010 41737365 		.ascii	"Assembly by\000"
 3544      6D626C79 
 3544      20627900 
 3545              		.global	by_string
 3546              		.align	2
 3547              	.LC59:
 3548 001c 6279204A 		.ascii	"by Jan Henrik\000"
 3548      616E2048 
 3548      656E7269 
 3548      6B00
 3549              		.global	otter_string
 3550 002a 0000     		.align	2
 3551              	.LC60:
 3552 002c 4F747465 		.ascii	"Otter-Iron\000"
 3552      722D4972 
 3552      6F6E00
 3553              		.global	dfu_string
 3554 0037 00       		.align	2
 3555              	.LC61:
 3556 0038 64667564 		.ascii	"dfudfudfudfudfu\000"
 3556      66756466 
 3556      75646675 
 3556      64667500 
 3557              		.global	Nego_RDO
 3558              		.global	sendDataUSB
 3559              		.global	tipcal
 3560              		.global	r
 3561              		.global	s
 3562              		.global	USBD_Device
 3563              		.global	hiwdg
 3564              		.global	htim3
 3565              		.global	htim1
 3566              		.global	hi2c2
 3567              		.global	hi2c1
 3568              		.global	hdma_adc
 3569              		.global	hadc
 3570              		.global	wduty
 3571              		.global	font
 3572              		.section	.rodata
 3573              		.align	2
 3574              		.set	.LANCHOR20,. + 0
 3575              	.LC42:
 3576 0000 20202020 		.ascii	"          \000"
 3576      20202020 
 3576      202000
 3577 000b 000000   		.space	3
 3578              		.section	.bss.ADC_raw,"aw",%nobits
 3579              		.align	2
 3580              		.set	.LANCHOR5,. + 0
 3583              	ADC_raw:
 3584 0000 00000000 		.space	8
 3584      00000000 
 3585              		.section	.bss.Nego_RDO,"aw",%nobits
ARM GAS  /tmp/ccrwP30Q.s 			page 111


 3586              		.align	2
 3587              		.set	.LANCHOR12,. + 0
 3590              	Nego_RDO:
 3591 0000 00000000 		.space	4
 3592              		.section	.bss.USBD_Device,"aw",%nobits
 3593              		.align	2
 3596              	USBD_Device:
 3597 0000 00000000 		.space	548
 3597      00000000 
 3597      00000000 
 3597      00000000 
 3597      00000000 
 3598              		.section	.bss.count.0,"aw",%nobits
 3599              		.align	1
 3600              		.set	.LANCHOR10,. + 0
 3603              	count.0:
 3604 0000 0000     		.space	2
 3605              		.section	.bss.hadc,"aw",%nobits
 3606              		.align	2
 3607              		.set	.LANCHOR0,. + 0
 3610              	hadc:
 3611 0000 00000000 		.space	76
 3611      00000000 
 3611      00000000 
 3611      00000000 
 3611      00000000 
 3612              		.section	.bss.hdma_adc,"aw",%nobits
 3613              		.align	2
 3616              	hdma_adc:
 3617 0000 00000000 		.space	68
 3617      00000000 
 3617      00000000 
 3617      00000000 
 3617      00000000 
 3618              		.section	.bss.hi2c1,"aw",%nobits
 3619              		.align	2
 3620              		.set	.LANCHOR1,. + 0
 3623              	hi2c1:
 3624 0000 00000000 		.space	76
 3624      00000000 
 3624      00000000 
 3624      00000000 
 3624      00000000 
 3625              		.section	.bss.hi2c2,"aw",%nobits
 3626              		.align	2
 3629              	hi2c2:
 3630 0000 00000000 		.space	76
 3630      00000000 
 3630      00000000 
 3630      00000000 
 3630      00000000 
 3631              		.section	.bss.hiwdg,"aw",%nobits
 3632              		.align	2
 3633              		.set	.LANCHOR4,. + 0
 3636              	hiwdg:
 3637 0000 00000000 		.space	16
 3637      00000000 
ARM GAS  /tmp/ccrwP30Q.s 			page 112


 3637      00000000 
 3637      00000000 
 3638              		.section	.bss.htim1,"aw",%nobits
 3639              		.align	2
 3640              		.set	.LANCHOR3,. + 0
 3643              	htim1:
 3644 0000 00000000 		.space	64
 3644      00000000 
 3644      00000000 
 3644      00000000 
 3644      00000000 
 3645              		.section	.bss.htim3,"aw",%nobits
 3646              		.align	2
 3647              		.set	.LANCHOR2,. + 0
 3650              	htim3:
 3651 0000 00000000 		.space	64
 3651      00000000 
 3651      00000000 
 3651      00000000 
 3651      00000000 
 3652              		.section	.bss.screenBuffer,"aw",%nobits
 3653              		.align	2
 3656              	screenBuffer:
 3657 0000 00000000 		.space	218
 3657      00000000 
 3657      00000000 
 3657      00000000 
 3657      00000000 
 3658              		.section	.bss.sendDataUSB,"aw",%nobits
 3659              		.align	2
 3660              		.set	.LANCHOR11,. + 0
 3663              	sendDataUSB:
 3664 0000 00000000 		.space	4
 3665              		.section	.data.OLED_Setup_Array,"aw"
 3666              		.align	2
 3667              		.set	.LANCHOR14,. + 0
 3670              	OLED_Setup_Array:
 3671 0000 80AE80D5 		.ascii	"\200\256\200\325\200R\200\250\200\017\200\300\200\323"
 3671      805280A8 
 3671      800F80C0 
 3671      80D3
 3672 000e 80008040 		.ascii	"\200\000\200@\200\240\200\215\200\024\200\332\200\002"
 3672      80A0808D 
 3672      801480DA 
 3672      8002
 3673 001c 80818033 		.ascii	"\200\201\2003\200\331\200\361\200\333\2000\200\244\200"
 3673      80D980F1 
 3673      80DB8030 
 3673      80A480
 3674 002b A6802080 		.ascii	"\246\200 \200\000\200\257"
 3674      0080AF
 3675              		.section	.data.assembly_string,"aw"
 3676              		.align	2
 3677              		.set	.LANCHOR18,. + 0
 3680              	assembly_string:
 3681 0000 10000000 		.word	.LC58
 3682              		.section	.data.by_string,"aw"
ARM GAS  /tmp/ccrwP30Q.s 			page 113


 3683              		.align	2
 3684              		.set	.LANCHOR17,. + 0
 3687              	by_string:
 3688 0000 1C000000 		.word	.LC59
 3689              		.section	.data.dfu_string,"aw"
 3690              		.align	2
 3691              		.set	.LANCHOR15,. + 0
 3694              	dfu_string:
 3695 0000 38000000 		.word	.LC61
 3696              		.section	.data.jbr_string,"aw"
 3697              		.align	2
 3698              		.set	.LANCHOR19,. + 0
 3701              	jbr_string:
 3702 0000 00000000 		.word	.LC57
 3703              		.section	.data.otter_string,"aw"
 3704              		.align	2
 3705              		.set	.LANCHOR16,. + 0
 3708              	otter_string:
 3709 0000 2C000000 		.word	.LC60
 3710              		.section	.data.r,"aw"
 3711              		.align	2
 3712              		.set	.LANCHOR8,. + 0
 3715              	r:
 3716 0000 00005C43 		.word	1130102784
 3717 0004 00000000 		.space	12
 3717      00000000 
 3717      00000000 
 3718 0010 00004843 		.word	1128792064
 3719 0014 00000000 		.space	8
 3719      00000000 
 3720 001c 240B9838 		.word	949488420
 3721 0020 0000003F 		.word	1056964608
 3722 0024 0AD7233C 		.word	1008981770
 3723 0028 00000000 		.word	0
 3724 002c 0000A041 		.word	1101004800
 3725              		.section	.data.s,"aw"
 3726              		.align	2
 3727              		.set	.LANCHOR6,. + 0
 3730              	s:
 3731 0000 00000000 		.space	20
 3731      00000000 
 3731      00000000 
 3731      00000000 
 3731      00000000 
 3732 0014 00004040 		.word	1077936128
 3733 0018 00000000 		.space	4
 3734 001c 00       		.byte	0
 3735 001d 00000000 		.space	11
 3735      00000000 
 3735      000000
 3736              		.section	.data.tipcal,"aw"
 3737              		.align	2
 3738              		.set	.LANCHOR7,. + 0
 3741              	tipcal:
 3742 0000 0000F042 		.word	1123024896
 3743 0004 0000B842 		.word	1119354880
 3744              		.section	.data.wduty,"aw"
ARM GAS  /tmp/ccrwP30Q.s 			page 114


 3745              		.align	1
 3746              		.set	.LANCHOR9,. + 0
 3749              	wduty:
 3750 0000 9600     		.short	150
 3751              		.section	.rodata.REFRESH_COMMANDS,"a"
 3752              		.align	2
 3753              		.set	.LANCHOR13,. + 0
 3756              	REFRESH_COMMANDS:
 3757 0000 80AF8021 		.ascii	"\200\257\200!\200 \200\177\200\300\200\"\200\000\200"
 3757      8020807F 
 3757      80C08022 
 3757      800080
 3758 000f 0140     		.ascii	"\001@"
 3759              		.section	.rodata.font,"a"
 3760              		.align	2
 3763              	font:
 3764 0000 00000000 		.ascii	"\000\000\000\000\000\000"
 3764      0000
 3765 0006 2F000000 		.ascii	"/\000\000\000\000\000"
 3765      0000
 3766 000c 03000300 		.ascii	"\003\000\003\000\000\000"
 3766      0000
 3767 0012 123F1212 		.ascii	"\022?\022\022?\022"
 3767      3F12
 3768 0018 2E2A7F2A 		.ascii	".*\177*:\000"
 3768      3A00
 3769 001e 23130804 		.ascii	"#\023\010\00421"
 3769      3231
 3770 0024 102A252A 		.ascii	"\020*%*\020 "
 3770      1020
 3771 002a 02010000 		.ascii	"\002\001\000\000\000\000"
 3771      0000
 3772 0030 1E210000 		.ascii	"\036!\000\000\000\000"
 3772      0000
 3773 0036 211E0000 		.ascii	"!\036\000\000\000\000"
 3773      0000
 3774 003c 082A1C2A 		.ascii	"\010*\034*\010\010"
 3774      0808
 3775 0042 08083E08 		.ascii	"\010\010>\010\010\010"
 3775      0808
 3776 0048 80600000 		.ascii	"\200`\000\000\000\000"
 3776      0000
 3777 004e 08080808 		.ascii	"\010\010\010\010\010\000"
 3777      0800
 3778 0054 30300000 		.ascii	"00\000\000\000\000"
 3778      0000
 3779 005a 20100804 		.ascii	" \020\010\004\002\000"
 3779      0200
 3780 0060 1E312925 		.ascii	"\0361)%#\036"
 3780      231E
 3781 0066 22213F20 		.ascii	"\"!?   "
 3781      2020
 3782 006c 32292929 		.ascii	"2))))&"
 3782      2926
 3783 0072 12212125 		.ascii	"\022!!%%\032"
 3783      251A
 3784 0078 1814123F 		.ascii	"\030\024\022?\020\020"
ARM GAS  /tmp/ccrwP30Q.s 			page 115


 3784      1010
 3785 007e 17252525 		.ascii	"\027%%%%\031"
 3785      2519
 3786 0084 1E252525 		.ascii	"\036%%%%\030"
 3786      2518
 3787 008a 01013109 		.ascii	"\001\0011\011\005\003"
 3787      0503
 3788 0090 1A252525 		.ascii	"\032%%%%\032"
 3788      251A
 3789 0096 06292929 		.ascii	"\006))))\036"
 3789      291E
 3790 009c 24000000 		.ascii	"$\000\000\000\000\000"
 3790      0000
 3791 00a2 80640000 		.ascii	"\200d\000\000\000\000"
 3791      0000
 3792 00a8 08142200 		.ascii	"\010\024\"\000\000\000"
 3792      0000
 3793 00ae 14141414 		.ascii	"\024\024\024\024\024\000"
 3793      1400
 3794 00b4 22140800 		.ascii	"\"\024\010\000\000\000"
 3794      0000
 3795 00ba 02010129 		.ascii	"\002\001\001)\005\002"
 3795      0502
 3796 00c0 1E212D2B 		.ascii	"\036!-+-\016"
 3796      2D0E
 3797 00c6 3E090909 		.ascii	">\011\011\011\011>"
 3797      093E
 3798 00cc 3F252525 		.ascii	"?%%%%\032"
 3798      251A
 3799 00d2 1E212121 		.ascii	"\036!!!!\022"
 3799      2112
 3800 00d8 3F212121 		.ascii	"?!!!\022\014"
 3800      120C
 3801 00de 3F252525 		.ascii	"?%%%%!"
 3801      2521
 3802 00e4 3F050505 		.ascii	"?\005\005\005\005\001"
 3802      0501
 3803 00ea 1E212121 		.ascii	"\036!!!)\032"
 3803      291A
 3804 00f0 3F040404 		.ascii	"?\004\004\004\004?"
 3804      043F
 3805 00f6 21213F21 		.ascii	"!!?!!!"
 3805      2121
 3806 00fc 10202020 		.ascii	"\020    \037"
 3806      201F
 3807 0102 3F040C0A 		.ascii	"?\004\014\012\021 "
 3807      1120
 3808 0108 3F202020 		.ascii	"?     "
 3808      2020
 3809 010e 3F020404 		.ascii	"?\002\004\004\002?"
 3809      023F
 3810 0114 3F020408 		.ascii	"?\002\004\010\020?"
 3810      103F
 3811 011a 1E212121 		.ascii	"\036!!!!\036"
 3811      211E
 3812 0120 3F090909 		.ascii	"?\011\011\011\011\006"
 3812      0906
ARM GAS  /tmp/ccrwP30Q.s 			page 116


 3813 0126 1E212931 		.ascii	"\036!)1!\036"
 3813      211E
 3814 012c 3F090909 		.ascii	"?\011\011\011\031&"
 3814      1926
 3815 0132 12252525 		.ascii	"\022%%%%\030"
 3815      2518
 3816 0138 0101013F 		.ascii	"\001\001\001?\001\001"
 3816      0101
 3817 013e 1F202020 		.ascii	"\037    \037"
 3817      201F
 3818 0144 0F102020 		.ascii	"\017\020  \020\017"
 3818      100F
 3819 014a 1F201010 		.ascii	"\037 \020\020 \037"
 3819      201F
 3820 0150 21120C0C 		.ascii	"!\022\014\014\022!"
 3820      1221
 3821 0156 01020C38 		.ascii	"\001\002\0148\004\002"
 3821      0402
 3822 015c 21312925 		.ascii	"!1)%#!"
 3822      2321
 3823 0162 3F210000 		.ascii	"?!\000\000\000\000"
 3823      0000
 3824 0168 02040810 		.ascii	"\002\004\010\020 \000"
 3824      2000
 3825 016e 213F0000 		.ascii	"!?\000\000\000\000"
 3825      0000
 3826 0174 04023F02 		.ascii	"\004\002?\002\004\000"
 3826      0400
 3827 017a 40404040 		.ascii	"@@@@@@"
 3827      4040
 3828 0180 01020000 		.ascii	"\001\002\000\000\000\000"
 3828      0000
 3829 0186 10302A2A 		.ascii	"\0200**<\000"
 3829      3C00
 3830 018c 3F242424 		.ascii	"?$$$\030\000"
 3830      1800
 3831 0192 0C142222 		.ascii	"\014\024\"\"\000\000"
 3831      0000
 3832 0198 18242424 		.ascii	"\030$$$?\000"
 3832      3F00
 3833 019e 1C2C2A2A 		.ascii	"\034,**$\000"
 3833      2400
 3834 01a4 3E050100 		.ascii	">\005\001\000\000\000"
 3834      0000
 3835 01aa 1828A4A4 		.ascii	"\030(\244\244|\000"
 3835      7C00
 3836 01b0 3F04040C 		.ascii	"?\004\004\0140\000"
 3836      3000
 3837 01b6 243D2000 		.ascii	"$= \000\000\000"
 3837      0000
 3838 01bc 2040403D 		.ascii	" @@=\000\000"
 3838      0000
 3839 01c2 3F0C1220 		.ascii	"?\014\022 \000\000"
 3839      0000
 3840 01c8 1F202000 		.ascii	"\037  \000\000\000"
 3840      0000
 3841 01ce 3E023C02 		.ascii	">\002<\002<\000"
ARM GAS  /tmp/ccrwP30Q.s 			page 117


 3841      3C00
 3842 01d4 3E020202 		.ascii	">\002\002\002<\000"
 3842      3C00
 3843 01da 0C142232 		.ascii	"\014\024\"2\014\000"
 3843      0C00
 3844 01e0 FC242424 		.ascii	"\374$$$\030\000"
 3844      1800
 3845 01e6 18242424 		.ascii	"\030$$$\374\200"
 3845      FC80
 3846 01ec 3C040202 		.ascii	"<\004\002\002\000\000"
 3846      0000
 3847 01f2 242C2A2A 		.ascii	"$,**\020\000"
 3847      1000
 3848 01f8 021F2220 		.ascii	"\002\037\" \000\000"
 3848      0000
 3849 01fe 1E202020 		.ascii	"\036   \036\000"
 3849      1E00
 3850 0204 06182018 		.ascii	"\006\030 \030\006\000"
 3850      0600
 3851 020a 1E301C30 		.ascii	"\0360\0340\016\000"
 3851      0E00
 3852 0210 22140814 		.ascii	"\"\024\010\024\"\000"
 3852      2200
 3853 0216 0C10A0A0 		.ascii	"\014\020\240\240|\000"
 3853      7C00
 3854 021c 22322A26 		.ascii	"\"2*&\"\""
 3854      2222
 3855 0222 0C3F2100 		.ascii	"\014?!\000\000\000"
 3855      0000
 3856 0228 3F000000 		.ascii	"?\000\000\000\000\000"
 3856      0000
 3857 022e 213F0C00 		.ascii	"!?\014\000\000\000"
 3857      0000
 3858 0234 02010201 		.ascii	"\002\001\002\001\000\000"
 3858      0000
 3859 023a 00000000 		.ascii	"\000\000\000\000\000\000"
 3859      0000
 3860              		.text
 3861              	.Letext0:
 3862              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3863              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3864              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 3865              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 3866              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 3867              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 3868              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 3869              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 3870              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 3871              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 3872              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 3873              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"
 3874              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 3875              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 3876              		.file 18 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 3877              		.file 19 "Inc/stusb4500.h"
 3878              		.file 20 "Inc/font.h"
 3879              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
ARM GAS  /tmp/ccrwP30Q.s 			page 118


 3880              		.file 22 "Inc/main.h"
 3881              		.file 23 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 3882              		.file 24 "/usr/arm-none-eabi/include/string.h"
 3883              		.file 25 "/usr/arm-none-eabi/include/stdio.h"
 3884              		.file 26 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 3885              		.file 27 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 3886              		.file 28 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_flash.h"
 3887              		.file 29 "<built-in>"
ARM GAS  /tmp/ccrwP30Q.s 			page 119


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccrwP30Q.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccrwP30Q.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccrwP30Q.s:153    .text.MX_GPIO_Init:0000000000000084 $d
     /tmp/ccrwP30Q.s:160    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccrwP30Q.s:166    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccrwP30Q.s:223    .text.MX_DMA_Init:000000000000003c $d
     /tmp/ccrwP30Q.s:228    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccrwP30Q.s:234    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccrwP30Q.s:398    .text.MX_ADC_Init:00000000000000a4 $d
     /tmp/ccrwP30Q.s:405    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccrwP30Q.s:411    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccrwP30Q.s:474    .text.MX_I2C1_Init:0000000000000038 $d
     /tmp/ccrwP30Q.s:481    .text.TIM3_Init:0000000000000000 $t
     /tmp/ccrwP30Q.s:487    .text.TIM3_Init:0000000000000000 TIM3_Init
     /tmp/ccrwP30Q.s:571    .text.TIM3_Init:0000000000000050 $d
     /tmp/ccrwP30Q.s:579    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccrwP30Q.s:585    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccrwP30Q.s:787    .text.MX_TIM1_Init:00000000000000d4 $d
     /tmp/ccrwP30Q.s:794    .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/ccrwP30Q.s:800    .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/ccrwP30Q.s:836    .text.MX_IWDG_Init:0000000000000018 $d
     /tmp/ccrwP30Q.s:862    .text.reg:0000000000000000 $t
     /tmp/ccrwP30Q.s:869    .text.reg:0000000000000000 reg
     /tmp/ccrwP30Q.s:1415   .text.reg:00000000000002e0 $d
     /tmp/ccrwP30Q.s:1446   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccrwP30Q.s:1453   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccrwP30Q.s:1504   .text.HAL_TIM_PeriodElapsedCallback:0000000000000028 $d
     /tmp/ccrwP30Q.s:3596   .bss.USBD_Device:0000000000000000 USBD_Device
     /tmp/ccrwP30Q.s:1512   .rodata.USB_printfloat.str1.4:0000000000000000 $d
     /tmp/ccrwP30Q.s:1516   .text.USB_printfloat:0000000000000000 $t
     /tmp/ccrwP30Q.s:1523   .text.USB_printfloat:0000000000000000 USB_printfloat
     /tmp/ccrwP30Q.s:1590   .text.USB_printfloat:0000000000000048 $d
     /tmp/ccrwP30Q.s:1598   .text.read_stusb_rdo:0000000000000000 $t
     /tmp/ccrwP30Q.s:1605   .text.read_stusb_rdo:0000000000000000 read_stusb_rdo
     /tmp/ccrwP30Q.s:1686   .text.read_stusb_rdo:0000000000000054 $d
     /tmp/ccrwP30Q.s:1694   .text.disp_init:0000000000000000 $t
     /tmp/ccrwP30Q.s:1701   .text.disp_init:0000000000000000 disp_init
     /tmp/ccrwP30Q.s:1771   .text.disp_init:0000000000000048 $d
     /tmp/ccrwP30Q.s:3656   .bss.screenBuffer:0000000000000000 screenBuffer
     /tmp/ccrwP30Q.s:1780   .text.refresh:0000000000000000 $t
     /tmp/ccrwP30Q.s:1787   .text.refresh:0000000000000000 refresh
     /tmp/ccrwP30Q.s:1847   .text.refresh:0000000000000034 $d
     /tmp/ccrwP30Q.s:1854   .text.clear_screen:0000000000000000 $t
     /tmp/ccrwP30Q.s:1861   .text.clear_screen:0000000000000000 clear_screen
     /tmp/ccrwP30Q.s:1884   .text.clear_screen:0000000000000010 $d
     /tmp/ccrwP30Q.s:1889   .text.set_screen:0000000000000000 $t
     /tmp/ccrwP30Q.s:1896   .text.set_screen:0000000000000000 set_screen
     /tmp/ccrwP30Q.s:1919   .text.set_screen:0000000000000010 $d
     /tmp/ccrwP30Q.s:1924   .text.write_pixel:0000000000000000 $t
     /tmp/ccrwP30Q.s:1931   .text.write_pixel:0000000000000000 write_pixel
     /tmp/ccrwP30Q.s:2036   .text.write_pixel:0000000000000070 $d
     /tmp/ccrwP30Q.s:2041   .text.draw_v_line:0000000000000000 $t
     /tmp/ccrwP30Q.s:2048   .text.draw_v_line:0000000000000000 draw_v_line
     /tmp/ccrwP30Q.s:2113   .text.draw_char:0000000000000000 $t
     /tmp/ccrwP30Q.s:2120   .text.draw_char:0000000000000000 draw_char
ARM GAS  /tmp/ccrwP30Q.s 			page 120


     /tmp/ccrwP30Q.s:2256   .text.draw_char:0000000000000068 $d
     /tmp/ccrwP30Q.s:3763   .rodata.font:0000000000000000 font
     /tmp/ccrwP30Q.s:2261   .text.draw_string:0000000000000000 $t
     /tmp/ccrwP30Q.s:2268   .text.draw_string:0000000000000000 draw_string
     /tmp/ccrwP30Q.s:2328   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccrwP30Q.s:2335   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccrwP30Q.s:2448   .text.SystemClock_Config:000000000000006c $d
     /tmp/ccrwP30Q.s:2453   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccrwP30Q.s:2472   .text.main:0000000000000000 $t
     /tmp/ccrwP30Q.s:2479   .text.main:0000000000000000 main
     /tmp/ccrwP30Q.s:3232   .text.main:0000000000000400 $d
     /tmp/ccrwP30Q.s:3265   .text.main:0000000000000478 $t
     /tmp/ccrwP30Q.s:3497   .text.main:000000000000059c $d
     /tmp/ccrwP30Q.s:3513   .text.Error_Handler:0000000000000000 $t
     /tmp/ccrwP30Q.s:3520   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccrwP30Q.s:3670   .data.OLED_Setup_Array:0000000000000000 OLED_Setup_Array
     /tmp/ccrwP30Q.s:3756   .rodata.REFRESH_COMMANDS:0000000000000000 REFRESH_COMMANDS
     /tmp/ccrwP30Q.s:3701   .data.jbr_string:0000000000000000 jbr_string
     /tmp/ccrwP30Q.s:3538   .rodata.str1.4:0000000000000000 $d
     /tmp/ccrwP30Q.s:3680   .data.assembly_string:0000000000000000 assembly_string
     /tmp/ccrwP30Q.s:3687   .data.by_string:0000000000000000 by_string
     /tmp/ccrwP30Q.s:3708   .data.otter_string:0000000000000000 otter_string
     /tmp/ccrwP30Q.s:3694   .data.dfu_string:0000000000000000 dfu_string
     /tmp/ccrwP30Q.s:3590   .bss.Nego_RDO:0000000000000000 Nego_RDO
     /tmp/ccrwP30Q.s:3663   .bss.sendDataUSB:0000000000000000 sendDataUSB
     /tmp/ccrwP30Q.s:3741   .data.tipcal:0000000000000000 tipcal
     /tmp/ccrwP30Q.s:3715   .data.r:0000000000000000 r
     /tmp/ccrwP30Q.s:3730   .data.s:0000000000000000 s
     /tmp/ccrwP30Q.s:3636   .bss.hiwdg:0000000000000000 hiwdg
     /tmp/ccrwP30Q.s:3650   .bss.htim3:0000000000000000 htim3
     /tmp/ccrwP30Q.s:3643   .bss.htim1:0000000000000000 htim1
     /tmp/ccrwP30Q.s:3629   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccrwP30Q.s:3623   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccrwP30Q.s:3616   .bss.hdma_adc:0000000000000000 hdma_adc
     /tmp/ccrwP30Q.s:3610   .bss.hadc:0000000000000000 hadc
     /tmp/ccrwP30Q.s:3749   .data.wduty:0000000000000000 wduty
     /tmp/ccrwP30Q.s:3573   .rodata:0000000000000000 $d
     /tmp/ccrwP30Q.s:3579   .bss.ADC_raw:0000000000000000 $d
     /tmp/ccrwP30Q.s:3583   .bss.ADC_raw:0000000000000000 ADC_raw
     /tmp/ccrwP30Q.s:3586   .bss.Nego_RDO:0000000000000000 $d
     /tmp/ccrwP30Q.s:3593   .bss.USBD_Device:0000000000000000 $d
     /tmp/ccrwP30Q.s:3599   .bss.count.0:0000000000000000 $d
     /tmp/ccrwP30Q.s:3603   .bss.count.0:0000000000000000 count.0
     /tmp/ccrwP30Q.s:3606   .bss.hadc:0000000000000000 $d
     /tmp/ccrwP30Q.s:3613   .bss.hdma_adc:0000000000000000 $d
     /tmp/ccrwP30Q.s:3619   .bss.hi2c1:0000000000000000 $d
     /tmp/ccrwP30Q.s:3626   .bss.hi2c2:0000000000000000 $d
     /tmp/ccrwP30Q.s:3632   .bss.hiwdg:0000000000000000 $d
     /tmp/ccrwP30Q.s:3639   .bss.htim1:0000000000000000 $d
     /tmp/ccrwP30Q.s:3646   .bss.htim3:0000000000000000 $d
     /tmp/ccrwP30Q.s:3653   .bss.screenBuffer:0000000000000000 $d
     /tmp/ccrwP30Q.s:3659   .bss.sendDataUSB:0000000000000000 $d
     /tmp/ccrwP30Q.s:3666   .data.OLED_Setup_Array:0000000000000000 $d
     /tmp/ccrwP30Q.s:3676   .data.assembly_string:0000000000000000 $d
     /tmp/ccrwP30Q.s:3683   .data.by_string:0000000000000000 $d
     /tmp/ccrwP30Q.s:3690   .data.dfu_string:0000000000000000 $d
     /tmp/ccrwP30Q.s:3697   .data.jbr_string:0000000000000000 $d
ARM GAS  /tmp/ccrwP30Q.s 			page 121


     /tmp/ccrwP30Q.s:3704   .data.otter_string:0000000000000000 $d
     /tmp/ccrwP30Q.s:3711   .data.r:0000000000000000 $d
     /tmp/ccrwP30Q.s:3726   .data.s:0000000000000000 $d
     /tmp/ccrwP30Q.s:3737   .data.tipcal:0000000000000000 $d
     /tmp/ccrwP30Q.s:3745   .data.wduty:0000000000000000 $d
     /tmp/ccrwP30Q.s:3752   .rodata.REFRESH_COMMANDS:0000000000000000 $d
     /tmp/ccrwP30Q.s:3760   .rodata.font:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_MspInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_IWDG_Init
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_i2d
__aeabi_dadd
__aeabi_fcmpge
__aeabi_fcmple
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_f2iz
__aeabi_dcmple
USBD_CDC_SetTxBuffer
USBD_CDC_TransmitPacket
UserTxBuffer
__aeabi_f2uiz
sprintf
HAL_I2C_Mem_Read
HAL_I2C_GetState
HAL_I2C_Master_Transmit
HAL_RCC_OscConfig
ARM GAS  /tmp/ccrwP30Q.s 			page 122


HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_Delay
HAL_TIM_PWM_Start
HAL_TIM_OC_Start
HAL_ADC_Start_DMA
HAL_GPIO_ReadPin
HAL_FLASH_Unlock
HAL_FLASH_Program
HAL_FLASH_Lock
HAL_IWDG_Refresh
