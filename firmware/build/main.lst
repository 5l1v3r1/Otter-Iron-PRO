ARM GAS  /tmp/ccL0lKDS.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB57:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*
   3:Src/main.c    ****  * Otter-Iron  -  Stm32f072 based soldering iron.
   4:Src/main.c    ****  * Copyright (C) 2020 Jan Henrik Hemsing
   5:Src/main.c    ****  *
   6:Src/main.c    ****  * This program is free software: you can redistribute it and/or modify it
   7:Src/main.c    ****  * under the terms of the GNU General Public License as published by the Free
   8:Src/main.c    ****  * Software Foundation, either version 3 of the License, or (at your option)
   9:Src/main.c    ****  * any later version.
  10:Src/main.c    ****  *
  11:Src/main.c    ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  12:Src/main.c    ****  * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
  13:Src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  14:Src/main.c    ****  * more details.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * You should have received a copy of the GNU General Public License along with
  17:Src/main.c    ****  * this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "font.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** // Enable serial printing via CDC, quite buggy
  24:Src/main.c    **** /* #define ENABLESERIAL */
  25:Src/main.c    **** // Enable Current display, shows up after a few millisecconds instead of temp-target
  26:Src/main.c    **** #define DISPLAYCURRENT
  27:Src/main.c    **** 
  28:Src/main.c    **** #define FILT(a, b, c) ((a) * (c) + (b) * ((1.0f) - (c)))
  29:Src/main.c    **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  30:Src/main.c    **** 
  31:Src/main.c    **** #define TTIP_AVG_FILTER 0.99f
  32:Src/main.c    **** #define DISP_AVG_FILTER 0.9f
  33:Src/main.c    **** #define MIN_DUTY 0
ARM GAS  /tmp/ccL0lKDS.s 			page 2


  34:Src/main.c    **** #define MAX_DUTY 2000
  35:Src/main.c    **** uint16_t wduty = 150;
  36:Src/main.c    **** 
  37:Src/main.c    **** ADC_HandleTypeDef hadc;
  38:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  39:Src/main.c    **** 
  40:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  41:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  42:Src/main.c    **** 
  43:Src/main.c    **** TIM_HandleTypeDef htim1;
  44:Src/main.c    **** TIM_HandleTypeDef htim3;
  45:Src/main.c    **** 
  46:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  47:Src/main.c    **** 
  48:Src/main.c    **** USBD_HandleTypeDef USBD_Device;
  49:Src/main.c    **** 
  50:Src/main.c    **** void SystemClock_Config(void);
  51:Src/main.c    **** static void MX_GPIO_Init(void);
  52:Src/main.c    **** static void MX_ADC_Init(void);
  53:Src/main.c    **** static void MX_DMA_Init(void);
  54:Src/main.c    **** static void MX_I2C1_Init(void);
  55:Src/main.c    **** static void MX_I2C2_Init(void);
  56:Src/main.c    **** static void MX_TIM1_Init(void);
  57:Src/main.c    **** static void TIM3_Init(void);
  58:Src/main.c    **** static void MX_IWDG_Init(void);
  59:Src/main.c    **** 
  60:Src/main.c    **** void reg(void);
  61:Src/main.c    **** void disp_init(void);
  62:Src/main.c    **** void refresh(void);
  63:Src/main.c    **** void clear_screen(void);
  64:Src/main.c    **** void set_screen(void);
  65:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color);
  66:Src/main.c    **** void draw_char(unsigned char  c, uint8_t x, uint8_t y, uint8_t brightness);
  67:Src/main.c    **** void draw_string(const unsigned char * str, uint8_t x, uint8_t y, uint8_t brightness);
  68:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color);
  69:Src/main.c    **** void USB_printfloat(float _buf);
  70:Src/main.c    **** 
  71:Src/main.c    **** struct status_t{
  72:Src/main.c    ****   float ttip;
  73:Src/main.c    ****   float ttipavg;
  74:Src/main.c    ****   float uin;
  75:Src/main.c    ****   float iin;
  76:Src/main.c    ****   float iinavg;
  77:Src/main.c    ****   float imax;
  78:Src/main.c    ****   float tref;
  79:Src/main.c    ****   uint8_t writeFlash;
  80:Src/main.c    ****   uint8_t button[2];
  81:Src/main.c    ****   float drawlineavg;
  82:Src/main.c    **** #ifdef DISPLAYCURRENT
  83:Src/main.c    ****   uint8_t timeout;
  84:Src/main.c    **** #endif
  85:Src/main.c    **** }s = {.writeFlash = 0, .imax = 3.0f};
  86:Src/main.c    **** 
  87:Src/main.c    **** struct reg_t{
  88:Src/main.c    ****   float target;
  89:Src/main.c    ****   float error;
  90:Src/main.c    ****   float errorprior;
ARM GAS  /tmp/ccL0lKDS.s 			page 3


  91:Src/main.c    ****   float ierror;
  92:Src/main.c    ****   float imax;
  93:Src/main.c    ****   float derror;
  94:Src/main.c    ****   int16_t duty;
  95:Src/main.c    ****   float cycletime;
  96:Src/main.c    ****   float Kp;
  97:Src/main.c    ****   float Ki;
  98:Src/main.c    ****   float Kd;
  99:Src/main.c    ****   float deadband;
 100:Src/main.c    **** }r = {.Kp = 0.5f,.Ki = 0.01f,.Kd = 0.0f,.cycletime = 0.0000725f,.imax=200.0f,.target=220.0f,.deadba
 101:Src/main.c    **** //}r = {.Kp = 0.3f,.Ki = 0.13f,.Kd = 0.3f,.cycletime = 0.0005f,.imax=200.0f,.target=220.0f,.deadban
 102:Src/main.c    **** 
 103:Src/main.c    **** struct tipcal_t{
 104:Src/main.c    ****   float offset;
 105:Src/main.c    ****   float coefficient;
 106:Src/main.c    **** } tipcal = {.offset = 120, .coefficient = 92};
 107:Src/main.c    **** 
 108:Src/main.c    **** static uint16_t ADC_raw[4];
 109:Src/main.c    **** 
 110:Src/main.c    **** extern uint8_t UserTxBuffer[APP_TX_DATA_SIZE];/* Received Data over UART (CDC interface) are stored
 111:Src/main.c    **** uint32_t sendDataUSB;
 112:Src/main.c    **** 
 113:Src/main.c    **** const unsigned char* dfu_string = (unsigned char*) "dfudfudfudfudfu";
 114:Src/main.c    **** const unsigned char* otter_string = (unsigned char*) "Otter-Iron";
 115:Src/main.c    **** const unsigned char* by_string = (unsigned char*) "by Jan Henrik";
 116:Src/main.c    **** const unsigned char* assembly_string = (unsigned char*) "Assembly by";
 117:Src/main.c    **** const unsigned char* jbr_string = (unsigned char*) "JBR Eng 2020";
 118:Src/main.c    **** 
 119:Src/main.c    **** int main(void)
 120:Src/main.c    **** {
 121:Src/main.c    ****   HAL_Init();
 122:Src/main.c    **** 
 123:Src/main.c    ****   SystemClock_Config();
 124:Src/main.c    **** 
 125:Src/main.c    ****   MX_GPIO_Init();
 126:Src/main.c    ****   MX_DMA_Init();
 127:Src/main.c    ****   MX_ADC_Init();
 128:Src/main.c    ****   MX_I2C1_Init();
 129:Src/main.c    ****   MX_I2C2_Init();
 130:Src/main.c    ****   MX_TIM1_Init();
 131:Src/main.c    ****   TIM3_Init();
 132:Src/main.c    **** 
 133:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 134:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 135:Src/main.c    **** 
 136:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_raw, 4);
 137:Src/main.c    **** 
 138:Src/main.c    ****   HAL_Delay(100);
 139:Src/main.c    ****   disp_init();
 140:Src/main.c    ****   HAL_Delay(150);
 141:Src/main.c    ****   set_screen();
 142:Src/main.c    ****   HAL_Delay(150);
 143:Src/main.c    ****   clear_screen();
 144:Src/main.c    **** 
 145:Src/main.c    ****   //DFU bootloader
 146:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 147:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
ARM GAS  /tmp/ccL0lKDS.s 			page 4


 148:Src/main.c    ****     draw_string(dfu_string, 1, 8 ,1);
 149:Src/main.c    ****     refresh();
 150:Src/main.c    ****     HAL_Delay(40);
 151:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 152:Src/main.c    ****     NVIC_SystemReset();
 153:Src/main.c    ****   } else {
 154:Src/main.c    ****     draw_string(otter_string, 15, 1 ,1);
 155:Src/main.c    ****     draw_string(by_string, 10, 9 ,1);
 156:Src/main.c    ****     refresh();
 157:Src/main.c    ****     HAL_Delay(1000);
 158:Src/main.c    ****     clear_screen();
 159:Src/main.c    ****     draw_string(assembly_string, 14, 1 ,1);
 160:Src/main.c    ****     draw_string(jbr_string, 8, 9 ,1);
 161:Src/main.c    ****     refresh();
 162:Src/main.c    **** #ifdef ENABLESERIAL
 163:Src/main.c    ****     //start USB CDC
 164:Src/main.c    ****     USBD_Init(&USBD_Device, &VCP_Desc, 0);
 165:Src/main.c    ****     USBD_RegisterClass(&USBD_Device, &USBD_CDC);
 166:Src/main.c    ****     USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 167:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 168:Src/main.c    ****     USBD_Start(&USBD_Device);
 169:Src/main.c    **** #endif
 170:Src/main.c    **** #ifdef DISPLAYCURRENT
 171:Src/main.c    ****       s.timeout = 20;
 172:Src/main.c    **** #endif
 173:Src/main.c    ****   }
 174:Src/main.c    **** 
 175:Src/main.c    ****   HAL_Delay(1000);
 176:Src/main.c    ****   MX_IWDG_Init();
 177:Src/main.c    **** 
 178:Src/main.c    ****   r.target = *((uint16_t *) 0x0800e400);
 179:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 180:Src/main.c    **** 
 181:Src/main.c    ****   while (1)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     HAL_Delay(50);
 184:Src/main.c    **** 
 185:Src/main.c    ****     //UI
 186:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B1_Pin);
 187:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 188:Src/main.c    **** 
 189:Src/main.c    ****     if(s.button[0] == 1){
 190:Src/main.c    ****       r.target -= 5;
 191:Src/main.c    ****       s.writeFlash = 1;
 192:Src/main.c    ****       HAL_Delay(40);
 193:Src/main.c    ****     }
 194:Src/main.c    **** 
 195:Src/main.c    ****     if(s.button[1] == 1){
 196:Src/main.c    ****       r.target += 5;
 197:Src/main.c    ****       s.writeFlash = 1;
 198:Src/main.c    ****       HAL_Delay(40);
 199:Src/main.c    ****     }
 200:Src/main.c    **** 
 201:Src/main.c    ****     r.target = CLAMP(r.target, 20, 400);
 202:Src/main.c    **** 
 203:Src/main.c    ****     if(s.writeFlash == 1){
 204:Src/main.c    ****       HAL_FLASH_Unlock();
ARM GAS  /tmp/ccL0lKDS.s 			page 5


 205:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 206:Src/main.c    ****       FLASH->AR = 0x0800e400;
 207:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 208:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 209:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 210:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 211:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 212:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 213:Src/main.c    ****         HAL_FLASH_Lock();
 214:Src/main.c    ****         s.writeFlash = 0;
 215:Src/main.c    ****       }
 216:Src/main.c    ****       #ifdef DISPLAYCURRENT
 217:Src/main.c    ****             s.timeout = 12;
 218:Src/main.c    ****       #endif
 219:Src/main.c    ****     }
 220:Src/main.c    **** 
 221:Src/main.c    **** #ifdef ENABLESERIAL
 222:Src/main.c    ****     // send temperature via USB CDC
 223:Src/main.c    ****     USB_printfloat(r.error);
 224:Src/main.c    **** #endif
 225:Src/main.c    **** 
 226:Src/main.c    ****     //super shitty display code
 227:Src/main.c    ****     unsigned char str1[14] = "          ";
 228:Src/main.c    ****     unsigned char str2[14] = "          ";
 229:Src/main.c    ****     unsigned char str3[14] = "          ";
 230:Src/main.c    ****     unsigned char str4[14] = "          ";
 231:Src/main.c    ****     sprintf((char * restrict) str1, "%d C   ", (uint16_t)r.target);
 232:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 233:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 234:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 235:Src/main.c    **** 
 236:Src/main.c    ****     clear_screen();
 237:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 238:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 239:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 240:Src/main.c    **** #ifdef DISPLAYCURRENT
 241:Src/main.c    ****     if(s.timeout == 0){
 242:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 243:Src/main.c    ****     } else {
 244:Src/main.c    ****       s.timeout--;
 245:Src/main.c    ****     }
 246:Src/main.c    **** #endif
 247:Src/main.c    ****     s.drawlineavg = (s.drawlineavg * DISP_AVG_FILTER) + (CLAMP(r.error*3.0f,0,30)*(1.0-DISP_AVG_FIL
 248:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 249:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 250:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 251:Src/main.c    ****     }
 252:Src/main.c    **** 
 253:Src/main.c    ****     refresh();
 254:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 255:Src/main.c    ****   }
 256:Src/main.c    **** }
 257:Src/main.c    **** 
 258:Src/main.c    **** // Main PID+two-way controller and ADC readout
 259:Src/main.c    **** void reg(void) {
 260:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 261:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
ARM GAS  /tmp/ccL0lKDS.s 			page 6


 262:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 263:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 264:Src/main.c    **** 
 265:Src/main.c    ****   s.ttipavg = FILT(s.ttipavg, s.ttip, TTIP_AVG_FILTER);
 266:Src/main.c    **** 
 267:Src/main.c    ****   // Check if within deadband, decide on two-way or PID control
 268:Src/main.c    ****   if(s.ttipavg >= r.target-r.deadband && s.ttipavg <= r.target+r.deadband){
 269:Src/main.c    ****     r.error = r.target - s.ttipavg;
 270:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 271:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 272:Src/main.c    ****     r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 273:Src/main.c    ****     r.errorprior = r.error;
 274:Src/main.c    ****   } else {
 275:Src/main.c    ****     if(s.ttipavg <= r.target){
 276:Src/main.c    ****       r.duty = wduty;
 277:Src/main.c    ****       r.error = 12.0;
 278:Src/main.c    ****     } else {
 279:Src/main.c    ****       r.duty = MIN_DUTY;
 280:Src/main.c    ****       r.error = 0.0;
 281:Src/main.c    ****     }
 282:Src/main.c    ****   }
 283:Src/main.c    **** 
 284:Src/main.c    ****   // detect if no tip is plugged in
 285:Src/main.c    ****   if(s.iin <= 0.001 && s.ttipavg > 300){
 286:Src/main.c    ****     r.duty = 100;
 287:Src/main.c    ****     r.error = 0.0;
 288:Src/main.c    ****     r.ierror = 0.0;
 289:Src/main.c    ****     r.derror = 0.0;
 290:Src/main.c    ****     r.errorprior = 0.0;
 291:Src/main.c    ****     wduty = 150;
 292:Src/main.c    ****   }
 293:Src/main.c    **** 
 294:Src/main.c    ****   r.duty = CLAMP(r.duty, MIN_DUTY, MAX_DUTY); // Clamp to duty cycle
 295:Src/main.c    **** 
 296:Src/main.c    ****   if(s.iin > s.imax && r.duty > 100){ // Current limiting
 297:Src/main.c    ****     wduty = r.duty - 2;
 298:Src/main.c    ****     r.duty -= 100;
 299:Src/main.c    ****   } else {
 300:Src/main.c    ****     wduty++;
 301:Src/main.c    ****     if(wduty >= MAX_DUTY) wduty = MAX_DUTY;
 302:Src/main.c    ****   }
 303:Src/main.c    **** 
 304:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r.duty);
 305:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4000);
 306:Src/main.c    **** }
 307:Src/main.c    **** 
 308:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //send USB cdc data
 309:Src/main.c    **** {
 310:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 311:Src/main.c    ****   {
 312:Src/main.c    ****     sendDataUSB = 0;
 313:Src/main.c    **** 
 314:Src/main.c    ****     USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[0], APP_TX_DATA_SIZE);
 315:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 316:Src/main.c    ****   }
 317:Src/main.c    **** }
 318:Src/main.c    **** 
ARM GAS  /tmp/ccL0lKDS.s 			page 7


 319:Src/main.c    **** void USB_printfloat(float _buf){
 320:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 321:Src/main.c    ****   sprintf((char * restrict) UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_
 322:Src/main.c    ****   sendDataUSB = 1;
 323:Src/main.c    **** }
 324:Src/main.c    **** 
 325:Src/main.c    **** 
 326:Src/main.c    **** // init code sequence by Ralim, thanks alot!
 327:Src/main.c    **** #define DEVICEADDR_OLED   (0x3c<<1)
 328:Src/main.c    **** #define OLED_WIDTH        96
 329:Src/main.c    **** #define FRAMEBUFFER_START 17
 330:Src/main.c    **** uint8_t screenBuffer[16 + (OLED_WIDTH * 2) + 10];  // The data buffer
 331:Src/main.c    **** const uint8_t REFRESH_COMMANDS[17] = { 0x80, 0xAF, 0x80, 0x21, 0x80, 0x20, 0x80, 0x7F, 0x80, 0xC0, 
 332:Src/main.c    **** uint8_t OLED_Setup_Array[] = {
 333:Src/main.c    **** 0x80, 0xAE, /*Display off*/
 334:Src/main.c    **** 0x80, 0xD5, /*Set display clock divide ratio / osc freq*/
 335:Src/main.c    **** 0x80, 0x52, /*Divide ratios*/
 336:Src/main.c    **** 0x80, 0xA8, /*Set Multiplex Ratio*/
 337:Src/main.c    **** 0x80, 0x0F, /*16 == max brightness,39==dimmest*/
 338:Src/main.c    **** 0x80, 0xC0, /*Set COM Scan direction*/
 339:Src/main.c    **** 0x80, 0xD3, /*Set vertical Display offset*/
 340:Src/main.c    **** 0x80, 0x00, /*0 Offset*/
 341:Src/main.c    **** 0x80, 0x40, /*Set Display start line to 0*/
 342:Src/main.c    **** 0x80, 0xA0, /*Set Segment remap to normal*/
 343:Src/main.c    **** 0x80, 0x8D, /*Charge Pump*/
 344:Src/main.c    **** 0x80, 0x14, /*Charge Pump settings*/
 345:Src/main.c    **** 0x80, 0xDA, /*Set VCOM Pins hardware config*/
 346:Src/main.c    **** 0x80, 0x02, /*Combination 2*/
 347:Src/main.c    **** 0x80, 0x81, /*Contrast*/
 348:Src/main.c    **** 0x80, 0x33, /*^51*/
 349:Src/main.c    **** 0x80, 0xD9, /*Set pre-charge period*/
 350:Src/main.c    **** 0x80, 0xF1, /*Pre charge period*/
 351:Src/main.c    **** 0x80, 0xDB, /*Adjust VCOMH regulator ouput*/
 352:Src/main.c    **** 0x80, 0x30, /*VCOM level*/
 353:Src/main.c    **** 0x80, 0xA4, /*Enable the display GDDR*/
 354:Src/main.c    **** 0x80, 0XA6, /*Normal display*/
 355:Src/main.c    **** 0x80, 0x20, /*Memory Mode*/
 356:Src/main.c    **** 0x80, 0x00, /*Wrap memory*/
 357:Src/main.c    **** 0x80, 0xAF /*Display on*/
 358:Src/main.c    **** };
 359:Src/main.c    **** 
 360:Src/main.c    **** //not Ralim anymore
 361:Src/main.c    **** void disp_init(void) {
 362:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 363:Src/main.c    ****   uint16_t _cnt = 0;
 364:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 365:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 366:Src/main.c    **** }
 367:Src/main.c    **** 
 368:Src/main.c    **** void refresh(void) {
 369:Src/main.c    ****   uint16_t _cnt = 0;
 370:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 371:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** void clear_screen(void) {
 375:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
ARM GAS  /tmp/ccL0lKDS.s 			page 8


 376:Src/main.c    **** }
 377:Src/main.c    **** void set_screen(void) {
 378:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 379:Src/main.c    **** }
 380:Src/main.c    **** 
 381:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color){
 382:Src/main.c    ****   for(int i = 0; i <= h; i++){
 383:Src/main.c    ****     write_pixel(x, y+i, color);
 384:Src/main.c    ****   }
 385:Src/main.c    **** }
 386:Src/main.c    **** 
 387:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color){
 388:Src/main.c    ****   if(x>95 || y >15){
 389:Src/main.c    ****     return;
 390:Src/main.c    ****   }
 391:Src/main.c    ****   if(color == 1){
 392:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 393:Src/main.c    ****   } else if (color == 0){
 394:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 395:Src/main.c    ****   }
 396:Src/main.c    **** }
 397:Src/main.c    **** 
 398:Src/main.c    **** #define CHAR_WIDTH 6
 399:Src/main.c    **** #define CHAR_HEIGHT 8
 400:Src/main.c    **** void draw_char(unsigned char c, uint8_t x, uint8_t y, uint8_t brightness) {
 401:Src/main.c    ****     c = c & 0x7F;
 402:Src/main.c    ****     if (c < ' ') {
 403:Src/main.c    ****         c = 0;
 404:Src/main.c    ****     } else {
 405:Src/main.c    ****         c -= ' ';
 406:Src/main.c    ****     }
 407:Src/main.c    ****     uint8_t * chr = (uint8_t *) font[c];
 408:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 409:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 410:Src/main.c    ****             if (chr[j] & (1<<i)) {
 411:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 412:Src/main.c    ****             } else {
 413:Src/main.c    ****                 write_pixel(x+j, y+i, 0);
 414:Src/main.c    ****             }
 415:Src/main.c    ****         }
 416:Src/main.c    ****     }
 417:Src/main.c    **** }
 418:Src/main.c    **** 
 419:Src/main.c    **** void draw_string(const unsigned char* str, uint8_t x, uint8_t y, uint8_t brightness) {
 420:Src/main.c    ****     while (*str) {
 421:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 422:Src/main.c    ****         x += CHAR_WIDTH;
 423:Src/main.c    ****     }
 424:Src/main.c    **** }
 425:Src/main.c    **** 
 426:Src/main.c    **** void SystemClock_Config(void)
 427:Src/main.c    **** {
 428:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 429:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 430:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 431:Src/main.c    **** 
 432:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
ARM GAS  /tmp/ccL0lKDS.s 			page 9


 433:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 434:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 435:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 436:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 437:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 438:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 439:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 440:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 441:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 442:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 443:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 444:Src/main.c    **** 
 445:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 446:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 447:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 448:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 449:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 450:Src/main.c    **** 
 451:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 452:Src/main.c    **** 
 453:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 454:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 455:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 456:Src/main.c    **** 
 457:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 458:Src/main.c    **** }
 459:Src/main.c    **** 
 460:Src/main.c    **** static void MX_ADC_Init(void)
 461:Src/main.c    **** {
 462:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 463:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 464:Src/main.c    **** 
 465:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 466:Src/main.c    **** 
 467:Src/main.c    ****   hadc.Instance = ADC1;
 468:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 469:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 470:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 471:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 472:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 473:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 474:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 475:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 476:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 477:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 478:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 479:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 480:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 481:Src/main.c    ****   HAL_ADC_Init(&hadc);
 482:Src/main.c    **** 
 483:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 484:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 485:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 486:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 487:Src/main.c    **** 
 488:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 489:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
ARM GAS  /tmp/ccL0lKDS.s 			page 10


 490:Src/main.c    **** 
 491:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 492:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 493:Src/main.c    **** 
 494:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 495:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 496:Src/main.c    **** 
 497:Src/main.c    ****   HAL_ADC_MspInit(&hadc);
 498:Src/main.c    **** }
 499:Src/main.c    **** 
 500:Src/main.c    **** static void MX_I2C1_Init(void)
 501:Src/main.c    **** {
 502:Src/main.c    **** 
 503:Src/main.c    ****   hi2c1.Instance = I2C1;
 504:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 505:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 506:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 507:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 508:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 509:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 510:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 511:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 512:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 513:Src/main.c    **** 
 514:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 515:Src/main.c    **** 
 516:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 517:Src/main.c    **** }
 518:Src/main.c    **** 
 519:Src/main.c    **** static void MX_I2C2_Init(void)
 520:Src/main.c    **** {
 521:Src/main.c    **** 
 522:Src/main.c    ****   hi2c2.Instance = I2C2;
 523:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 524:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 525:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 526:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 527:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 528:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 529:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 530:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 531:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 532:Src/main.c    **** 
 533:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 534:Src/main.c    **** 
 535:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 536:Src/main.c    **** }
 537:Src/main.c    **** 
 538:Src/main.c    **** static void MX_IWDG_Init(void)
 539:Src/main.c    **** {
 540:Src/main.c    ****   hiwdg.Instance = IWDG;
 541:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 542:Src/main.c    ****   hiwdg.Init.Window = 4095;
 543:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 544:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 545:Src/main.c    **** }
 546:Src/main.c    **** 
ARM GAS  /tmp/ccL0lKDS.s 			page 11


 547:Src/main.c    **** static void TIM3_Init(void)
 548:Src/main.c    **** {
 549:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 550:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 551:Src/main.c    **** 
 552:Src/main.c    ****   /*
 553:Src/main.c    ****        + Period = 10000 - 1
 554:Src/main.c    ****        + Prescaler = ((8000000/2)/10000) - 1
 555:Src/main.c    **** 
 556:Src/main.c    ****   */
 557:Src/main.c    ****   htim3.Instance = TIM3;
 558:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 559:Src/main.c    ****   htim3.Init.Prescaler = 399;
 560:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 561:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 562:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 563:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 564:Src/main.c    ****   {
 565:Src/main.c    ****     /* Initialization Error */
 566:Src/main.c    ****     Error_Handler();
 567:Src/main.c    ****   }
 568:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 569:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 570:Src/main.c    **** }
 571:Src/main.c    **** 
 572:Src/main.c    **** static void MX_TIM1_Init(void)
 573:Src/main.c    **** {
 574:Src/main.c    **** 
 575:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 576:Src/main.c    **** 
 577:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 578:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 579:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 580:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 581:Src/main.c    **** 
 582:Src/main.c    ****   htim1.Instance = TIM1;
 583:Src/main.c    ****   htim1.Init.Prescaler = 6; // 2048
 584:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 585:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 586:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 587:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 588:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 589:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 590:Src/main.c    **** 
 591:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 592:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 593:Src/main.c    **** 
 594:Src/main.c    ****   HAL_TIM_PWM_Init(&htim1);
 595:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 596:Src/main.c    **** 
 597:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 598:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 599:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 600:Src/main.c    **** 
 601:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 602:Src/main.c    ****   sConfigOC.Pulse = 0;
 603:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
ARM GAS  /tmp/ccL0lKDS.s 			page 12


 604:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 605:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 606:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 607:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 608:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 609:Src/main.c    **** 
 610:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 611:Src/main.c    ****   sConfigOC.Pulse = 10;
 612:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 613:Src/main.c    **** 
 614:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 615:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 616:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 617:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 618:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 619:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 620:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 621:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 622:Src/main.c    **** 
 623:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 624:Src/main.c    **** }
 625:Src/main.c    **** /*
 626:Src/main.c    **** static void MX_TIM2_Init(void)
 627:Src/main.c    **** {
 628:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 629:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 630:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 631:Src/main.c    **** 
 632:Src/main.c    ****   htim2.Instance = TIM2;
 633:Src/main.c    ****   htim2.Init.Prescaler = 2096;
 634:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 635:Src/main.c    ****   htim2.Init.Period = 4096;
 636:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 637:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 638:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 639:Src/main.c    **** 
 640:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 641:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 642:Src/main.c    **** 
 643:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 644:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 645:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 646:Src/main.c    **** 
 647:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 648:Src/main.c    ****   sConfigOC.Pulse = 30;
 649:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 650:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 651:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 652:Src/main.c    **** 
 653:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 654:Src/main.c    **** 
 655:Src/main.c    **** }
 656:Src/main.c    **** */
 657:Src/main.c    **** 
 658:Src/main.c    **** static void MX_DMA_Init(void)
 659:Src/main.c    **** {
 660:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
ARM GAS  /tmp/ccL0lKDS.s 			page 13


 661:Src/main.c    **** 
 662:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 663:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 664:Src/main.c    **** 
 665:Src/main.c    ****   HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 666:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 667:Src/main.c    ****   /*
 668:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 669:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 670:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 671:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 672:Src/main.c    ****   */
 673:Src/main.c    **** 
 674:Src/main.c    **** }
 675:Src/main.c    **** 
 676:Src/main.c    **** static void MX_GPIO_Init(void)
 677:Src/main.c    **** {
  26              		.loc 1 677 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 678:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 678 3 view .LVU1
  40              		.loc 1 678 20 is_stmt 0 view .LVU2
  41 0004 1422     		movs	r2, #20
  42 0006 0021     		movs	r1, #0
  43 0008 03A8     		add	r0, sp, #12
  44 000a FFF7FEFF 		bl	memset
  45              	.LVL0:
 679:Src/main.c    **** 
 680:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  46              		.loc 1 680 3 is_stmt 1 view .LVU3
  47              	.LBB8:
  48              		.loc 1 680 3 view .LVU4
  49              		.loc 1 680 3 view .LVU5
  50 000e 1D4B     		ldr	r3, .L2
  51 0010 5969     		ldr	r1, [r3, #20]
  52 0012 8020     		movs	r0, #128
  53 0014 8002     		lsls	r0, r0, #10
  54 0016 0143     		orrs	r1, r0
  55 0018 5961     		str	r1, [r3, #20]
  56              		.loc 1 680 3 view .LVU6
  57 001a 5A69     		ldr	r2, [r3, #20]
  58 001c 0240     		ands	r2, r0
  59 001e 0092     		str	r2, [sp]
  60              		.loc 1 680 3 view .LVU7
  61 0020 009A     		ldr	r2, [sp]
  62              	.LBE8:
ARM GAS  /tmp/ccL0lKDS.s 			page 14


  63              		.loc 1 680 3 view .LVU8
 681:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 681 3 view .LVU9
  65              	.LBB9:
  66              		.loc 1 681 3 view .LVU10
  67              		.loc 1 681 3 view .LVU11
  68 0022 5969     		ldr	r1, [r3, #20]
  69 0024 8020     		movs	r0, #128
  70 0026 C002     		lsls	r0, r0, #11
  71 0028 0143     		orrs	r1, r0
  72 002a 5961     		str	r1, [r3, #20]
  73              		.loc 1 681 3 view .LVU12
  74 002c 5A69     		ldr	r2, [r3, #20]
  75 002e 0240     		ands	r2, r0
  76 0030 0192     		str	r2, [sp, #4]
  77              		.loc 1 681 3 view .LVU13
  78 0032 019A     		ldr	r2, [sp, #4]
  79              	.LBE9:
  80              		.loc 1 681 3 view .LVU14
 682:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  81              		.loc 1 682 3 view .LVU15
  82              	.LBB10:
  83              		.loc 1 682 3 view .LVU16
  84              		.loc 1 682 3 view .LVU17
  85 0034 5A69     		ldr	r2, [r3, #20]
  86 0036 8021     		movs	r1, #128
  87 0038 0903     		lsls	r1, r1, #12
  88 003a 0A43     		orrs	r2, r1
  89 003c 5A61     		str	r2, [r3, #20]
  90              		.loc 1 682 3 view .LVU18
  91 003e 5B69     		ldr	r3, [r3, #20]
  92 0040 0B40     		ands	r3, r1
  93 0042 0293     		str	r3, [sp, #8]
  94              		.loc 1 682 3 view .LVU19
  95 0044 029B     		ldr	r3, [sp, #8]
  96              	.LBE10:
  97              		.loc 1 682 3 view .LVU20
 683:Src/main.c    **** 
 684:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  98              		.loc 1 684 3 view .LVU21
  99              		.loc 1 684 23 is_stmt 0 view .LVU22
 100 0046 1823     		movs	r3, #24
 101 0048 0393     		str	r3, [sp, #12]
 685:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 102              		.loc 1 685 3 is_stmt 1 view .LVU23
 686:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 103              		.loc 1 686 3 view .LVU24
 104              		.loc 1 686 24 is_stmt 0 view .LVU25
 105 004a 0225     		movs	r5, #2
 106 004c 0595     		str	r5, [sp, #20]
 687:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 107              		.loc 1 687 3 is_stmt 1 view .LVU26
 108 004e 9020     		movs	r0, #144
 109 0050 03A9     		add	r1, sp, #12
 110 0052 C005     		lsls	r0, r0, #23
 111 0054 FFF7FEFF 		bl	HAL_GPIO_Init
 112              	.LVL1:
ARM GAS  /tmp/ccL0lKDS.s 			page 15


 688:Src/main.c    **** 
 689:Src/main.c    ****   GPIO_InitStruct.Pin = B1_1_Pin;
 113              		.loc 1 689 3 view .LVU27
 114              		.loc 1 689 23 is_stmt 0 view .LVU28
 115 0058 8023     		movs	r3, #128
 116 005a 9B01     		lsls	r3, r3, #6
 117 005c 0393     		str	r3, [sp, #12]
 690:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 118              		.loc 1 690 3 is_stmt 1 view .LVU29
 119              		.loc 1 690 24 is_stmt 0 view .LVU30
 120 005e 0024     		movs	r4, #0
 121 0060 0494     		str	r4, [sp, #16]
 691:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 122              		.loc 1 691 3 is_stmt 1 view .LVU31
 123              		.loc 1 691 24 is_stmt 0 view .LVU32
 124 0062 0595     		str	r5, [sp, #20]
 692:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 125              		.loc 1 692 3 is_stmt 1 view .LVU33
 126 0064 03A9     		add	r1, sp, #12
 127 0066 0848     		ldr	r0, .L2+4
 128 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL2:
 693:Src/main.c    **** 
 694:Src/main.c    **** 
 695:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
 130              		.loc 1 695 3 view .LVU34
 131              		.loc 1 695 23 is_stmt 0 view .LVU35
 132 006c 8023     		movs	r3, #128
 133 006e 5B01     		lsls	r3, r3, #5
 134 0070 0393     		str	r3, [sp, #12]
 696:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 135              		.loc 1 696 3 is_stmt 1 view .LVU36
 136              		.loc 1 696 24 is_stmt 0 view .LVU37
 137 0072 0494     		str	r4, [sp, #16]
 697:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 138              		.loc 1 697 3 is_stmt 1 view .LVU38
 139              		.loc 1 697 24 is_stmt 0 view .LVU39
 140 0074 0594     		str	r4, [sp, #20]
 698:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 141              		.loc 1 698 3 is_stmt 1 view .LVU40
 142 0076 03A9     		add	r1, sp, #12
 143 0078 0448     		ldr	r0, .L2+8
 144 007a FFF7FEFF 		bl	HAL_GPIO_Init
 145              	.LVL3:
 699:Src/main.c    **** 
 700:Src/main.c    **** }
 146              		.loc 1 700 1 is_stmt 0 view .LVU41
 147 007e 09B0     		add	sp, sp, #36
 148              		@ sp needed
 149 0080 30BD     		pop	{r4, r5, pc}
 150              	.L3:
 151 0082 C046     		.align	2
 152              	.L2:
 153 0084 00100240 		.word	1073876992
 154 0088 00080048 		.word	1207961600
 155 008c 00040048 		.word	1207960576
 156              		.cfi_endproc
ARM GAS  /tmp/ccL0lKDS.s 			page 16


 157              	.LFE57:
 159              		.section	.text.MX_DMA_Init,"ax",%progbits
 160              		.align	1
 161              		.syntax unified
 162              		.code	16
 163              		.thumb_func
 164              		.fpu softvfp
 166              	MX_DMA_Init:
 167              	.LFB56:
 659:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 168              		.loc 1 659 1 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 8
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0000 00B5     		push	{lr}
 173              	.LCFI2:
 174              		.cfi_def_cfa_offset 4
 175              		.cfi_offset 14, -4
 176 0002 83B0     		sub	sp, sp, #12
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 16
 660:Src/main.c    **** 
 179              		.loc 1 660 3 view .LVU43
 180              	.LBB11:
 660:Src/main.c    **** 
 181              		.loc 1 660 3 view .LVU44
 660:Src/main.c    **** 
 182              		.loc 1 660 3 view .LVU45
 183 0004 0D4A     		ldr	r2, .L5
 184 0006 5169     		ldr	r1, [r2, #20]
 185 0008 0123     		movs	r3, #1
 186 000a 1943     		orrs	r1, r3
 187 000c 5161     		str	r1, [r2, #20]
 660:Src/main.c    **** 
 188              		.loc 1 660 3 view .LVU46
 189 000e 5269     		ldr	r2, [r2, #20]
 190 0010 1340     		ands	r3, r2
 191 0012 0193     		str	r3, [sp, #4]
 660:Src/main.c    **** 
 192              		.loc 1 660 3 view .LVU47
 193 0014 019B     		ldr	r3, [sp, #4]
 194              	.LBE11:
 660:Src/main.c    **** 
 195              		.loc 1 660 3 view .LVU48
 662:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 196              		.loc 1 662 3 view .LVU49
 197 0016 0022     		movs	r2, #0
 198 0018 0021     		movs	r1, #0
 199 001a 0920     		movs	r0, #9
 200 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 201              	.LVL4:
 663:Src/main.c    **** 
 202              		.loc 1 663 3 view .LVU50
 203 0020 0920     		movs	r0, #9
 204 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 205              	.LVL5:
 665:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
ARM GAS  /tmp/ccL0lKDS.s 			page 17


 206              		.loc 1 665 3 view .LVU51
 207 0026 0022     		movs	r2, #0
 208 0028 0021     		movs	r1, #0
 209 002a 1020     		movs	r0, #16
 210 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 211              	.LVL6:
 666:Src/main.c    ****   /*
 212              		.loc 1 666 3 view .LVU52
 213 0030 1020     		movs	r0, #16
 214 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 215              	.LVL7:
 674:Src/main.c    **** 
 216              		.loc 1 674 1 is_stmt 0 view .LVU53
 217 0036 03B0     		add	sp, sp, #12
 218              		@ sp needed
 219 0038 00BD     		pop	{pc}
 220              	.L6:
 221 003a C046     		.align	2
 222              	.L5:
 223 003c 00100240 		.word	1073876992
 224              		.cfi_endproc
 225              	.LFE56:
 227              		.section	.text.MX_ADC_Init,"ax",%progbits
 228              		.align	1
 229              		.syntax unified
 230              		.code	16
 231              		.thumb_func
 232              		.fpu softvfp
 234              	MX_ADC_Init:
 235              	.LFB50:
 461:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 236              		.loc 1 461 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 24
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 0000 70B5     		push	{r4, r5, r6, lr}
 241              	.LCFI4:
 242              		.cfi_def_cfa_offset 16
 243              		.cfi_offset 4, -16
 244              		.cfi_offset 5, -12
 245              		.cfi_offset 6, -8
 246              		.cfi_offset 14, -4
 247 0002 86B0     		sub	sp, sp, #24
 248              	.LCFI5:
 249              		.cfi_def_cfa_offset 40
 462:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 250              		.loc 1 462 3 view .LVU55
 251              	.LBB12:
 462:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 252              		.loc 1 462 3 view .LVU56
 462:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 253              		.loc 1 462 3 view .LVU57
 254 0004 274B     		ldr	r3, .L8
 255 0006 5A69     		ldr	r2, [r3, #20]
 256 0008 0126     		movs	r6, #1
 257 000a 3243     		orrs	r2, r6
 258 000c 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccL0lKDS.s 			page 18


 462:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 259              		.loc 1 462 3 view .LVU58
 260 000e 5A69     		ldr	r2, [r3, #20]
 261 0010 3240     		ands	r2, r6
 262 0012 0192     		str	r2, [sp, #4]
 462:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 263              		.loc 1 462 3 view .LVU59
 264 0014 019A     		ldr	r2, [sp, #4]
 265              	.LBE12:
 462:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 266              		.loc 1 462 3 view .LVU60
 463:Src/main.c    **** 
 267              		.loc 1 463 3 view .LVU61
 268              	.LBB13:
 463:Src/main.c    **** 
 269              		.loc 1 463 3 view .LVU62
 463:Src/main.c    **** 
 270              		.loc 1 463 3 view .LVU63
 271 0016 9A69     		ldr	r2, [r3, #24]
 272 0018 8021     		movs	r1, #128
 273 001a 8900     		lsls	r1, r1, #2
 274 001c 0A43     		orrs	r2, r1
 275 001e 9A61     		str	r2, [r3, #24]
 463:Src/main.c    **** 
 276              		.loc 1 463 3 view .LVU64
 277 0020 9B69     		ldr	r3, [r3, #24]
 278 0022 0B40     		ands	r3, r1
 279 0024 0293     		str	r3, [sp, #8]
 463:Src/main.c    **** 
 280              		.loc 1 463 3 view .LVU65
 281 0026 029B     		ldr	r3, [sp, #8]
 282              	.LBE13:
 463:Src/main.c    **** 
 283              		.loc 1 463 3 view .LVU66
 465:Src/main.c    **** 
 284              		.loc 1 465 3 view .LVU67
 465:Src/main.c    **** 
 285              		.loc 1 465 26 is_stmt 0 view .LVU68
 286 0028 0C22     		movs	r2, #12
 287 002a 0021     		movs	r1, #0
 288 002c 03A8     		add	r0, sp, #12
 289 002e FFF7FEFF 		bl	memset
 290              	.LVL8:
 467:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 291              		.loc 1 467 3 is_stmt 1 view .LVU69
 467:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 292              		.loc 1 467 17 is_stmt 0 view .LVU70
 293 0032 1D4C     		ldr	r4, .L8+4
 294 0034 1D4B     		ldr	r3, .L8+8
 295 0036 2360     		str	r3, [r4]
 468:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 296              		.loc 1 468 3 is_stmt 1 view .LVU71
 468:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 297              		.loc 1 468 28 is_stmt 0 view .LVU72
 298 0038 0025     		movs	r5, #0
 299 003a 6560     		str	r5, [r4, #4]
 469:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
ARM GAS  /tmp/ccL0lKDS.s 			page 19


 300              		.loc 1 469 3 is_stmt 1 view .LVU73
 469:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 301              		.loc 1 469 24 is_stmt 0 view .LVU74
 302 003c A560     		str	r5, [r4, #8]
 470:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 303              		.loc 1 470 3 is_stmt 1 view .LVU75
 470:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 304              		.loc 1 470 23 is_stmt 0 view .LVU76
 305 003e E560     		str	r5, [r4, #12]
 471:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 306              		.loc 1 471 3 is_stmt 1 view .LVU77
 471:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 307              		.loc 1 471 26 is_stmt 0 view .LVU78
 308 0040 2661     		str	r6, [r4, #16]
 472:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 309              		.loc 1 472 3 is_stmt 1 view .LVU79
 472:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 310              		.loc 1 472 26 is_stmt 0 view .LVU80
 311 0042 0823     		movs	r3, #8
 312 0044 6361     		str	r3, [r4, #20]
 473:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 313              		.loc 1 473 3 is_stmt 1 view .LVU81
 473:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 314              		.loc 1 473 30 is_stmt 0 view .LVU82
 315 0046 A561     		str	r5, [r4, #24]
 474:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 316              		.loc 1 474 3 is_stmt 1 view .LVU83
 474:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 317              		.loc 1 474 34 is_stmt 0 view .LVU84
 318 0048 E561     		str	r5, [r4, #28]
 475:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 319              		.loc 1 475 3 is_stmt 1 view .LVU85
 475:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 320              		.loc 1 475 32 is_stmt 0 view .LVU86
 321 004a 2562     		str	r5, [r4, #32]
 476:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 322              		.loc 1 476 3 is_stmt 1 view .LVU87
 476:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 323              		.loc 1 476 35 is_stmt 0 view .LVU88
 324 004c 6562     		str	r5, [r4, #36]
 477:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 325              		.loc 1 477 3 is_stmt 1 view .LVU89
 477:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 326              		.loc 1 477 30 is_stmt 0 view .LVU90
 327 004e 3833     		adds	r3, r3, #56
 328 0050 A362     		str	r3, [r4, #40]
 478:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 329              		.loc 1 478 3 is_stmt 1 view .LVU91
 478:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 330              		.loc 1 478 34 is_stmt 0 view .LVU92
 331 0052 8023     		movs	r3, #128
 332 0054 DB00     		lsls	r3, r3, #3
 333 0056 E362     		str	r3, [r4, #44]
 479:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 334              		.loc 1 479 3 is_stmt 1 view .LVU93
 479:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 335              		.loc 1 479 35 is_stmt 0 view .LVU94
ARM GAS  /tmp/ccL0lKDS.s 			page 20


 336 0058 2663     		str	r6, [r4, #48]
 480:Src/main.c    ****   HAL_ADC_Init(&hadc);
 337              		.loc 1 480 3 is_stmt 1 view .LVU95
 480:Src/main.c    ****   HAL_ADC_Init(&hadc);
 338              		.loc 1 480 21 is_stmt 0 view .LVU96
 339 005a 6663     		str	r6, [r4, #52]
 481:Src/main.c    **** 
 340              		.loc 1 481 3 is_stmt 1 view .LVU97
 341 005c 2000     		movs	r0, r4
 342 005e FFF7FEFF 		bl	HAL_ADC_Init
 343              	.LVL9:
 483:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 344              		.loc 1 483 3 view .LVU98
 483:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 345              		.loc 1 483 19 is_stmt 0 view .LVU99
 346 0062 0395     		str	r5, [sp, #12]
 484:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 347              		.loc 1 484 3 is_stmt 1 view .LVU100
 484:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 348              		.loc 1 484 16 is_stmt 0 view .LVU101
 349 0064 8023     		movs	r3, #128
 350 0066 5B01     		lsls	r3, r3, #5
 351 0068 0493     		str	r3, [sp, #16]
 485:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 352              		.loc 1 485 3 is_stmt 1 view .LVU102
 485:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 353              		.loc 1 485 24 is_stmt 0 view .LVU103
 354 006a 0623     		movs	r3, #6
 355 006c 0593     		str	r3, [sp, #20]
 486:Src/main.c    **** 
 356              		.loc 1 486 3 is_stmt 1 view .LVU104
 357 006e 03A9     		add	r1, sp, #12
 358 0070 2000     		movs	r0, r4
 359 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 360              	.LVL10:
 488:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 361              		.loc 1 488 3 view .LVU105
 488:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 362              		.loc 1 488 19 is_stmt 0 view .LVU106
 363 0076 0396     		str	r6, [sp, #12]
 489:Src/main.c    **** 
 364              		.loc 1 489 3 is_stmt 1 view .LVU107
 365 0078 03A9     		add	r1, sp, #12
 366 007a 2000     		movs	r0, r4
 367 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 368              	.LVL11:
 491:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 369              		.loc 1 491 3 view .LVU108
 491:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 370              		.loc 1 491 19 is_stmt 0 view .LVU109
 371 0080 0223     		movs	r3, #2
 372 0082 0393     		str	r3, [sp, #12]
 492:Src/main.c    **** 
 373              		.loc 1 492 3 is_stmt 1 view .LVU110
 374 0084 03A9     		add	r1, sp, #12
 375 0086 2000     		movs	r0, r4
 376 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  /tmp/ccL0lKDS.s 			page 21


 377              	.LVL12:
 494:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 378              		.loc 1 494 3 view .LVU111
 494:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 379              		.loc 1 494 19 is_stmt 0 view .LVU112
 380 008c 0523     		movs	r3, #5
 381 008e 0393     		str	r3, [sp, #12]
 495:Src/main.c    **** 
 382              		.loc 1 495 3 is_stmt 1 view .LVU113
 383 0090 03A9     		add	r1, sp, #12
 384 0092 2000     		movs	r0, r4
 385 0094 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 386              	.LVL13:
 497:Src/main.c    **** }
 387              		.loc 1 497 3 view .LVU114
 388 0098 2000     		movs	r0, r4
 389 009a FFF7FEFF 		bl	HAL_ADC_MspInit
 390              	.LVL14:
 498:Src/main.c    **** 
 391              		.loc 1 498 1 is_stmt 0 view .LVU115
 392 009e 06B0     		add	sp, sp, #24
 393              		@ sp needed
 394 00a0 70BD     		pop	{r4, r5, r6, pc}
 395              	.L9:
 396 00a2 C046     		.align	2
 397              	.L8:
 398 00a4 00100240 		.word	1073876992
 399 00a8 00000000 		.word	.LANCHOR0
 400 00ac 00240140 		.word	1073816576
 401              		.cfi_endproc
 402              	.LFE50:
 404              		.section	.text.MX_I2C1_Init,"ax",%progbits
 405              		.align	1
 406              		.syntax unified
 407              		.code	16
 408              		.thumb_func
 409              		.fpu softvfp
 411              	MX_I2C1_Init:
 412              	.LFB51:
 501:Src/main.c    **** 
 413              		.loc 1 501 1 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 10B5     		push	{r4, lr}
 418              	.LCFI6:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 4, -8
 421              		.cfi_offset 14, -4
 503:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 422              		.loc 1 503 3 view .LVU117
 503:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 423              		.loc 1 503 18 is_stmt 0 view .LVU118
 424 0002 0D4C     		ldr	r4, .L11
 425 0004 0D4B     		ldr	r3, .L11+4
 426 0006 2360     		str	r3, [r4]
 504:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
ARM GAS  /tmp/ccL0lKDS.s 			page 22


 427              		.loc 1 504 3 is_stmt 1 view .LVU119
 504:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 428              		.loc 1 504 21 is_stmt 0 view .LVU120
 429 0008 0D4B     		ldr	r3, .L11+8
 430 000a 6360     		str	r3, [r4, #4]
 505:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 431              		.loc 1 505 3 is_stmt 1 view .LVU121
 505:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 432              		.loc 1 505 26 is_stmt 0 view .LVU122
 433 000c 0023     		movs	r3, #0
 434 000e A360     		str	r3, [r4, #8]
 506:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 435              		.loc 1 506 3 is_stmt 1 view .LVU123
 506:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 436              		.loc 1 506 29 is_stmt 0 view .LVU124
 437 0010 0122     		movs	r2, #1
 438 0012 E260     		str	r2, [r4, #12]
 507:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 439              		.loc 1 507 3 is_stmt 1 view .LVU125
 507:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 440              		.loc 1 507 30 is_stmt 0 view .LVU126
 441 0014 2361     		str	r3, [r4, #16]
 508:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 442              		.loc 1 508 3 is_stmt 1 view .LVU127
 508:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 443              		.loc 1 508 26 is_stmt 0 view .LVU128
 444 0016 6361     		str	r3, [r4, #20]
 509:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 445              		.loc 1 509 3 is_stmt 1 view .LVU129
 509:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 446              		.loc 1 509 31 is_stmt 0 view .LVU130
 447 0018 A361     		str	r3, [r4, #24]
 510:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 448              		.loc 1 510 3 is_stmt 1 view .LVU131
 510:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 449              		.loc 1 510 30 is_stmt 0 view .LVU132
 450 001a E361     		str	r3, [r4, #28]
 511:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 451              		.loc 1 511 3 is_stmt 1 view .LVU133
 511:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 452              		.loc 1 511 28 is_stmt 0 view .LVU134
 453 001c 2362     		str	r3, [r4, #32]
 512:Src/main.c    **** 
 454              		.loc 1 512 3 is_stmt 1 view .LVU135
 455 001e 2000     		movs	r0, r4
 456 0020 FFF7FEFF 		bl	HAL_I2C_Init
 457              	.LVL15:
 514:Src/main.c    **** 
 458              		.loc 1 514 3 view .LVU136
 459 0024 0021     		movs	r1, #0
 460 0026 2000     		movs	r0, r4
 461 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 462              	.LVL16:
 516:Src/main.c    **** }
 463              		.loc 1 516 3 view .LVU137
 464 002c 0021     		movs	r1, #0
 465 002e 2000     		movs	r0, r4
ARM GAS  /tmp/ccL0lKDS.s 			page 23


 466 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 467              	.LVL17:
 517:Src/main.c    **** 
 468              		.loc 1 517 1 is_stmt 0 view .LVU138
 469              		@ sp needed
 470 0034 10BD     		pop	{r4, pc}
 471              	.L12:
 472 0036 C046     		.align	2
 473              	.L11:
 474 0038 00000000 		.word	.LANCHOR1
 475 003c 00540040 		.word	1073763328
 476 0040 0E090020 		.word	536873230
 477              		.cfi_endproc
 478              	.LFE51:
 480              		.section	.text.MX_I2C2_Init,"ax",%progbits
 481              		.align	1
 482              		.syntax unified
 483              		.code	16
 484              		.thumb_func
 485              		.fpu softvfp
 487              	MX_I2C2_Init:
 488              	.LFB52:
 520:Src/main.c    **** 
 489              		.loc 1 520 1 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493 0000 10B5     		push	{r4, lr}
 494              	.LCFI7:
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 4, -8
 497              		.cfi_offset 14, -4
 522:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 498              		.loc 1 522 3 view .LVU140
 522:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 499              		.loc 1 522 18 is_stmt 0 view .LVU141
 500 0002 0D4C     		ldr	r4, .L14
 501 0004 0D4B     		ldr	r3, .L14+4
 502 0006 2360     		str	r3, [r4]
 523:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 503              		.loc 1 523 3 is_stmt 1 view .LVU142
 523:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 504              		.loc 1 523 21 is_stmt 0 view .LVU143
 505 0008 0D4B     		ldr	r3, .L14+8
 506 000a 6360     		str	r3, [r4, #4]
 524:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 507              		.loc 1 524 3 is_stmt 1 view .LVU144
 524:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 508              		.loc 1 524 26 is_stmt 0 view .LVU145
 509 000c 0023     		movs	r3, #0
 510 000e A360     		str	r3, [r4, #8]
 525:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 511              		.loc 1 525 3 is_stmt 1 view .LVU146
 525:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 512              		.loc 1 525 29 is_stmt 0 view .LVU147
 513 0010 0122     		movs	r2, #1
 514 0012 E260     		str	r2, [r4, #12]
ARM GAS  /tmp/ccL0lKDS.s 			page 24


 526:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 515              		.loc 1 526 3 is_stmt 1 view .LVU148
 526:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 516              		.loc 1 526 30 is_stmt 0 view .LVU149
 517 0014 2361     		str	r3, [r4, #16]
 527:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 518              		.loc 1 527 3 is_stmt 1 view .LVU150
 527:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 519              		.loc 1 527 26 is_stmt 0 view .LVU151
 520 0016 6361     		str	r3, [r4, #20]
 528:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 521              		.loc 1 528 3 is_stmt 1 view .LVU152
 528:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 522              		.loc 1 528 31 is_stmt 0 view .LVU153
 523 0018 A361     		str	r3, [r4, #24]
 529:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 524              		.loc 1 529 3 is_stmt 1 view .LVU154
 529:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 525              		.loc 1 529 30 is_stmt 0 view .LVU155
 526 001a E361     		str	r3, [r4, #28]
 530:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 527              		.loc 1 530 3 is_stmt 1 view .LVU156
 530:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 528              		.loc 1 530 28 is_stmt 0 view .LVU157
 529 001c 2362     		str	r3, [r4, #32]
 531:Src/main.c    **** 
 530              		.loc 1 531 3 is_stmt 1 view .LVU158
 531 001e 2000     		movs	r0, r4
 532 0020 FFF7FEFF 		bl	HAL_I2C_Init
 533              	.LVL18:
 533:Src/main.c    **** 
 534              		.loc 1 533 3 view .LVU159
 535 0024 0021     		movs	r1, #0
 536 0026 2000     		movs	r0, r4
 537 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 538              	.LVL19:
 535:Src/main.c    **** }
 539              		.loc 1 535 3 view .LVU160
 540 002c 0021     		movs	r1, #0
 541 002e 2000     		movs	r0, r4
 542 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 543              	.LVL20:
 536:Src/main.c    **** 
 544              		.loc 1 536 1 is_stmt 0 view .LVU161
 545              		@ sp needed
 546 0034 10BD     		pop	{r4, pc}
 547              	.L15:
 548 0036 C046     		.align	2
 549              	.L14:
 550 0038 00000000 		.word	.LANCHOR2
 551 003c 00580040 		.word	1073764352
 552 0040 5D3E3020 		.word	540032605
 553              		.cfi_endproc
 554              	.LFE52:
 556              		.section	.text.TIM3_Init,"ax",%progbits
 557              		.align	1
 558              		.syntax unified
ARM GAS  /tmp/ccL0lKDS.s 			page 25


 559              		.code	16
 560              		.thumb_func
 561              		.fpu softvfp
 563              	TIM3_Init:
 564              	.LFB54:
 548:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 565              		.loc 1 548 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 24
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569 0000 10B5     		push	{r4, lr}
 570              	.LCFI8:
 571              		.cfi_def_cfa_offset 8
 572              		.cfi_offset 4, -8
 573              		.cfi_offset 14, -4
 574 0002 86B0     		sub	sp, sp, #24
 575              	.LCFI9:
 576              		.cfi_def_cfa_offset 32
 549:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 577              		.loc 1 549 3 view .LVU163
 578              	.LBB14:
 549:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 579              		.loc 1 549 3 view .LVU164
 549:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 580              		.loc 1 549 3 view .LVU165
 581 0004 124A     		ldr	r2, .L17
 582 0006 D169     		ldr	r1, [r2, #28]
 583 0008 0223     		movs	r3, #2
 584 000a 1943     		orrs	r1, r3
 585 000c D161     		str	r1, [r2, #28]
 549:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 586              		.loc 1 549 3 view .LVU166
 587 000e D269     		ldr	r2, [r2, #28]
 588 0010 1340     		ands	r3, r2
 589 0012 0193     		str	r3, [sp, #4]
 549:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 590              		.loc 1 549 3 view .LVU167
 591 0014 019B     		ldr	r3, [sp, #4]
 592              	.LBE14:
 549:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 593              		.loc 1 549 3 view .LVU168
 550:Src/main.c    **** 
 594              		.loc 1 550 3 view .LVU169
 550:Src/main.c    **** 
 595              		.loc 1 550 26 is_stmt 0 view .LVU170
 596 0016 1022     		movs	r2, #16
 597 0018 0021     		movs	r1, #0
 598 001a 02A8     		add	r0, sp, #8
 599 001c FFF7FEFF 		bl	memset
 600              	.LVL21:
 557:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 601              		.loc 1 557 3 is_stmt 1 view .LVU171
 557:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 602              		.loc 1 557 18 is_stmt 0 view .LVU172
 603 0020 0C4C     		ldr	r4, .L17+4
 604 0022 0D4B     		ldr	r3, .L17+8
 605 0024 2360     		str	r3, [r4]
ARM GAS  /tmp/ccL0lKDS.s 			page 26


 558:Src/main.c    ****   htim3.Init.Prescaler = 399;
 606              		.loc 1 558 3 is_stmt 1 view .LVU173
 558:Src/main.c    ****   htim3.Init.Prescaler = 399;
 607              		.loc 1 558 21 is_stmt 0 view .LVU174
 608 0026 0D4B     		ldr	r3, .L17+12
 609 0028 E360     		str	r3, [r4, #12]
 559:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 610              		.loc 1 559 3 is_stmt 1 view .LVU175
 559:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 611              		.loc 1 559 24 is_stmt 0 view .LVU176
 612 002a 9023     		movs	r3, #144
 613 002c FF33     		adds	r3, r3, #255
 614 002e 6360     		str	r3, [r4, #4]
 560:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 615              		.loc 1 560 3 is_stmt 1 view .LVU177
 560:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 616              		.loc 1 560 28 is_stmt 0 view .LVU178
 617 0030 0023     		movs	r3, #0
 618 0032 2361     		str	r3, [r4, #16]
 561:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 619              		.loc 1 561 3 is_stmt 1 view .LVU179
 561:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 620              		.loc 1 561 26 is_stmt 0 view .LVU180
 621 0034 A360     		str	r3, [r4, #8]
 562:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 622              		.loc 1 562 3 is_stmt 1 view .LVU181
 562:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 623              		.loc 1 562 32 is_stmt 0 view .LVU182
 624 0036 A361     		str	r3, [r4, #24]
 563:Src/main.c    ****   {
 625              		.loc 1 563 3 is_stmt 1 view .LVU183
 563:Src/main.c    ****   {
 626              		.loc 1 563 6 is_stmt 0 view .LVU184
 627 0038 2000     		movs	r0, r4
 628 003a FFF7FEFF 		bl	HAL_TIM_Base_Init
 629              	.LVL22:
 568:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 630              		.loc 1 568 3 is_stmt 1 view .LVU185
 568:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 631              		.loc 1 568 34 is_stmt 0 view .LVU186
 632 003e 8023     		movs	r3, #128
 633 0040 5B01     		lsls	r3, r3, #5
 634 0042 0293     		str	r3, [sp, #8]
 569:Src/main.c    **** }
 635              		.loc 1 569 3 is_stmt 1 view .LVU187
 636 0044 02A9     		add	r1, sp, #8
 637 0046 2000     		movs	r0, r4
 638 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 639              	.LVL23:
 570:Src/main.c    **** 
 640              		.loc 1 570 1 is_stmt 0 view .LVU188
 641 004c 06B0     		add	sp, sp, #24
 642              		@ sp needed
 643 004e 10BD     		pop	{r4, pc}
 644              	.L18:
 645              		.align	2
 646              	.L17:
ARM GAS  /tmp/ccL0lKDS.s 			page 27


 647 0050 00100240 		.word	1073876992
 648 0054 00000000 		.word	.LANCHOR3
 649 0058 00040040 		.word	1073742848
 650 005c 0F270000 		.word	9999
 651              		.cfi_endproc
 652              	.LFE54:
 654              		.section	.text.MX_TIM1_Init,"ax",%progbits
 655              		.align	1
 656              		.syntax unified
 657              		.code	16
 658              		.thumb_func
 659              		.fpu softvfp
 661              	MX_TIM1_Init:
 662              	.LFB55:
 573:Src/main.c    **** 
 663              		.loc 1 573 1 is_stmt 1 view -0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 88
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667 0000 70B5     		push	{r4, r5, r6, lr}
 668              	.LCFI10:
 669              		.cfi_def_cfa_offset 16
 670              		.cfi_offset 4, -16
 671              		.cfi_offset 5, -12
 672              		.cfi_offset 6, -8
 673              		.cfi_offset 14, -4
 674 0002 96B0     		sub	sp, sp, #88
 675              	.LCFI11:
 676              		.cfi_def_cfa_offset 104
 575:Src/main.c    **** 
 677              		.loc 1 575 3 view .LVU190
 678              	.LBB15:
 575:Src/main.c    **** 
 679              		.loc 1 575 3 view .LVU191
 575:Src/main.c    **** 
 680              		.loc 1 575 3 view .LVU192
 681 0004 334A     		ldr	r2, .L20
 682 0006 9169     		ldr	r1, [r2, #24]
 683 0008 8020     		movs	r0, #128
 684 000a 0001     		lsls	r0, r0, #4
 685 000c 0143     		orrs	r1, r0
 686 000e 9161     		str	r1, [r2, #24]
 575:Src/main.c    **** 
 687              		.loc 1 575 3 view .LVU193
 688 0010 9369     		ldr	r3, [r2, #24]
 689 0012 0340     		ands	r3, r0
 690 0014 0193     		str	r3, [sp, #4]
 575:Src/main.c    **** 
 691              		.loc 1 575 3 view .LVU194
 692 0016 019B     		ldr	r3, [sp, #4]
 693              	.LBE15:
 575:Src/main.c    **** 
 694              		.loc 1 575 3 view .LVU195
 577:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 695              		.loc 1 577 3 view .LVU196
 577:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 696              		.loc 1 577 26 is_stmt 0 view .LVU197
ARM GAS  /tmp/ccL0lKDS.s 			page 28


 697 0018 1022     		movs	r2, #16
 698 001a 0021     		movs	r1, #0
 699 001c 12A8     		add	r0, sp, #72
 700 001e FFF7FEFF 		bl	memset
 701              	.LVL24:
 578:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 702              		.loc 1 578 3 is_stmt 1 view .LVU198
 578:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 703              		.loc 1 578 27 is_stmt 0 view .LVU199
 704 0022 0822     		movs	r2, #8
 705 0024 0021     		movs	r1, #0
 706 0026 10A8     		add	r0, sp, #64
 707 0028 FFF7FEFF 		bl	memset
 708              	.LVL25:
 579:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 709              		.loc 1 579 3 is_stmt 1 view .LVU200
 579:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 710              		.loc 1 579 22 is_stmt 0 view .LVU201
 711 002c 1C22     		movs	r2, #28
 712 002e 0021     		movs	r1, #0
 713 0030 09A8     		add	r0, sp, #36
 714 0032 FFF7FEFF 		bl	memset
 715              	.LVL26:
 580:Src/main.c    **** 
 716              		.loc 1 580 3 is_stmt 1 view .LVU202
 580:Src/main.c    **** 
 717              		.loc 1 580 34 is_stmt 0 view .LVU203
 718 0036 1C22     		movs	r2, #28
 719 0038 0021     		movs	r1, #0
 720 003a 02A8     		add	r0, sp, #8
 721 003c FFF7FEFF 		bl	memset
 722              	.LVL27:
 582:Src/main.c    ****   htim1.Init.Prescaler = 6; // 2048
 723              		.loc 1 582 3 is_stmt 1 view .LVU204
 582:Src/main.c    ****   htim1.Init.Prescaler = 6; // 2048
 724              		.loc 1 582 18 is_stmt 0 view .LVU205
 725 0040 254D     		ldr	r5, .L20+4
 726 0042 264B     		ldr	r3, .L20+8
 727 0044 2B60     		str	r3, [r5]
 583:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 728              		.loc 1 583 3 is_stmt 1 view .LVU206
 583:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 729              		.loc 1 583 24 is_stmt 0 view .LVU207
 730 0046 0623     		movs	r3, #6
 731 0048 6B60     		str	r3, [r5, #4]
 584:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 732              		.loc 1 584 3 is_stmt 1 view .LVU208
 584:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 733              		.loc 1 584 26 is_stmt 0 view .LVU209
 734 004a 0024     		movs	r4, #0
 735 004c AC60     		str	r4, [r5, #8]
 585:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 736              		.loc 1 585 3 is_stmt 1 view .LVU210
 585:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 737              		.loc 1 585 21 is_stmt 0 view .LVU211
 738 004e 8026     		movs	r6, #128
 739 0050 7601     		lsls	r6, r6, #5
ARM GAS  /tmp/ccL0lKDS.s 			page 29


 740 0052 EE60     		str	r6, [r5, #12]
 586:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 741              		.loc 1 586 3 is_stmt 1 view .LVU212
 586:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 742              		.loc 1 586 28 is_stmt 0 view .LVU213
 743 0054 2C61     		str	r4, [r5, #16]
 587:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 744              		.loc 1 587 3 is_stmt 1 view .LVU214
 587:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 745              		.loc 1 587 32 is_stmt 0 view .LVU215
 746 0056 6C61     		str	r4, [r5, #20]
 588:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 747              		.loc 1 588 3 is_stmt 1 view .LVU216
 588:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 748              		.loc 1 588 32 is_stmt 0 view .LVU217
 749 0058 7A33     		adds	r3, r3, #122
 750 005a AB61     		str	r3, [r5, #24]
 589:Src/main.c    **** 
 751              		.loc 1 589 3 is_stmt 1 view .LVU218
 752 005c 2800     		movs	r0, r5
 753 005e FFF7FEFF 		bl	HAL_TIM_Base_Init
 754              	.LVL28:
 591:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 755              		.loc 1 591 3 view .LVU219
 591:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 756              		.loc 1 591 34 is_stmt 0 view .LVU220
 757 0062 1296     		str	r6, [sp, #72]
 592:Src/main.c    **** 
 758              		.loc 1 592 3 is_stmt 1 view .LVU221
 759 0064 12A9     		add	r1, sp, #72
 760 0066 2800     		movs	r0, r5
 761 0068 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 762              	.LVL29:
 594:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 763              		.loc 1 594 3 view .LVU222
 764 006c 2800     		movs	r0, r5
 765 006e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 766              	.LVL30:
 595:Src/main.c    **** 
 767              		.loc 1 595 3 view .LVU223
 768 0072 2800     		movs	r0, r5
 769 0074 FFF7FEFF 		bl	HAL_TIM_OC_Init
 770              	.LVL31:
 597:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 771              		.loc 1 597 3 view .LVU224
 597:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 772              		.loc 1 597 37 is_stmt 0 view .LVU225
 773 0078 1094     		str	r4, [sp, #64]
 598:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 774              		.loc 1 598 3 is_stmt 1 view .LVU226
 598:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 775              		.loc 1 598 33 is_stmt 0 view .LVU227
 776 007a 1194     		str	r4, [sp, #68]
 599:Src/main.c    **** 
 777              		.loc 1 599 3 is_stmt 1 view .LVU228
 778 007c 10A9     		add	r1, sp, #64
 779 007e 2800     		movs	r0, r5
ARM GAS  /tmp/ccL0lKDS.s 			page 30


 780 0080 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 781              	.LVL32:
 601:Src/main.c    ****   sConfigOC.Pulse = 0;
 782              		.loc 1 601 3 view .LVU229
 601:Src/main.c    ****   sConfigOC.Pulse = 0;
 783              		.loc 1 601 20 is_stmt 0 view .LVU230
 784 0084 6023     		movs	r3, #96
 785 0086 0993     		str	r3, [sp, #36]
 602:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 786              		.loc 1 602 3 is_stmt 1 view .LVU231
 602:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 787              		.loc 1 602 19 is_stmt 0 view .LVU232
 788 0088 0A94     		str	r4, [sp, #40]
 603:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 789              		.loc 1 603 3 is_stmt 1 view .LVU233
 603:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 790              		.loc 1 603 24 is_stmt 0 view .LVU234
 791 008a 0B94     		str	r4, [sp, #44]
 604:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 792              		.loc 1 604 3 is_stmt 1 view .LVU235
 604:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 793              		.loc 1 604 25 is_stmt 0 view .LVU236
 794 008c 0C94     		str	r4, [sp, #48]
 605:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 795              		.loc 1 605 3 is_stmt 1 view .LVU237
 605:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 796              		.loc 1 605 24 is_stmt 0 view .LVU238
 797 008e 0D94     		str	r4, [sp, #52]
 606:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 798              		.loc 1 606 3 is_stmt 1 view .LVU239
 606:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 799              		.loc 1 606 25 is_stmt 0 view .LVU240
 800 0090 0E94     		str	r4, [sp, #56]
 607:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 801              		.loc 1 607 3 is_stmt 1 view .LVU241
 607:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 802              		.loc 1 607 26 is_stmt 0 view .LVU242
 803 0092 0F94     		str	r4, [sp, #60]
 608:Src/main.c    **** 
 804              		.loc 1 608 3 is_stmt 1 view .LVU243
 805 0094 0022     		movs	r2, #0
 806 0096 09A9     		add	r1, sp, #36
 807 0098 2800     		movs	r0, r5
 808 009a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 809              	.LVL33:
 610:Src/main.c    ****   sConfigOC.Pulse = 10;
 810              		.loc 1 610 3 view .LVU244
 610:Src/main.c    ****   sConfigOC.Pulse = 10;
 811              		.loc 1 610 20 is_stmt 0 view .LVU245
 812 009e 7023     		movs	r3, #112
 813 00a0 0993     		str	r3, [sp, #36]
 611:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 814              		.loc 1 611 3 is_stmt 1 view .LVU246
 611:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 815              		.loc 1 611 19 is_stmt 0 view .LVU247
 816 00a2 663B     		subs	r3, r3, #102
 817 00a4 0A93     		str	r3, [sp, #40]
ARM GAS  /tmp/ccL0lKDS.s 			page 31


 612:Src/main.c    **** 
 818              		.loc 1 612 3 is_stmt 1 view .LVU248
 819 00a6 0C22     		movs	r2, #12
 820 00a8 09A9     		add	r1, sp, #36
 821 00aa 2800     		movs	r0, r5
 822 00ac FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 823              	.LVL34:
 614:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 824              		.loc 1 614 3 view .LVU249
 614:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 825              		.loc 1 614 40 is_stmt 0 view .LVU250
 826 00b0 0294     		str	r4, [sp, #8]
 615:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 827              		.loc 1 615 3 is_stmt 1 view .LVU251
 615:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 828              		.loc 1 615 41 is_stmt 0 view .LVU252
 829 00b2 0394     		str	r4, [sp, #12]
 616:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 830              		.loc 1 616 3 is_stmt 1 view .LVU253
 616:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 831              		.loc 1 616 34 is_stmt 0 view .LVU254
 832 00b4 0494     		str	r4, [sp, #16]
 617:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 833              		.loc 1 617 3 is_stmt 1 view .LVU255
 617:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 834              		.loc 1 617 33 is_stmt 0 view .LVU256
 835 00b6 0594     		str	r4, [sp, #20]
 618:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 836              		.loc 1 618 3 is_stmt 1 view .LVU257
 618:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 837              		.loc 1 618 35 is_stmt 0 view .LVU258
 838 00b8 0694     		str	r4, [sp, #24]
 619:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 839              		.loc 1 619 3 is_stmt 1 view .LVU259
 619:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 840              		.loc 1 619 38 is_stmt 0 view .LVU260
 841 00ba 8023     		movs	r3, #128
 842 00bc 9B01     		lsls	r3, r3, #6
 843 00be 0793     		str	r3, [sp, #28]
 620:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 844              		.loc 1 620 3 is_stmt 1 view .LVU261
 620:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 845              		.loc 1 620 40 is_stmt 0 view .LVU262
 846 00c0 0894     		str	r4, [sp, #32]
 621:Src/main.c    **** 
 847              		.loc 1 621 3 is_stmt 1 view .LVU263
 848 00c2 02A9     		add	r1, sp, #8
 849 00c4 2800     		movs	r0, r5
 850 00c6 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 851              	.LVL35:
 623:Src/main.c    **** }
 852              		.loc 1 623 3 view .LVU264
 853 00ca 2800     		movs	r0, r5
 854 00cc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 855              	.LVL36:
 624:Src/main.c    **** /*
 856              		.loc 1 624 1 is_stmt 0 view .LVU265
ARM GAS  /tmp/ccL0lKDS.s 			page 32


 857 00d0 16B0     		add	sp, sp, #88
 858              		@ sp needed
 859 00d2 70BD     		pop	{r4, r5, r6, pc}
 860              	.L21:
 861              		.align	2
 862              	.L20:
 863 00d4 00100240 		.word	1073876992
 864 00d8 00000000 		.word	.LANCHOR4
 865 00dc 002C0140 		.word	1073818624
 866              		.cfi_endproc
 867              	.LFE55:
 869              		.section	.text.MX_IWDG_Init,"ax",%progbits
 870              		.align	1
 871              		.syntax unified
 872              		.code	16
 873              		.thumb_func
 874              		.fpu softvfp
 876              	MX_IWDG_Init:
 877              	.LFB53:
 539:Src/main.c    ****   hiwdg.Instance = IWDG;
 878              		.loc 1 539 1 is_stmt 1 view -0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882 0000 10B5     		push	{r4, lr}
 883              	.LCFI12:
 884              		.cfi_def_cfa_offset 8
 885              		.cfi_offset 4, -8
 886              		.cfi_offset 14, -4
 540:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 887              		.loc 1 540 3 view .LVU267
 540:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 888              		.loc 1 540 18 is_stmt 0 view .LVU268
 889 0002 0548     		ldr	r0, .L23
 890 0004 054B     		ldr	r3, .L23+4
 891 0006 0360     		str	r3, [r0]
 541:Src/main.c    ****   hiwdg.Init.Window = 4095;
 892              		.loc 1 541 3 is_stmt 1 view .LVU269
 541:Src/main.c    ****   hiwdg.Init.Window = 4095;
 893              		.loc 1 541 24 is_stmt 0 view .LVU270
 894 0008 0023     		movs	r3, #0
 895 000a 4360     		str	r3, [r0, #4]
 542:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 896              		.loc 1 542 3 is_stmt 1 view .LVU271
 542:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 897              		.loc 1 542 21 is_stmt 0 view .LVU272
 898 000c 044B     		ldr	r3, .L23+8
 899 000e C360     		str	r3, [r0, #12]
 543:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 900              		.loc 1 543 3 is_stmt 1 view .LVU273
 543:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 901              		.loc 1 543 21 is_stmt 0 view .LVU274
 902 0010 8360     		str	r3, [r0, #8]
 544:Src/main.c    **** }
 903              		.loc 1 544 3 is_stmt 1 view .LVU275
 904 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 905              	.LVL37:
ARM GAS  /tmp/ccL0lKDS.s 			page 33


 545:Src/main.c    **** 
 906              		.loc 1 545 1 is_stmt 0 view .LVU276
 907              		@ sp needed
 908 0016 10BD     		pop	{r4, pc}
 909              	.L24:
 910              		.align	2
 911              	.L23:
 912 0018 00000000 		.word	.LANCHOR5
 913 001c 00300040 		.word	1073754112
 914 0020 FF0F0000 		.word	4095
 915              		.cfi_endproc
 916              	.LFE53:
 918              		.global	__aeabi_ui2f
 919              		.global	__aeabi_f2d
 920              		.global	__aeabi_ddiv
 921              		.global	__aeabi_dmul
 922              		.global	__aeabi_dsub
 923              		.global	__aeabi_d2f
 924              		.global	__aeabi_i2f
 925              		.global	__aeabi_fsub
 926              		.global	__aeabi_fmul
 927              		.global	__aeabi_fdiv
 928              		.global	__aeabi_fadd
 929              		.global	__aeabi_i2d
 930              		.global	__aeabi_dadd
 931              		.global	__aeabi_fcmpge
 932              		.global	__aeabi_fcmple
 933              		.global	__aeabi_fcmpgt
 934              		.global	__aeabi_fcmplt
 935              		.global	__aeabi_f2iz
 936              		.global	__aeabi_dcmple
 937              		.section	.text.reg,"ax",%progbits
 938              		.align	1
 939              		.global	reg
 940              		.syntax unified
 941              		.code	16
 942              		.thumb_func
 943              		.fpu softvfp
 945              	reg:
 946              	.LFB38:
 259:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 947              		.loc 1 259 16 is_stmt 1 view -0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 952              	.LCFI13:
 953              		.cfi_def_cfa_offset 24
 954              		.cfi_offset 3, -24
 955              		.cfi_offset 4, -20
 956              		.cfi_offset 5, -16
 957              		.cfi_offset 6, -12
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
 960 0002 CE46     		mov	lr, r9
 961 0004 4746     		mov	r7, r8
 962 0006 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccL0lKDS.s 			page 34


 963              	.LCFI14:
 964              		.cfi_def_cfa_offset 32
 965              		.cfi_offset 8, -32
 966              		.cfi_offset 9, -28
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 967              		.loc 1 260 3 view .LVU278
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 968              		.loc 1 260 29 is_stmt 0 view .LVU279
 969 0008 9B4B     		ldr	r3, .L52
 970 000a 9846     		mov	r8, r3
 971 000c D888     		ldrh	r0, [r3, #6]
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 972              		.loc 1 260 15 view .LVU280
 973 000e FFF7FEFF 		bl	__aeabi_ui2f
 974              	.LVL38:
 975 0012 FFF7FEFF 		bl	__aeabi_f2d
 976              	.LVL39:
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 977              		.loc 1 260 32 view .LVU281
 978 0016 0022     		movs	r2, #0
 979 0018 984B     		ldr	r3, .L52+4
 980 001a FFF7FEFF 		bl	__aeabi_ddiv
 981              	.LVL40:
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 982              		.loc 1 260 40 view .LVU282
 983 001e 984A     		ldr	r2, .L52+8
 984 0020 984B     		ldr	r3, .L52+12
 985 0022 FFF7FEFF 		bl	__aeabi_dmul
 986              	.LVL41:
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 987              		.loc 1 260 45 view .LVU283
 988 0026 0022     		movs	r2, #0
 989 0028 974B     		ldr	r3, .L52+16
 990 002a FFF7FEFF 		bl	__aeabi_dsub
 991              	.LVL42:
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 992              		.loc 1 260 50 view .LVU284
 993 002e 974A     		ldr	r2, .L52+20
 994 0030 974B     		ldr	r3, .L52+24
 995 0032 FFF7FEFF 		bl	__aeabi_ddiv
 996              	.LVL43:
 997 0036 FFF7FEFF 		bl	__aeabi_d2f
 998              	.LVL44:
 999 003a 051C     		adds	r5, r0, #0
 260:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 1000              		.loc 1 260 10 view .LVU285
 1001 003c 954C     		ldr	r4, .L52+28
 1002 003e A061     		str	r0, [r4, #24]
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1003              		.loc 1 261 3 is_stmt 1 view .LVU286
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1004              		.loc 1 261 21 is_stmt 0 view .LVU287
 1005 0040 4346     		mov	r3, r8
 1006 0042 5888     		ldrh	r0, [r3, #2]
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1007              		.loc 1 261 31 view .LVU288
 1008 0044 944E     		ldr	r6, .L52+32
ARM GAS  /tmp/ccL0lKDS.s 			page 35


 1009 0046 3768     		ldr	r7, [r6]
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1010              		.loc 1 261 24 view .LVU289
 1011 0048 FFF7FEFF 		bl	__aeabi_i2f
 1012              	.LVL45:
 1013 004c 391C     		adds	r1, r7, #0
 1014 004e FFF7FEFF 		bl	__aeabi_fsub
 1015              	.LVL46:
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1016              		.loc 1 261 46 view .LVU290
 1017 0052 7168     		ldr	r1, [r6, #4]
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1018              		.loc 1 261 39 view .LVU291
 1019 0054 FFF7FEFF 		bl	__aeabi_fmul
 1020              	.LVL47:
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1021              		.loc 1 261 59 view .LVU292
 1022 0058 9049     		ldr	r1, .L52+36
 1023 005a FFF7FEFF 		bl	__aeabi_fdiv
 1024              	.LVL48:
 1025 005e 011C     		adds	r1, r0, #0
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1026              		.loc 1 261 64 view .LVU293
 1027 0060 281C     		adds	r0, r5, #0
 1028 0062 FFF7FEFF 		bl	__aeabi_fadd
 1029              	.LVL49:
 1030 0066 051C     		adds	r5, r0, #0
 261:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 1031              		.loc 1 261 10 view .LVU294
 1032 0068 2060     		str	r0, [r4]
 262:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 1033              		.loc 1 262 3 is_stmt 1 view .LVU295
 262:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 1034              		.loc 1 262 20 is_stmt 0 view .LVU296
 1035 006a 4346     		mov	r3, r8
 1036 006c 9888     		ldrh	r0, [r3, #4]
 262:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 1037              		.loc 1 262 23 view .LVU297
 1038 006e FFF7FEFF 		bl	__aeabi_i2d
 1039              	.LVL50:
 1040 0072 0022     		movs	r2, #0
 1041 0074 814B     		ldr	r3, .L52+4
 1042 0076 FFF7FEFF 		bl	__aeabi_ddiv
 1043              	.LVL51:
 262:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 1044              		.loc 1 262 31 view .LVU298
 1045 007a 814A     		ldr	r2, .L52+8
 1046 007c 814B     		ldr	r3, .L52+12
 1047 007e FFF7FEFF 		bl	__aeabi_dmul
 1048              	.LVL52:
 262:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 1049              		.loc 1 262 36 view .LVU299
 1050 0082 7F4A     		ldr	r2, .L52+8
 1051 0084 864B     		ldr	r3, .L52+40
 1052 0086 FFF7FEFF 		bl	__aeabi_dmul
 1053              	.LVL53:
 1054 008a FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  /tmp/ccL0lKDS.s 			page 36


 1055              	.LVL54:
 262:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 1056              		.loc 1 262 9 view .LVU300
 1057 008e A060     		str	r0, [r4, #8]
 263:Src/main.c    **** 
 1058              		.loc 1 263 3 is_stmt 1 view .LVU301
 263:Src/main.c    **** 
 1059              		.loc 1 263 11 is_stmt 0 view .LVU302
 1060 0090 8449     		ldr	r1, .L52+44
 1061 0092 E068     		ldr	r0, [r4, #12]
 1062 0094 FFF7FEFF 		bl	__aeabi_fmul
 1063              	.LVL55:
 1064 0098 FFF7FEFF 		bl	__aeabi_f2d
 1065              	.LVL56:
 1066 009c 0600     		movs	r6, r0
 1067 009e 0F00     		movs	r7, r1
 1068 00a0 4346     		mov	r3, r8
 1069 00a2 1888     		ldrh	r0, [r3]
 1070 00a4 FFF7FEFF 		bl	__aeabi_i2d
 1071              	.LVL57:
 1072 00a8 0022     		movs	r2, #0
 1073 00aa 744B     		ldr	r3, .L52+4
 1074 00ac FFF7FEFF 		bl	__aeabi_ddiv
 1075              	.LVL58:
 1076 00b0 734A     		ldr	r2, .L52+8
 1077 00b2 744B     		ldr	r3, .L52+12
 1078 00b4 FFF7FEFF 		bl	__aeabi_dmul
 1079              	.LVL59:
 1080 00b8 7B4A     		ldr	r2, .L52+48
 1081 00ba 7C4B     		ldr	r3, .L52+52
 1082 00bc FFF7FEFF 		bl	__aeabi_dmul
 1083              	.LVL60:
 1084 00c0 7B4A     		ldr	r2, .L52+56
 1085 00c2 7C4B     		ldr	r3, .L52+60
 1086 00c4 FFF7FEFF 		bl	__aeabi_ddiv
 1087              	.LVL61:
 1088 00c8 0022     		movs	r2, #0
 1089 00ca 7B4B     		ldr	r3, .L52+64
 1090 00cc FFF7FEFF 		bl	__aeabi_dmul
 1091              	.LVL62:
 1092 00d0 0200     		movs	r2, r0
 1093 00d2 0B00     		movs	r3, r1
 1094 00d4 3000     		movs	r0, r6
 1095 00d6 3900     		movs	r1, r7
 1096 00d8 FFF7FEFF 		bl	__aeabi_dadd
 1097              	.LVL63:
 1098 00dc FFF7FEFF 		bl	__aeabi_d2f
 1099              	.LVL64:
 1100 00e0 061C     		adds	r6, r0, #0
 263:Src/main.c    **** 
 1101              		.loc 1 263 9 view .LVU303
 1102 00e2 E060     		str	r0, [r4, #12]
 265:Src/main.c    **** 
 1103              		.loc 1 265 3 is_stmt 1 view .LVU304
 265:Src/main.c    **** 
 1104              		.loc 1 265 15 is_stmt 0 view .LVU305
 1105 00e4 6F49     		ldr	r1, .L52+44
ARM GAS  /tmp/ccL0lKDS.s 			page 37


 1106 00e6 6068     		ldr	r0, [r4, #4]
 1107 00e8 FFF7FEFF 		bl	__aeabi_fmul
 1108              	.LVL65:
 1109 00ec 071C     		adds	r7, r0, #0
 1110 00ee 7349     		ldr	r1, .L52+68
 1111 00f0 281C     		adds	r0, r5, #0
 1112 00f2 FFF7FEFF 		bl	__aeabi_fmul
 1113              	.LVL66:
 1114 00f6 011C     		adds	r1, r0, #0
 1115 00f8 381C     		adds	r0, r7, #0
 1116 00fa FFF7FEFF 		bl	__aeabi_fadd
 1117              	.LVL67:
 1118 00fe 051C     		adds	r5, r0, #0
 265:Src/main.c    **** 
 1119              		.loc 1 265 13 view .LVU306
 1120 0100 6060     		str	r0, [r4, #4]
 268:Src/main.c    ****     r.error = r.target - s.ttipavg;
 1121              		.loc 1 268 3 is_stmt 1 view .LVU307
 268:Src/main.c    ****     r.error = r.target - s.ttipavg;
 1122              		.loc 1 268 20 is_stmt 0 view .LVU308
 1123 0102 6F4B     		ldr	r3, .L52+72
 1124 0104 1C68     		ldr	r4, [r3]
 268:Src/main.c    ****     r.error = r.target - s.ttipavg;
 1125              		.loc 1 268 29 view .LVU309
 1126 0106 DF6A     		ldr	r7, [r3, #44]
 268:Src/main.c    ****     r.error = r.target - s.ttipavg;
 1127              		.loc 1 268 27 view .LVU310
 1128 0108 391C     		adds	r1, r7, #0
 1129 010a 201C     		adds	r0, r4, #0
 1130 010c FFF7FEFF 		bl	__aeabi_fsub
 1131              	.LVL68:
 1132 0110 011C     		adds	r1, r0, #0
 268:Src/main.c    ****     r.error = r.target - s.ttipavg;
 1133              		.loc 1 268 5 view .LVU311
 1134 0112 281C     		adds	r0, r5, #0
 1135 0114 FFF7FEFF 		bl	__aeabi_fcmpge
 1136              	.LVL69:
 1137 0118 0028     		cmp	r0, #0
 1138 011a 46D0     		beq	.L26
 268:Src/main.c    ****     r.error = r.target - s.ttipavg;
 1139              		.loc 1 268 63 discriminator 1 view .LVU312
 1140 011c 391C     		adds	r1, r7, #0
 1141 011e 201C     		adds	r0, r4, #0
 1142 0120 FFF7FEFF 		bl	__aeabi_fadd
 1143              	.LVL70:
 1144 0124 011C     		adds	r1, r0, #0
 268:Src/main.c    ****     r.error = r.target - s.ttipavg;
 1145              		.loc 1 268 39 discriminator 1 view .LVU313
 1146 0126 281C     		adds	r0, r5, #0
 1147 0128 FFF7FEFF 		bl	__aeabi_fcmple
 1148              	.LVL71:
 1149 012c 0028     		cmp	r0, #0
 1150 012e 3CD0     		beq	.L26
 269:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 1151              		.loc 1 269 5 is_stmt 1 view .LVU314
 269:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 1152              		.loc 1 269 24 is_stmt 0 view .LVU315
ARM GAS  /tmp/ccL0lKDS.s 			page 38


 1153 0130 291C     		adds	r1, r5, #0
 1154 0132 201C     		adds	r0, r4, #0
 1155 0134 FFF7FEFF 		bl	__aeabi_fsub
 1156              	.LVL72:
 1157 0138 041C     		adds	r4, r0, #0
 269:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 1158              		.loc 1 269 13 view .LVU316
 1159 013a 614F     		ldr	r7, .L52+72
 1160 013c 7860     		str	r0, [r7, #4]
 270:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1161              		.loc 1 270 5 is_stmt 1 view .LVU317
 270:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1162              		.loc 1 270 17 is_stmt 0 view .LVU318
 1163 013e FB68     		ldr	r3, [r7, #12]
 1164 0140 9846     		mov	r8, r3
 270:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1165              		.loc 1 270 35 view .LVU319
 1166 0142 F969     		ldr	r1, [r7, #28]
 1167 0144 FFF7FEFF 		bl	__aeabi_fmul
 1168              	.LVL73:
 1169 0148 011C     		adds	r1, r0, #0
 270:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1170              		.loc 1 270 25 view .LVU320
 1171 014a 4046     		mov	r0, r8
 1172 014c FFF7FEFF 		bl	__aeabi_fadd
 1173              	.LVL74:
 1174 0150 8046     		mov	r8, r0
 270:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 1175              		.loc 1 270 14 view .LVU321
 1176 0152 F860     		str	r0, [r7, #12]
 271:Src/main.c    ****     r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1177              		.loc 1 271 5 is_stmt 1 view .LVU322
 271:Src/main.c    ****     r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1178              		.loc 1 271 16 is_stmt 0 view .LVU323
 1179 0154 3B69     		ldr	r3, [r7, #16]
 1180 0156 9946     		mov	r9, r3
 1181 0158 191C     		adds	r1, r3, #0
 1182 015a FFF7FEFF 		bl	__aeabi_fcmpgt
 1183              	.LVL75:
 1184 015e 0028     		cmp	r0, #0
 1185 0160 0AD1     		bne	.L29
 271:Src/main.c    ****     r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1186              		.loc 1 271 16 discriminator 2 view .LVU324
 1187 0162 8023     		movs	r3, #128
 1188 0164 1B06     		lsls	r3, r3, #24
 1189 0166 4B44     		add	r3, r3, r9
 1190 0168 1900     		movs	r1, r3
 1191 016a 9946     		mov	r9, r3
 1192 016c 4046     		mov	r0, r8
 1193 016e FFF7FEFF 		bl	__aeabi_fcmplt
 1194              	.LVL76:
 1195 0172 0028     		cmp	r0, #0
 1196 0174 00D1     		bne	.L29
 1197 0176 C146     		mov	r9, r8
 1198              	.L29:
 271:Src/main.c    ****     r.duty = ((int16_t) (r.Kp*r.error + r.Ki*r.ierror)) * wduty;
 1199              		.loc 1 271 14 discriminator 8 view .LVU325
ARM GAS  /tmp/ccL0lKDS.s 			page 39


 1200 0178 514F     		ldr	r7, .L52+72
 1201 017a 4B46     		mov	r3, r9
 1202 017c FB60     		str	r3, [r7, #12]
 272:Src/main.c    ****     r.errorprior = r.error;
 1203              		.loc 1 272 5 is_stmt 1 discriminator 8 view .LVU326
 272:Src/main.c    ****     r.errorprior = r.error;
 1204              		.loc 1 272 30 is_stmt 0 discriminator 8 view .LVU327
 1205 017e 396A     		ldr	r1, [r7, #32]
 1206 0180 201C     		adds	r0, r4, #0
 1207 0182 FFF7FEFF 		bl	__aeabi_fmul
 1208              	.LVL77:
 1209 0186 8046     		mov	r8, r0
 272:Src/main.c    ****     r.errorprior = r.error;
 1210              		.loc 1 272 45 discriminator 8 view .LVU328
 1211 0188 4946     		mov	r1, r9
 1212 018a 786A     		ldr	r0, [r7, #36]
 1213 018c FFF7FEFF 		bl	__aeabi_fmul
 1214              	.LVL78:
 1215 0190 011C     		adds	r1, r0, #0
 272:Src/main.c    ****     r.errorprior = r.error;
 1216              		.loc 1 272 39 discriminator 8 view .LVU329
 1217 0192 4046     		mov	r0, r8
 1218 0194 FFF7FEFF 		bl	__aeabi_fadd
 1219              	.LVL79:
 272:Src/main.c    ****     r.errorprior = r.error;
 1220              		.loc 1 272 15 discriminator 8 view .LVU330
 1221 0198 FFF7FEFF 		bl	__aeabi_f2iz
 1222              	.LVL80:
 1223 019c 03B2     		sxth	r3, r0
 272:Src/main.c    ****     r.errorprior = r.error;
 1224              		.loc 1 272 12 discriminator 8 view .LVU331
 1225 019e 494A     		ldr	r2, .L52+76
 1226 01a0 1088     		ldrh	r0, [r2]
 1227 01a2 5843     		muls	r0, r3
 1228 01a4 3883     		strh	r0, [r7, #24]
 273:Src/main.c    ****   } else {
 1229              		.loc 1 273 5 is_stmt 1 discriminator 8 view .LVU332
 273:Src/main.c    ****   } else {
 1230              		.loc 1 273 18 is_stmt 0 discriminator 8 view .LVU333
 1231 01a6 BC60     		str	r4, [r7, #8]
 1232 01a8 0BE0     		b	.L31
 1233              	.L26:
 275:Src/main.c    ****       r.duty = wduty;
 1234              		.loc 1 275 5 is_stmt 1 view .LVU334
 275:Src/main.c    ****       r.duty = wduty;
 1235              		.loc 1 275 7 is_stmt 0 view .LVU335
 1236 01aa 211C     		adds	r1, r4, #0
 1237 01ac 281C     		adds	r0, r5, #0
 1238 01ae FFF7FEFF 		bl	__aeabi_fcmple
 1239              	.LVL81:
 1240 01b2 0028     		cmp	r0, #0
 1241 01b4 3DD0     		beq	.L50
 276:Src/main.c    ****       r.error = 12.0;
 1242              		.loc 1 276 7 is_stmt 1 view .LVU336
 276:Src/main.c    ****       r.error = 12.0;
 1243              		.loc 1 276 14 is_stmt 0 view .LVU337
 1244 01b6 424B     		ldr	r3, .L52+72
ARM GAS  /tmp/ccL0lKDS.s 			page 40


 1245 01b8 424A     		ldr	r2, .L52+76
 1246 01ba 1288     		ldrh	r2, [r2]
 1247 01bc 1A83     		strh	r2, [r3, #24]
 277:Src/main.c    ****     } else {
 1248              		.loc 1 277 7 is_stmt 1 view .LVU338
 277:Src/main.c    ****     } else {
 1249              		.loc 1 277 15 is_stmt 0 view .LVU339
 1250 01be 424A     		ldr	r2, .L52+80
 1251 01c0 5A60     		str	r2, [r3, #4]
 1252              	.L31:
 285:Src/main.c    ****     r.duty = 100;
 1253              		.loc 1 285 3 is_stmt 1 view .LVU340
 285:Src/main.c    ****     r.duty = 100;
 1254              		.loc 1 285 7 is_stmt 0 view .LVU341
 1255 01c2 301C     		adds	r0, r6, #0
 1256 01c4 FFF7FEFF 		bl	__aeabi_f2d
 1257              	.LVL82:
 285:Src/main.c    ****     r.duty = 100;
 1258              		.loc 1 285 5 view .LVU342
 1259 01c8 404A     		ldr	r2, .L52+84
 1260 01ca 414B     		ldr	r3, .L52+88
 1261 01cc FFF7FEFF 		bl	__aeabi_dcmple
 1262              	.LVL83:
 1263 01d0 0028     		cmp	r0, #0
 1264 01d2 10D0     		beq	.L34
 285:Src/main.c    ****     r.duty = 100;
 1265              		.loc 1 285 21 discriminator 1 view .LVU343
 1266 01d4 3F49     		ldr	r1, .L52+92
 1267 01d6 281C     		adds	r0, r5, #0
 1268 01d8 FFF7FEFF 		bl	__aeabi_fcmpgt
 1269              	.LVL84:
 1270 01dc 0028     		cmp	r0, #0
 1271 01de 0AD0     		beq	.L34
 286:Src/main.c    ****     r.error = 0.0;
 1272              		.loc 1 286 5 is_stmt 1 view .LVU344
 286:Src/main.c    ****     r.error = 0.0;
 1273              		.loc 1 286 12 is_stmt 0 view .LVU345
 1274 01e0 374B     		ldr	r3, .L52+72
 1275 01e2 6422     		movs	r2, #100
 1276 01e4 1A83     		strh	r2, [r3, #24]
 287:Src/main.c    ****     r.ierror = 0.0;
 1277              		.loc 1 287 5 is_stmt 1 view .LVU346
 287:Src/main.c    ****     r.ierror = 0.0;
 1278              		.loc 1 287 13 is_stmt 0 view .LVU347
 1279 01e6 0022     		movs	r2, #0
 1280 01e8 5A60     		str	r2, [r3, #4]
 288:Src/main.c    ****     r.derror = 0.0;
 1281              		.loc 1 288 5 is_stmt 1 view .LVU348
 288:Src/main.c    ****     r.derror = 0.0;
 1282              		.loc 1 288 14 is_stmt 0 view .LVU349
 1283 01ea DA60     		str	r2, [r3, #12]
 289:Src/main.c    ****     r.errorprior = 0.0;
 1284              		.loc 1 289 5 is_stmt 1 view .LVU350
 289:Src/main.c    ****     r.errorprior = 0.0;
 1285              		.loc 1 289 14 is_stmt 0 view .LVU351
 1286 01ec 5A61     		str	r2, [r3, #20]
 290:Src/main.c    ****     wduty = 150;
ARM GAS  /tmp/ccL0lKDS.s 			page 41


 1287              		.loc 1 290 5 is_stmt 1 view .LVU352
 290:Src/main.c    ****     wduty = 150;
 1288              		.loc 1 290 18 is_stmt 0 view .LVU353
 1289 01ee 9A60     		str	r2, [r3, #8]
 291:Src/main.c    ****   }
 1290              		.loc 1 291 5 is_stmt 1 view .LVU354
 291:Src/main.c    ****   }
 1291              		.loc 1 291 11 is_stmt 0 view .LVU355
 1292 01f0 344B     		ldr	r3, .L52+76
 1293 01f2 9622     		movs	r2, #150
 1294 01f4 1A80     		strh	r2, [r3]
 1295              	.L34:
 294:Src/main.c    **** 
 1296              		.loc 1 294 3 is_stmt 1 view .LVU356
 294:Src/main.c    **** 
 1297              		.loc 1 294 12 is_stmt 0 view .LVU357
 1298 01f6 324B     		ldr	r3, .L52+72
 1299 01f8 1822     		movs	r2, #24
 1300 01fa 9B5E     		ldrsh	r3, [r3, r2]
 294:Src/main.c    **** 
 1301              		.loc 1 294 10 view .LVU358
 1302 01fc FA22     		movs	r2, #250
 1303 01fe D200     		lsls	r2, r2, #3
 1304 0200 9342     		cmp	r3, r2
 1305 0202 1EDC     		bgt	.L43
 294:Src/main.c    **** 
 1306              		.loc 1 294 10 discriminator 1 view .LVU359
 1307 0204 1C1C     		adds	r4, r3, #0
 1308 0206 002B     		cmp	r3, #0
 1309 0208 19DB     		blt	.L51
 1310              	.L38:
 1311 020a 24B2     		sxth	r4, r4
 1312              	.L37:
 294:Src/main.c    **** 
 1313              		.loc 1 294 10 discriminator 4 view .LVU360
 1314 020c 2C4B     		ldr	r3, .L52+72
 1315 020e 1C83     		strh	r4, [r3, #24]
 296:Src/main.c    ****     wduty = r.duty - 2;
 1316              		.loc 1 296 3 is_stmt 1 discriminator 4 view .LVU361
 296:Src/main.c    ****     wduty = r.duty - 2;
 1317              		.loc 1 296 15 is_stmt 0 discriminator 4 view .LVU362
 1318 0210 204B     		ldr	r3, .L52+28
 1319 0212 5969     		ldr	r1, [r3, #20]
 296:Src/main.c    ****     wduty = r.duty - 2;
 1320              		.loc 1 296 5 discriminator 4 view .LVU363
 1321 0214 301C     		adds	r0, r6, #0
 1322 0216 FFF7FEFF 		bl	__aeabi_fcmpgt
 1323              	.LVL85:
 1324 021a 0028     		cmp	r0, #0
 1325 021c 14D0     		beq	.L39
 296:Src/main.c    ****     wduty = r.duty - 2;
 1326              		.loc 1 296 21 discriminator 1 view .LVU364
 1327 021e 642C     		cmp	r4, #100
 1328 0220 12DD     		ble	.L39
 297:Src/main.c    ****     r.duty -= 100;
 1329              		.loc 1 297 5 is_stmt 1 view .LVU365
 297:Src/main.c    ****     r.duty -= 100;
ARM GAS  /tmp/ccL0lKDS.s 			page 42


 1330              		.loc 1 297 14 is_stmt 0 view .LVU366
 1331 0222 A4B2     		uxth	r4, r4
 297:Src/main.c    ****     r.duty -= 100;
 1332              		.loc 1 297 20 view .LVU367
 1333 0224 A21E     		subs	r2, r4, #2
 297:Src/main.c    ****     r.duty -= 100;
 1334              		.loc 1 297 11 view .LVU368
 1335 0226 274B     		ldr	r3, .L52+76
 1336 0228 1A80     		strh	r2, [r3]
 298:Src/main.c    ****   } else {
 1337              		.loc 1 298 5 is_stmt 1 view .LVU369
 298:Src/main.c    ****   } else {
 1338              		.loc 1 298 12 is_stmt 0 view .LVU370
 1339 022a 643C     		subs	r4, r4, #100
 1340 022c 244B     		ldr	r3, .L52+72
 1341 022e 1C83     		strh	r4, [r3, #24]
 1342 0230 15E0     		b	.L41
 1343              	.L50:
 279:Src/main.c    ****       r.error = 0.0;
 1344              		.loc 1 279 7 is_stmt 1 view .LVU371
 279:Src/main.c    ****       r.error = 0.0;
 1345              		.loc 1 279 14 is_stmt 0 view .LVU372
 1346 0232 234B     		ldr	r3, .L52+72
 1347 0234 0022     		movs	r2, #0
 1348 0236 1A83     		strh	r2, [r3, #24]
 280:Src/main.c    ****     }
 1349              		.loc 1 280 7 is_stmt 1 view .LVU373
 280:Src/main.c    ****     }
 1350              		.loc 1 280 15 is_stmt 0 view .LVU374
 1351 0238 0022     		movs	r2, #0
 1352 023a 5A60     		str	r2, [r3, #4]
 1353 023c C1E7     		b	.L31
 1354              	.L51:
 294:Src/main.c    **** 
 1355              		.loc 1 294 10 discriminator 1 view .LVU375
 1356 023e 0024     		movs	r4, #0
 1357 0240 E3E7     		b	.L38
 1358              	.L43:
 294:Src/main.c    **** 
 1359              		.loc 1 294 10 view .LVU376
 1360 0242 FA24     		movs	r4, #250
 1361 0244 E400     		lsls	r4, r4, #3
 1362 0246 E1E7     		b	.L37
 1363              	.L39:
 300:Src/main.c    ****     if(wduty >= MAX_DUTY) wduty = MAX_DUTY;
 1364              		.loc 1 300 5 is_stmt 1 view .LVU377
 300:Src/main.c    ****     if(wduty >= MAX_DUTY) wduty = MAX_DUTY;
 1365              		.loc 1 300 10 is_stmt 0 view .LVU378
 1366 0248 1E4A     		ldr	r2, .L52+76
 1367 024a 1388     		ldrh	r3, [r2]
 1368 024c 0133     		adds	r3, r3, #1
 1369 024e 9BB2     		uxth	r3, r3
 1370 0250 1380     		strh	r3, [r2]
 301:Src/main.c    ****   }
 1371              		.loc 1 301 5 is_stmt 1 view .LVU379
 301:Src/main.c    ****   }
 1372              		.loc 1 301 7 is_stmt 0 view .LVU380
ARM GAS  /tmp/ccL0lKDS.s 			page 43


 1373 0252 FA22     		movs	r2, #250
 1374 0254 D200     		lsls	r2, r2, #3
 1375 0256 9342     		cmp	r3, r2
 1376 0258 01D3     		bcc	.L41
 301:Src/main.c    ****   }
 1377              		.loc 1 301 27 is_stmt 1 discriminator 1 view .LVU381
 301:Src/main.c    ****   }
 1378              		.loc 1 301 33 is_stmt 0 discriminator 1 view .LVU382
 1379 025a 1A4B     		ldr	r3, .L52+76
 1380 025c 1A80     		strh	r2, [r3]
 1381              	.L41:
 304:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4000);
 1382              		.loc 1 304 3 is_stmt 1 view .LVU383
 1383 025e 1E4B     		ldr	r3, .L52+96
 1384 0260 1B68     		ldr	r3, [r3]
 1385 0262 174A     		ldr	r2, .L52+72
 1386 0264 1821     		movs	r1, #24
 1387 0266 525E     		ldrsh	r2, [r2, r1]
 1388 0268 5A63     		str	r2, [r3, #52]
 305:Src/main.c    **** }
 1389              		.loc 1 305 3 view .LVU384
 1390 026a FA22     		movs	r2, #250
 1391 026c 1201     		lsls	r2, r2, #4
 1392 026e 1A64     		str	r2, [r3, #64]
 306:Src/main.c    **** 
 1393              		.loc 1 306 1 is_stmt 0 view .LVU385
 1394              		@ sp needed
 1395 0270 C0BC     		pop	{r6, r7}
 1396 0272 B946     		mov	r9, r7
 1397 0274 B046     		mov	r8, r6
 1398 0276 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1399              	.L53:
 1400              		.align	2
 1401              	.L52:
 1402 0278 00000000 		.word	.LANCHOR6
 1403 027c 00FEAF40 		.word	1085275648
 1404 0280 66666666 		.word	1717986918
 1405 0284 66660A40 		.word	1074423398
 1406 0288 0000E03F 		.word	1071644672
 1407 028c 7B14AE47 		.word	1202590843
 1408 0290 E17A843F 		.word	1065646817
 1409 0294 00000000 		.word	.LANCHOR7
 1410 0298 00000000 		.word	.LANCHOR8
 1411 029c 00007A44 		.word	1148846080
 1412 02a0 66661A40 		.word	1075471974
 1413 02a4 A4707D3F 		.word	1065185444
 1414 02a8 25068195 		.word	-1786706395
 1415 02ac 438BFA3F 		.word	1073384259
 1416 02b0 B81E85EB 		.word	-343597384
 1417 02b4 51B8E63F 		.word	1072085073
 1418 02b8 E07A843F 		.word	1065646816
 1419 02bc 00D7233C 		.word	1008981760
 1420 02c0 00000000 		.word	.LANCHOR9
 1421 02c4 00000000 		.word	.LANCHOR10
 1422 02c8 00004041 		.word	1094713344
 1423 02cc FCA9F1D2 		.word	-755914244
 1424 02d0 4D62503F 		.word	1062232653
ARM GAS  /tmp/ccL0lKDS.s 			page 44


 1425 02d4 00009643 		.word	1133903872
 1426 02d8 00000000 		.word	.LANCHOR4
 1427              		.cfi_endproc
 1428              	.LFE38:
 1430              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1431              		.align	1
 1432              		.global	HAL_TIM_PeriodElapsedCallback
 1433              		.syntax unified
 1434              		.code	16
 1435              		.thumb_func
 1436              		.fpu softvfp
 1438              	HAL_TIM_PeriodElapsedCallback:
 1439              	.LVL86:
 1440              	.LFB39:
 309:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 1441              		.loc 1 309 1 is_stmt 1 view -0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 309:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 1445              		.loc 1 309 1 is_stmt 0 view .LVU387
 1446 0000 10B5     		push	{r4, lr}
 1447              	.LCFI15:
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 4, -8
 1450              		.cfi_offset 14, -4
 310:Src/main.c    ****   {
 1451              		.loc 1 310 3 is_stmt 1 view .LVU388
 310:Src/main.c    ****   {
 1452              		.loc 1 310 6 is_stmt 0 view .LVU389
 1453 0002 094B     		ldr	r3, .L57
 1454 0004 1B68     		ldr	r3, [r3]
 310:Src/main.c    ****   {
 1455              		.loc 1 310 5 view .LVU390
 1456 0006 002B     		cmp	r3, #0
 1457 0008 00D1     		bne	.L56
 1458              	.LVL87:
 1459              	.L54:
 317:Src/main.c    **** 
 1460              		.loc 1 317 1 view .LVU391
 1461              		@ sp needed
 1462 000a 10BD     		pop	{r4, pc}
 1463              	.LVL88:
 1464              	.L56:
 312:Src/main.c    **** 
 1465              		.loc 1 312 5 is_stmt 1 view .LVU392
 312:Src/main.c    **** 
 1466              		.loc 1 312 17 is_stmt 0 view .LVU393
 1467 000c 064B     		ldr	r3, .L57
 1468 000e 0022     		movs	r2, #0
 1469 0010 1A60     		str	r2, [r3]
 314:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 1470              		.loc 1 314 5 is_stmt 1 view .LVU394
 1471 0012 8032     		adds	r2, r2, #128
 1472 0014 054C     		ldr	r4, .L57+4
 1473 0016 9200     		lsls	r2, r2, #2
 1474 0018 0549     		ldr	r1, .L57+8
ARM GAS  /tmp/ccL0lKDS.s 			page 45


 1475 001a 2000     		movs	r0, r4
 1476              	.LVL89:
 314:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 1477              		.loc 1 314 5 is_stmt 0 view .LVU395
 1478 001c FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 1479              	.LVL90:
 315:Src/main.c    ****   }
 1480              		.loc 1 315 5 is_stmt 1 view .LVU396
 1481 0020 2000     		movs	r0, r4
 1482 0022 FFF7FEFF 		bl	USBD_CDC_TransmitPacket
 1483              	.LVL91:
 317:Src/main.c    **** 
 1484              		.loc 1 317 1 is_stmt 0 view .LVU397
 1485 0026 F0E7     		b	.L54
 1486              	.L58:
 1487              		.align	2
 1488              	.L57:
 1489 0028 00000000 		.word	.LANCHOR11
 1490 002c 00000000 		.word	USBD_Device
 1491 0030 00000000 		.word	UserTxBuffer
 1492              		.cfi_endproc
 1493              	.LFE39:
 1495              		.global	__aeabi_f2uiz
 1496              		.section	.rodata.USB_printfloat.str1.4,"aMS",%progbits,1
 1497              		.align	2
 1498              	.LC16:
 1499 0000 25642E25 		.ascii	"%d.%d \015\012\000"
 1499      64200D0A 
 1499      00
 1500              		.section	.text.USB_printfloat,"ax",%progbits
 1501              		.align	1
 1502              		.global	USB_printfloat
 1503              		.syntax unified
 1504              		.code	16
 1505              		.thumb_func
 1506              		.fpu softvfp
 1508              	USB_printfloat:
 1509              	.LVL92:
 1510              	.LFB40:
 319:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 1511              		.loc 1 319 32 is_stmt 1 view -0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 319:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 1515              		.loc 1 319 32 is_stmt 0 view .LVU399
 1516 0000 70B5     		push	{r4, r5, r6, lr}
 1517              	.LCFI16:
 1518              		.cfi_def_cfa_offset 16
 1519              		.cfi_offset 4, -16
 1520              		.cfi_offset 5, -12
 1521              		.cfi_offset 6, -8
 1522              		.cfi_offset 14, -4
 1523 0002 051C     		adds	r5, r0, #0
 320:Src/main.c    ****   sprintf((char * restrict) UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_
 1524              		.loc 1 320 3 is_stmt 1 view .LVU400
 1525 0004 104E     		ldr	r6, .L60
ARM GAS  /tmp/ccL0lKDS.s 			page 46


 1526 0006 8022     		movs	r2, #128
 1527 0008 9200     		lsls	r2, r2, #2
 1528 000a 0021     		movs	r1, #0
 1529 000c 3000     		movs	r0, r6
 1530              	.LVL93:
 320:Src/main.c    ****   sprintf((char * restrict) UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_
 1531              		.loc 1 320 3 is_stmt 0 view .LVU401
 1532 000e FFF7FEFF 		bl	memset
 1533              	.LVL94:
 321:Src/main.c    ****   sendDataUSB = 1;
 1534              		.loc 1 321 3 is_stmt 1 view .LVU402
 321:Src/main.c    ****   sendDataUSB = 1;
 1535              		.loc 1 321 57 is_stmt 0 view .LVU403
 1536 0012 281C     		adds	r0, r5, #0
 1537 0014 FFF7FEFF 		bl	__aeabi_f2uiz
 1538              	.LVL95:
 1539 0018 84B2     		uxth	r4, r0
 321:Src/main.c    ****   sendDataUSB = 1;
 1540              		.loc 1 321 88 view .LVU404
 1541 001a 2000     		movs	r0, r4
 1542 001c FFF7FEFF 		bl	__aeabi_i2f
 1543              	.LVL96:
 1544 0020 011C     		adds	r1, r0, #0
 1545 0022 281C     		adds	r0, r5, #0
 1546 0024 FFF7FEFF 		bl	__aeabi_fsub
 1547              	.LVL97:
 321:Src/main.c    ****   sendDataUSB = 1;
 1548              		.loc 1 321 104 view .LVU405
 1549 0028 0849     		ldr	r1, .L60+4
 1550 002a FFF7FEFF 		bl	__aeabi_fmul
 1551              	.LVL98:
 321:Src/main.c    ****   sendDataUSB = 1;
 1552              		.loc 1 321 72 view .LVU406
 1553 002e FFF7FEFF 		bl	__aeabi_f2uiz
 1554              	.LVL99:
 1555 0032 83B2     		uxth	r3, r0
 321:Src/main.c    ****   sendDataUSB = 1;
 1556              		.loc 1 321 3 view .LVU407
 1557 0034 2200     		movs	r2, r4
 1558 0036 0649     		ldr	r1, .L60+8
 1559 0038 3000     		movs	r0, r6
 1560 003a FFF7FEFF 		bl	sprintf
 1561              	.LVL100:
 322:Src/main.c    **** }
 1562              		.loc 1 322 3 is_stmt 1 view .LVU408
 322:Src/main.c    **** }
 1563              		.loc 1 322 15 is_stmt 0 view .LVU409
 1564 003e 054B     		ldr	r3, .L60+12
 1565 0040 0122     		movs	r2, #1
 1566 0042 1A60     		str	r2, [r3]
 323:Src/main.c    **** 
 1567              		.loc 1 323 1 view .LVU410
 1568              		@ sp needed
 1569              	.LVL101:
 323:Src/main.c    **** 
 1570              		.loc 1 323 1 view .LVU411
 1571 0044 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccL0lKDS.s 			page 47


 1572              	.L61:
 1573 0046 C046     		.align	2
 1574              	.L60:
 1575 0048 00000000 		.word	UserTxBuffer
 1576 004c 00002041 		.word	1092616192
 1577 0050 00000000 		.word	.LC16
 1578 0054 00000000 		.word	.LANCHOR11
 1579              		.cfi_endproc
 1580              	.LFE40:
 1582              		.section	.text.disp_init,"ax",%progbits
 1583              		.align	1
 1584              		.global	disp_init
 1585              		.syntax unified
 1586              		.code	16
 1587              		.thumb_func
 1588              		.fpu softvfp
 1590              	disp_init:
 1591              	.LFB41:
 361:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 1592              		.loc 1 361 22 is_stmt 1 view -0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596 0000 10B5     		push	{r4, lr}
 1597              	.LCFI17:
 1598              		.cfi_def_cfa_offset 8
 1599              		.cfi_offset 4, -8
 1600              		.cfi_offset 14, -4
 1601 0002 82B0     		sub	sp, sp, #8
 1602              	.LCFI18:
 1603              		.cfi_def_cfa_offset 16
 362:Src/main.c    ****   uint16_t _cnt = 0;
 1604              		.loc 1 362 3 view .LVU413
 1605 0004 104A     		ldr	r2, .L66
 1606 0006 114B     		ldr	r3, .L66+4
 1607 0008 13CB     		ldmia	r3!, {r0, r1, r4}
 1608 000a 13C2     		stmia	r2!, {r0, r1, r4}
 1609 000c 1100     		movs	r1, r2
 1610 000e 1A68     		ldr	r2, [r3]
 1611 0010 0A60     		str	r2, [r1]
 1612 0012 1B79     		ldrb	r3, [r3, #4]
 1613 0014 0B71     		strb	r3, [r1, #4]
 363:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1614              		.loc 1 363 3 view .LVU414
 1615              	.LVL102:
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1616              		.loc 1 364 3 view .LVU415
 363:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1617              		.loc 1 363 12 is_stmt 0 view .LVU416
 1618 0016 0024     		movs	r4, #0
 1619              	.LVL103:
 1620              	.L63:
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1621              		.loc 1 364 9 is_stmt 1 discriminator 1 view .LVU417
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1622              		.loc 1 364 10 is_stmt 0 discriminator 1 view .LVU418
 1623 0018 0D48     		ldr	r0, .L66+8
ARM GAS  /tmp/ccL0lKDS.s 			page 48


 1624 001a FFF7FEFF 		bl	HAL_I2C_GetState
 1625              	.LVL104:
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1626              		.loc 1 364 9 discriminator 1 view .LVU419
 1627 001e 2028     		cmp	r0, #32
 1628 0020 06D0     		beq	.L64
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1629              		.loc 1 364 59 is_stmt 1 discriminator 2 view .LVU420
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1630              		.loc 1 364 67 is_stmt 0 discriminator 2 view .LVU421
 1631 0022 631C     		adds	r3, r4, #1
 1632 0024 9BB2     		uxth	r3, r3
 1633              	.LVL105:
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1634              		.loc 1 364 62 discriminator 2 view .LVU422
 1635 0026 0B4A     		ldr	r2, .L66+12
 1636 0028 9442     		cmp	r4, r2
 1637 002a 01D8     		bhi	.L64
 364:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1638              		.loc 1 364 67 view .LVU423
 1639 002c 1C00     		movs	r4, r3
 1640 002e F3E7     		b	.L63
 1641              	.LVL106:
 1642              	.L64:
 365:Src/main.c    **** }
 1643              		.loc 1 365 3 is_stmt 1 view .LVU424
 1644 0030 FA23     		movs	r3, #250
 1645 0032 9B00     		lsls	r3, r3, #2
 1646 0034 0093     		str	r3, [sp]
 1647 0036 3223     		movs	r3, #50
 1648 0038 074A     		ldr	r2, .L66+16
 1649 003a 7821     		movs	r1, #120
 1650 003c 0448     		ldr	r0, .L66+8
 1651 003e FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1652              	.LVL107:
 366:Src/main.c    **** 
 1653              		.loc 1 366 1 is_stmt 0 view .LVU425
 1654 0042 02B0     		add	sp, sp, #8
 1655              		@ sp needed
 1656 0044 10BD     		pop	{r4, pc}
 1657              	.L67:
 1658 0046 C046     		.align	2
 1659              	.L66:
 1660 0048 00000000 		.word	screenBuffer
 1661 004c 00000000 		.word	.LANCHOR12
 1662 0050 00000000 		.word	.LANCHOR1
 1663 0054 10270000 		.word	10000
 1664 0058 00000000 		.word	.LANCHOR13
 1665              		.cfi_endproc
 1666              	.LFE41:
 1668              		.section	.text.refresh,"ax",%progbits
 1669              		.align	1
 1670              		.global	refresh
 1671              		.syntax unified
 1672              		.code	16
 1673              		.thumb_func
 1674              		.fpu softvfp
ARM GAS  /tmp/ccL0lKDS.s 			page 49


 1676              	refresh:
 1677              	.LFB42:
 368:Src/main.c    ****   uint16_t _cnt = 0;
 1678              		.loc 1 368 20 is_stmt 1 view -0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682 0000 10B5     		push	{r4, lr}
 1683              	.LCFI19:
 1684              		.cfi_def_cfa_offset 8
 1685              		.cfi_offset 4, -8
 1686              		.cfi_offset 14, -4
 1687 0002 82B0     		sub	sp, sp, #8
 1688              	.LCFI20:
 1689              		.cfi_def_cfa_offset 16
 369:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1690              		.loc 1 369 3 view .LVU427
 1691              	.LVL108:
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1692              		.loc 1 370 3 view .LVU428
 369:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1693              		.loc 1 369 12 is_stmt 0 view .LVU429
 1694 0004 0024     		movs	r4, #0
 1695              	.LVL109:
 1696              	.L69:
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1697              		.loc 1 370 9 is_stmt 1 discriminator 1 view .LVU430
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1698              		.loc 1 370 10 is_stmt 0 discriminator 1 view .LVU431
 1699 0006 0B48     		ldr	r0, .L72
 1700 0008 FFF7FEFF 		bl	HAL_I2C_GetState
 1701              	.LVL110:
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1702              		.loc 1 370 9 discriminator 1 view .LVU432
 1703 000c 2028     		cmp	r0, #32
 1704 000e 06D0     		beq	.L70
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1705              		.loc 1 370 59 is_stmt 1 discriminator 2 view .LVU433
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1706              		.loc 1 370 67 is_stmt 0 discriminator 2 view .LVU434
 1707 0010 631C     		adds	r3, r4, #1
 1708 0012 9BB2     		uxth	r3, r3
 1709              	.LVL111:
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1710              		.loc 1 370 62 discriminator 2 view .LVU435
 1711 0014 084A     		ldr	r2, .L72+4
 1712 0016 9442     		cmp	r4, r2
 1713 0018 01D8     		bhi	.L70
 370:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1714              		.loc 1 370 67 view .LVU436
 1715 001a 1C00     		movs	r4, r3
 1716 001c F3E7     		b	.L69
 1717              	.LVL112:
 1718              	.L70:
 371:Src/main.c    **** }
 1719              		.loc 1 371 3 is_stmt 1 view .LVU437
 1720 001e FA23     		movs	r3, #250
ARM GAS  /tmp/ccL0lKDS.s 			page 50


 1721 0020 9B00     		lsls	r3, r3, #2
 1722 0022 0093     		str	r3, [sp]
 1723 0024 D123     		movs	r3, #209
 1724 0026 054A     		ldr	r2, .L72+8
 1725 0028 7821     		movs	r1, #120
 1726 002a 0248     		ldr	r0, .L72
 1727 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1728              	.LVL113:
 372:Src/main.c    **** 
 1729              		.loc 1 372 1 is_stmt 0 view .LVU438
 1730 0030 02B0     		add	sp, sp, #8
 1731              		@ sp needed
 1732 0032 10BD     		pop	{r4, pc}
 1733              	.L73:
 1734              		.align	2
 1735              	.L72:
 1736 0034 00000000 		.word	.LANCHOR1
 1737 0038 10270000 		.word	10000
 1738 003c 00000000 		.word	screenBuffer
 1739              		.cfi_endproc
 1740              	.LFE42:
 1742              		.section	.text.clear_screen,"ax",%progbits
 1743              		.align	1
 1744              		.global	clear_screen
 1745              		.syntax unified
 1746              		.code	16
 1747              		.thumb_func
 1748              		.fpu softvfp
 1750              	clear_screen:
 1751              	.LFB43:
 374:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 1752              		.loc 1 374 25 is_stmt 1 view -0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 1756 0000 10B5     		push	{r4, lr}
 1757              	.LCFI21:
 1758              		.cfi_def_cfa_offset 8
 1759              		.cfi_offset 4, -8
 1760              		.cfi_offset 14, -4
 375:Src/main.c    **** }
 1761              		.loc 1 375 3 view .LVU440
 1762 0002 C022     		movs	r2, #192
 1763 0004 0021     		movs	r1, #0
 1764 0006 0248     		ldr	r0, .L75
 1765 0008 FFF7FEFF 		bl	memset
 1766              	.LVL114:
 376:Src/main.c    **** void set_screen(void) {
 1767              		.loc 1 376 1 is_stmt 0 view .LVU441
 1768              		@ sp needed
 1769 000c 10BD     		pop	{r4, pc}
 1770              	.L76:
 1771 000e C046     		.align	2
 1772              	.L75:
 1773 0010 11000000 		.word	screenBuffer+17
 1774              		.cfi_endproc
 1775              	.LFE43:
ARM GAS  /tmp/ccL0lKDS.s 			page 51


 1777              		.section	.text.set_screen,"ax",%progbits
 1778              		.align	1
 1779              		.global	set_screen
 1780              		.syntax unified
 1781              		.code	16
 1782              		.thumb_func
 1783              		.fpu softvfp
 1785              	set_screen:
 1786              	.LFB44:
 377:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 1787              		.loc 1 377 23 is_stmt 1 view -0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 0
 1790              		@ frame_needed = 0, uses_anonymous_args = 0
 1791 0000 10B5     		push	{r4, lr}
 1792              	.LCFI22:
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 4, -8
 1795              		.cfi_offset 14, -4
 378:Src/main.c    **** }
 1796              		.loc 1 378 3 view .LVU443
 1797 0002 C022     		movs	r2, #192
 1798 0004 FF21     		movs	r1, #255
 1799 0006 0248     		ldr	r0, .L78
 1800 0008 FFF7FEFF 		bl	memset
 1801              	.LVL115:
 379:Src/main.c    **** 
 1802              		.loc 1 379 1 is_stmt 0 view .LVU444
 1803              		@ sp needed
 1804 000c 10BD     		pop	{r4, pc}
 1805              	.L79:
 1806 000e C046     		.align	2
 1807              	.L78:
 1808 0010 11000000 		.word	screenBuffer+17
 1809              		.cfi_endproc
 1810              	.LFE44:
 1812              		.section	.text.write_pixel,"ax",%progbits
 1813              		.align	1
 1814              		.global	write_pixel
 1815              		.syntax unified
 1816              		.code	16
 1817              		.thumb_func
 1818              		.fpu softvfp
 1820              	write_pixel:
 1821              	.LVL116:
 1822              	.LFB46:
 387:Src/main.c    ****   if(x>95 || y >15){
 1823              		.loc 1 387 54 is_stmt 1 view -0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 387:Src/main.c    ****   if(x>95 || y >15){
 1827              		.loc 1 387 54 is_stmt 0 view .LVU446
 1828 0000 30B5     		push	{r4, r5, lr}
 1829              	.LCFI23:
 1830              		.cfi_def_cfa_offset 12
 1831              		.cfi_offset 4, -12
ARM GAS  /tmp/ccL0lKDS.s 			page 52


 1832              		.cfi_offset 5, -8
 1833              		.cfi_offset 14, -4
 388:Src/main.c    ****     return;
 1834              		.loc 1 388 3 is_stmt 1 view .LVU447
 388:Src/main.c    ****     return;
 1835              		.loc 1 388 5 is_stmt 0 view .LVU448
 1836 0002 5F28     		cmp	r0, #95
 1837 0004 32DC     		bgt	.L80
 388:Src/main.c    ****     return;
 1838              		.loc 1 388 11 discriminator 1 view .LVU449
 1839 0006 0F29     		cmp	r1, #15
 1840 0008 30DC     		bgt	.L80
 391:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1841              		.loc 1 391 3 is_stmt 1 view .LVU450
 391:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1842              		.loc 1 391 5 is_stmt 0 view .LVU451
 1843 000a 012A     		cmp	r2, #1
 1844 000c 18D0     		beq	.L83
 393:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1845              		.loc 1 393 10 is_stmt 1 view .LVU452
 393:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1846              		.loc 1 393 13 is_stmt 0 view .LVU453
 1847 000e 002A     		cmp	r2, #0
 1848 0010 2CD1     		bne	.L80
 394:Src/main.c    ****   }
 1849              		.loc 1 394 5 is_stmt 1 view .LVU454
 394:Src/main.c    ****   }
 1850              		.loc 1 394 56 is_stmt 0 view .LVU455
 1851 0012 CD17     		asrs	r5, r1, #31
 1852 0014 0732     		adds	r2, r2, #7
 1853              	.LVL117:
 394:Src/main.c    ****   }
 1854              		.loc 1 394 56 view .LVU456
 1855 0016 1300     		movs	r3, r2
 1856 0018 2B40     		ands	r3, r5
 1857 001a 5B18     		adds	r3, r3, r1
 1858 001c DC10     		asrs	r4, r3, #3
 1859 001e 6300     		lsls	r3, r4, #1
 1860 0020 1B19     		adds	r3, r3, r4
 1861 0022 5B01     		lsls	r3, r3, #5
 1862 0024 1818     		adds	r0, r3, r0
 1863              	.LVL118:
 394:Src/main.c    ****   }
 1864              		.loc 1 394 56 view .LVU457
 1865 0026 1130     		adds	r0, r0, #17
 394:Src/main.c    ****   }
 1866              		.loc 1 394 68 view .LVU458
 1867 0028 6D0F     		lsrs	r5, r5, #29
 1868 002a 4919     		adds	r1, r1, r5
 1869              	.LVL119:
 394:Src/main.c    ****   }
 1870              		.loc 1 394 68 view .LVU459
 1871 002c 1140     		ands	r1, r2
 1872 002e 491B     		subs	r1, r1, r5
 1873 0030 09B2     		sxth	r1, r1
 394:Src/main.c    ****   }
 1874              		.loc 1 394 63 view .LVU460
ARM GAS  /tmp/ccL0lKDS.s 			page 53


 1875 0032 063A     		subs	r2, r2, #6
 1876 0034 8A40     		lsls	r2, r2, r1
 394:Src/main.c    ****   }
 1877              		.loc 1 394 56 view .LVU461
 1878 0036 0E49     		ldr	r1, .L84
 1879 0038 0B5C     		ldrb	r3, [r1, r0]
 1880 003a 9343     		bics	r3, r2
 1881 003c 0B54     		strb	r3, [r1, r0]
 1882 003e 15E0     		b	.L80
 1883              	.LVL120:
 1884              	.L83:
 392:Src/main.c    ****   } else if (color == 0){
 1885              		.loc 1 392 5 is_stmt 1 view .LVU462
 392:Src/main.c    ****   } else if (color == 0){
 1886              		.loc 1 392 56 is_stmt 0 view .LVU463
 1887 0040 CD17     		asrs	r5, r1, #31
 1888 0042 0632     		adds	r2, r2, #6
 1889              	.LVL121:
 392:Src/main.c    ****   } else if (color == 0){
 1890              		.loc 1 392 56 view .LVU464
 1891 0044 1300     		movs	r3, r2
 1892 0046 2B40     		ands	r3, r5
 1893 0048 5B18     		adds	r3, r3, r1
 1894 004a DC10     		asrs	r4, r3, #3
 1895 004c 6300     		lsls	r3, r4, #1
 1896 004e 1B19     		adds	r3, r3, r4
 1897 0050 5B01     		lsls	r3, r3, #5
 1898 0052 1818     		adds	r0, r3, r0
 1899              	.LVL122:
 392:Src/main.c    ****   } else if (color == 0){
 1900              		.loc 1 392 56 view .LVU465
 1901 0054 1130     		adds	r0, r0, #17
 392:Src/main.c    ****   } else if (color == 0){
 1902              		.loc 1 392 68 view .LVU466
 1903 0056 6D0F     		lsrs	r5, r5, #29
 1904 0058 4919     		adds	r1, r1, r5
 1905              	.LVL123:
 392:Src/main.c    ****   } else if (color == 0){
 1906              		.loc 1 392 68 view .LVU467
 1907 005a 1140     		ands	r1, r2
 1908 005c 491B     		subs	r1, r1, r5
 1909 005e 09B2     		sxth	r1, r1
 392:Src/main.c    ****   } else if (color == 0){
 1910              		.loc 1 392 63 view .LVU468
 1911 0060 063A     		subs	r2, r2, #6
 1912 0062 8A40     		lsls	r2, r2, r1
 392:Src/main.c    ****   } else if (color == 0){
 1913              		.loc 1 392 56 view .LVU469
 1914 0064 0249     		ldr	r1, .L84
 1915 0066 0B5C     		ldrb	r3, [r1, r0]
 1916 0068 1343     		orrs	r3, r2
 1917 006a 0B54     		strb	r3, [r1, r0]
 1918              	.L80:
 396:Src/main.c    **** 
 1919              		.loc 1 396 1 view .LVU470
 1920              		@ sp needed
 1921 006c 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccL0lKDS.s 			page 54


 1922              	.L85:
 1923 006e C046     		.align	2
 1924              	.L84:
 1925 0070 00000000 		.word	screenBuffer
 1926              		.cfi_endproc
 1927              	.LFE46:
 1929              		.section	.text.draw_v_line,"ax",%progbits
 1930              		.align	1
 1931              		.global	draw_v_line
 1932              		.syntax unified
 1933              		.code	16
 1934              		.thumb_func
 1935              		.fpu softvfp
 1937              	draw_v_line:
 1938              	.LVL124:
 1939              	.LFB45:
 381:Src/main.c    ****   for(int i = 0; i <= h; i++){
 1940              		.loc 1 381 66 is_stmt 1 view -0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 381:Src/main.c    ****   for(int i = 0; i <= h; i++){
 1944              		.loc 1 381 66 is_stmt 0 view .LVU472
 1945 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1946              	.LCFI24:
 1947              		.cfi_def_cfa_offset 20
 1948              		.cfi_offset 4, -20
 1949              		.cfi_offset 5, -16
 1950              		.cfi_offset 6, -12
 1951              		.cfi_offset 7, -8
 1952              		.cfi_offset 14, -4
 1953 0002 C646     		mov	lr, r8
 1954 0004 00B5     		push	{lr}
 1955              	.LCFI25:
 1956              		.cfi_def_cfa_offset 24
 1957              		.cfi_offset 8, -24
 1958 0006 8046     		mov	r8, r0
 1959 0008 0F00     		movs	r7, r1
 1960 000a 1500     		movs	r5, r2
 1961 000c 1E00     		movs	r6, r3
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1962              		.loc 1 382 3 is_stmt 1 view .LVU473
 1963              	.LBB16:
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1964              		.loc 1 382 7 view .LVU474
 1965              	.LVL125:
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1966              		.loc 1 382 11 is_stmt 0 view .LVU475
 1967 000e 0024     		movs	r4, #0
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1968              		.loc 1 382 3 view .LVU476
 1969 0010 06E0     		b	.L87
 1970              	.LVL126:
 1971              	.L88:
 383:Src/main.c    ****   }
 1972              		.loc 1 383 5 is_stmt 1 discriminator 3 view .LVU477
 383:Src/main.c    ****   }
ARM GAS  /tmp/ccL0lKDS.s 			page 55


 1973              		.loc 1 383 21 is_stmt 0 discriminator 3 view .LVU478
 1974 0012 E119     		adds	r1, r4, r7
 383:Src/main.c    ****   }
 1975              		.loc 1 383 5 discriminator 3 view .LVU479
 1976 0014 09B2     		sxth	r1, r1
 1977 0016 3200     		movs	r2, r6
 1978 0018 4046     		mov	r0, r8
 1979 001a FFF7FEFF 		bl	write_pixel
 1980              	.LVL127:
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1981              		.loc 1 382 26 is_stmt 1 discriminator 3 view .LVU480
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1982              		.loc 1 382 27 is_stmt 0 discriminator 3 view .LVU481
 1983 001e 0134     		adds	r4, r4, #1
 1984              	.LVL128:
 1985              	.L87:
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1986              		.loc 1 382 18 is_stmt 1 discriminator 1 view .LVU482
 382:Src/main.c    ****     write_pixel(x, y+i, color);
 1987              		.loc 1 382 3 is_stmt 0 discriminator 1 view .LVU483
 1988 0020 A542     		cmp	r5, r4
 1989 0022 F6DA     		bge	.L88
 1990              	.LBE16:
 385:Src/main.c    **** 
 1991              		.loc 1 385 1 view .LVU484
 1992              		@ sp needed
 1993              	.LVL129:
 385:Src/main.c    **** 
 1994              		.loc 1 385 1 view .LVU485
 1995 0024 80BC     		pop	{r7}
 1996 0026 B846     		mov	r8, r7
 1997 0028 F0BD     		pop	{r4, r5, r6, r7, pc}
 1998              		.cfi_endproc
 1999              	.LFE45:
 2001              		.section	.text.draw_char,"ax",%progbits
 2002              		.align	1
 2003              		.global	draw_char
 2004              		.syntax unified
 2005              		.code	16
 2006              		.thumb_func
 2007              		.fpu softvfp
 2009              	draw_char:
 2010              	.LVL130:
 2011              	.LFB47:
 400:Src/main.c    ****     c = c & 0x7F;
 2012              		.loc 1 400 75 is_stmt 1 view -0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 0
 2015              		@ frame_needed = 0, uses_anonymous_args = 0
 400:Src/main.c    ****     c = c & 0x7F;
 2016              		.loc 1 400 75 is_stmt 0 view .LVU487
 2017 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2018              	.LCFI26:
 2019              		.cfi_def_cfa_offset 20
 2020              		.cfi_offset 4, -20
 2021              		.cfi_offset 5, -16
 2022              		.cfi_offset 6, -12
ARM GAS  /tmp/ccL0lKDS.s 			page 56


 2023              		.cfi_offset 7, -8
 2024              		.cfi_offset 14, -4
 2025 0002 C646     		mov	lr, r8
 2026 0004 00B5     		push	{lr}
 2027              	.LCFI27:
 2028              		.cfi_def_cfa_offset 24
 2029              		.cfi_offset 8, -24
 2030 0006 0F00     		movs	r7, r1
 2031 0008 9046     		mov	r8, r2
 401:Src/main.c    ****     if (c < ' ') {
 2032              		.loc 1 401 5 is_stmt 1 view .LVU488
 401:Src/main.c    ****     if (c < ' ') {
 2033              		.loc 1 401 7 is_stmt 0 view .LVU489
 2034 000a 7F23     		movs	r3, #127
 2035              	.LVL131:
 401:Src/main.c    ****     if (c < ' ') {
 2036              		.loc 1 401 7 view .LVU490
 2037 000c 0340     		ands	r3, r0
 2038              	.LVL132:
 402:Src/main.c    ****         c = 0;
 2039              		.loc 1 402 5 is_stmt 1 view .LVU491
 2040 000e 6021     		movs	r1, #96
 2041              	.LVL133:
 402:Src/main.c    ****         c = 0;
 2042              		.loc 1 402 5 is_stmt 0 view .LVU492
 2043 0010 0A00     		movs	r2, r1
 2044              	.LVL134:
 402:Src/main.c    ****         c = 0;
 2045              		.loc 1 402 5 view .LVU493
 2046 0012 0240     		ands	r2, r0
 402:Src/main.c    ****         c = 0;
 2047              		.loc 1 402 8 view .LVU494
 2048 0014 0142     		tst	r1, r0
 2049 0016 01D0     		beq	.L90
 405:Src/main.c    ****     }
 2050              		.loc 1 405 9 is_stmt 1 view .LVU495
 405:Src/main.c    ****     }
 2051              		.loc 1 405 11 is_stmt 0 view .LVU496
 2052 0018 203B     		subs	r3, r3, #32
 2053              	.LVL135:
 405:Src/main.c    ****     }
 2054              		.loc 1 405 11 view .LVU497
 2055 001a DAB2     		uxtb	r2, r3
 2056              	.LVL136:
 2057              	.L90:
 407:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 2058              		.loc 1 407 5 is_stmt 1 view .LVU498
 407:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 2059              		.loc 1 407 15 is_stmt 0 view .LVU499
 2060 001c 5600     		lsls	r6, r2, #1
 2061 001e B618     		adds	r6, r6, r2
 2062 0020 7600     		lsls	r6, r6, #1
 2063 0022 114B     		ldr	r3, .L99
 2064 0024 F618     		adds	r6, r6, r3
 2065              	.LVL137:
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2066              		.loc 1 408 5 is_stmt 1 view .LVU500
ARM GAS  /tmp/ccL0lKDS.s 			page 57


 2067              	.LBB17:
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2068              		.loc 1 408 10 view .LVU501
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2069              		.loc 1 408 18 is_stmt 0 view .LVU502
 2070 0026 0025     		movs	r5, #0
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2071              		.loc 1 408 5 view .LVU503
 2072 0028 16E0     		b	.L91
 2073              	.LVL138:
 2074              	.L92:
 2075              	.LBB18:
 413:Src/main.c    ****             }
 2076              		.loc 1 413 17 is_stmt 1 view .LVU504
 2077 002a 4346     		mov	r3, r8
 2078 002c 1919     		adds	r1, r3, r4
 2079 002e 7819     		adds	r0, r7, r5
 2080 0030 0022     		movs	r2, #0
 2081 0032 FFF7FEFF 		bl	write_pixel
 2082              	.LVL139:
 2083              	.L93:
 409:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2084              		.loc 1 409 42 discriminator 2 view .LVU505
 409:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2085              		.loc 1 409 43 is_stmt 0 discriminator 2 view .LVU506
 2086 0036 0134     		adds	r4, r4, #1
 2087              	.LVL140:
 409:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2088              		.loc 1 409 43 discriminator 2 view .LVU507
 2089 0038 E4B2     		uxtb	r4, r4
 2090              	.LVL141:
 2091              	.L95:
 409:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2092              		.loc 1 409 27 is_stmt 1 discriminator 1 view .LVU508
 409:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2093              		.loc 1 409 9 is_stmt 0 discriminator 1 view .LVU509
 2094 003a 072C     		cmp	r4, #7
 2095 003c 0AD8     		bhi	.L97
 410:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2096              		.loc 1 410 13 is_stmt 1 view .LVU510
 410:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2097              		.loc 1 410 20 is_stmt 0 view .LVU511
 2098 003e 735D     		ldrb	r3, [r6, r5]
 410:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2099              		.loc 1 410 17 view .LVU512
 2100 0040 2341     		asrs	r3, r3, r4
 410:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 2101              		.loc 1 410 16 view .LVU513
 2102 0042 DB07     		lsls	r3, r3, #31
 2103 0044 F1D5     		bpl	.L92
 411:Src/main.c    ****             } else {
 2104              		.loc 1 411 17 is_stmt 1 view .LVU514
 2105 0046 4346     		mov	r3, r8
 2106 0048 1919     		adds	r1, r3, r4
 2107 004a 7819     		adds	r0, r7, r5
 2108 004c 0122     		movs	r2, #1
 2109 004e FFF7FEFF 		bl	write_pixel
ARM GAS  /tmp/ccL0lKDS.s 			page 58


 2110              	.LVL142:
 2111 0052 F0E7     		b	.L93
 2112              	.L97:
 411:Src/main.c    ****             } else {
 2113              		.loc 1 411 17 is_stmt 0 view .LVU515
 2114              	.LBE18:
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2115              		.loc 1 408 37 is_stmt 1 discriminator 2 view .LVU516
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2116              		.loc 1 408 38 is_stmt 0 discriminator 2 view .LVU517
 2117 0054 0135     		adds	r5, r5, #1
 2118              	.LVL143:
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2119              		.loc 1 408 38 discriminator 2 view .LVU518
 2120 0056 EDB2     		uxtb	r5, r5
 2121              	.LVL144:
 2122              	.L91:
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2123              		.loc 1 408 23 is_stmt 1 discriminator 1 view .LVU519
 408:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 2124              		.loc 1 408 5 is_stmt 0 discriminator 1 view .LVU520
 2125 0058 052D     		cmp	r5, #5
 2126 005a 01D8     		bhi	.L98
 2127              	.LBB19:
 409:Src/main.c    ****             if (chr[j] & (1<<i)) {
 2128              		.loc 1 409 22 view .LVU521
 2129 005c 0024     		movs	r4, #0
 2130 005e ECE7     		b	.L95
 2131              	.L98:
 2132              	.LBE19:
 2133              	.LBE17:
 417:Src/main.c    **** 
 2134              		.loc 1 417 1 view .LVU522
 2135              		@ sp needed
 2136              	.LVL145:
 2137              	.LVL146:
 417:Src/main.c    **** 
 2138              		.loc 1 417 1 view .LVU523
 2139 0060 80BC     		pop	{r7}
 2140 0062 B846     		mov	r8, r7
 2141 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 2142              	.L100:
 2143 0066 C046     		.align	2
 2144              	.L99:
 2145 0068 00000000 		.word	font
 2146              		.cfi_endproc
 2147              	.LFE47:
 2149              		.section	.text.draw_string,"ax",%progbits
 2150              		.align	1
 2151              		.global	draw_string
 2152              		.syntax unified
 2153              		.code	16
 2154              		.thumb_func
 2155              		.fpu softvfp
 2157              	draw_string:
 2158              	.LVL147:
 2159              	.LFB48:
ARM GAS  /tmp/ccL0lKDS.s 			page 59


 419:Src/main.c    ****     while (*str) {
 2160              		.loc 1 419 86 is_stmt 1 view -0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 419:Src/main.c    ****     while (*str) {
 2164              		.loc 1 419 86 is_stmt 0 view .LVU525
 2165 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2166              	.LCFI28:
 2167              		.cfi_def_cfa_offset 24
 2168              		.cfi_offset 3, -24
 2169              		.cfi_offset 4, -20
 2170              		.cfi_offset 5, -16
 2171              		.cfi_offset 6, -12
 2172              		.cfi_offset 7, -8
 2173              		.cfi_offset 14, -4
 2174 0002 0500     		movs	r5, r0
 2175 0004 0C00     		movs	r4, r1
 2176 0006 1700     		movs	r7, r2
 2177 0008 1E00     		movs	r6, r3
 420:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2178              		.loc 1 420 5 is_stmt 1 view .LVU526
 420:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2179              		.loc 1 420 11 is_stmt 0 view .LVU527
 2180 000a 07E0     		b	.L102
 2181              	.LVL148:
 2182              	.L103:
 421:Src/main.c    ****         x += CHAR_WIDTH;
 2183              		.loc 1 421 9 is_stmt 1 view .LVU528
 421:Src/main.c    ****         x += CHAR_WIDTH;
 2184              		.loc 1 421 23 is_stmt 0 view .LVU529
 2185 000c 0135     		adds	r5, r5, #1
 2186              	.LVL149:
 421:Src/main.c    ****         x += CHAR_WIDTH;
 2187              		.loc 1 421 9 view .LVU530
 2188 000e 3300     		movs	r3, r6
 2189 0010 3A00     		movs	r2, r7
 2190 0012 2100     		movs	r1, r4
 2191 0014 FFF7FEFF 		bl	draw_char
 2192              	.LVL150:
 422:Src/main.c    ****     }
 2193              		.loc 1 422 9 is_stmt 1 view .LVU531
 422:Src/main.c    ****     }
 2194              		.loc 1 422 11 is_stmt 0 view .LVU532
 2195 0018 0634     		adds	r4, r4, #6
 2196              	.LVL151:
 422:Src/main.c    ****     }
 2197              		.loc 1 422 11 view .LVU533
 2198 001a E4B2     		uxtb	r4, r4
 2199              	.LVL152:
 2200              	.L102:
 420:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2201              		.loc 1 420 11 is_stmt 1 view .LVU534
 420:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 2202              		.loc 1 420 12 is_stmt 0 view .LVU535
 2203 001c 2878     		ldrb	r0, [r5]
 420:Src/main.c    ****         draw_char(*str++, x, y, brightness);
ARM GAS  /tmp/ccL0lKDS.s 			page 60


 2204              		.loc 1 420 11 view .LVU536
 2205 001e 0028     		cmp	r0, #0
 2206 0020 F4D1     		bne	.L103
 424:Src/main.c    **** 
 2207              		.loc 1 424 1 view .LVU537
 2208              		@ sp needed
 2209              	.LVL153:
 2210              	.LVL154:
 424:Src/main.c    **** 
 2211              		.loc 1 424 1 view .LVU538
 2212 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2213              		.cfi_endproc
 2214              	.LFE48:
 2216              		.section	.text.SystemClock_Config,"ax",%progbits
 2217              		.align	1
 2218              		.global	SystemClock_Config
 2219              		.syntax unified
 2220              		.code	16
 2221              		.thumb_func
 2222              		.fpu softvfp
 2224              	SystemClock_Config:
 2225              	.LFB49:
 427:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2226              		.loc 1 427 1 is_stmt 1 view -0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 96
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230 0000 10B5     		push	{r4, lr}
 2231              	.LCFI29:
 2232              		.cfi_def_cfa_offset 8
 2233              		.cfi_offset 4, -8
 2234              		.cfi_offset 14, -4
 2235 0002 98B0     		sub	sp, sp, #96
 2236              	.LCFI30:
 2237              		.cfi_def_cfa_offset 104
 428:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2238              		.loc 1 428 3 view .LVU540
 428:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2239              		.loc 1 428 22 is_stmt 0 view .LVU541
 2240 0004 3422     		movs	r2, #52
 2241 0006 0021     		movs	r1, #0
 2242 0008 0BA8     		add	r0, sp, #44
 2243 000a FFF7FEFF 		bl	memset
 2244              	.LVL155:
 429:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2245              		.loc 1 429 3 is_stmt 1 view .LVU542
 429:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2246              		.loc 1 429 22 is_stmt 0 view .LVU543
 2247 000e 1024     		movs	r4, #16
 2248 0010 1022     		movs	r2, #16
 2249 0012 0021     		movs	r1, #0
 2250 0014 07A8     		add	r0, sp, #28
 2251 0016 FFF7FEFF 		bl	memset
 2252              	.LVL156:
 430:Src/main.c    **** 
 2253              		.loc 1 430 3 is_stmt 1 view .LVU544
 430:Src/main.c    **** 
ARM GAS  /tmp/ccL0lKDS.s 			page 61


 2254              		.loc 1 430 28 is_stmt 0 view .LVU545
 2255 001a 1C22     		movs	r2, #28
 2256 001c 0021     		movs	r1, #0
 2257 001e 6846     		mov	r0, sp
 2258 0020 FFF7FEFF 		bl	memset
 2259              	.LVL157:
 432:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 2260              		.loc 1 432 3 is_stmt 1 view .LVU546
 432:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 2261              		.loc 1 432 36 is_stmt 0 view .LVU547
 2262 0024 3223     		movs	r3, #50
 2263 0026 0B93     		str	r3, [sp, #44]
 434:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2264              		.loc 1 434 3 is_stmt 1 view .LVU548
 434:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2265              		.loc 1 434 30 is_stmt 0 view .LVU549
 2266 0028 313B     		subs	r3, r3, #49
 2267 002a 0E93     		str	r3, [sp, #56]
 435:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 2268              		.loc 1 435 3 is_stmt 1 view .LVU550
 435:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 2269              		.loc 1 435 32 is_stmt 0 view .LVU551
 2270 002c 1393     		str	r3, [sp, #76]
 436:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2271              		.loc 1 436 3 is_stmt 1 view .LVU552
 436:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2272              		.loc 1 436 32 is_stmt 0 view .LVU553
 2273 002e 1093     		str	r3, [sp, #64]
 437:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 2274              		.loc 1 437 3 is_stmt 1 view .LVU554
 437:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 2275              		.loc 1 437 41 is_stmt 0 view .LVU555
 2276 0030 0F94     		str	r4, [sp, #60]
 438:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2277              		.loc 1 438 3 is_stmt 1 view .LVU556
 438:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2278              		.loc 1 438 43 is_stmt 0 view .LVU557
 2279 0032 1194     		str	r4, [sp, #68]
 439:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 2280              		.loc 1 439 3 is_stmt 1 view .LVU558
 439:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 2281              		.loc 1 439 34 is_stmt 0 view .LVU559
 2282 0034 0E3C     		subs	r4, r4, #14
 2283 0036 1494     		str	r4, [sp, #80]
 440:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 2284              		.loc 1 440 3 is_stmt 1 view .LVU560
 440:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 2285              		.loc 1 440 35 is_stmt 0 view .LVU561
 2286 0038 C022     		movs	r2, #192
 2287 003a 5202     		lsls	r2, r2, #9
 2288 003c 1592     		str	r2, [sp, #84]
 441:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 2289              		.loc 1 441 3 is_stmt 1 view .LVU562
 442:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 2290              		.loc 1 442 3 view .LVU563
 442:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 2291              		.loc 1 442 32 is_stmt 0 view .LVU564
ARM GAS  /tmp/ccL0lKDS.s 			page 62


 2292 003e 1793     		str	r3, [sp, #92]
 443:Src/main.c    **** 
 2293              		.loc 1 443 3 is_stmt 1 view .LVU565
 2294 0040 0BA8     		add	r0, sp, #44
 2295 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2296              	.LVL158:
 445:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 2297              		.loc 1 445 3 view .LVU566
 445:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 2298              		.loc 1 445 31 is_stmt 0 view .LVU567
 2299 0046 0723     		movs	r3, #7
 2300 0048 0793     		str	r3, [sp, #28]
 447:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2301              		.loc 1 447 3 is_stmt 1 view .LVU568
 447:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2302              		.loc 1 447 34 is_stmt 0 view .LVU569
 2303 004a 0894     		str	r4, [sp, #32]
 448:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2304              		.loc 1 448 3 is_stmt 1 view .LVU570
 448:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2305              		.loc 1 448 35 is_stmt 0 view .LVU571
 2306 004c 0024     		movs	r4, #0
 2307 004e 0994     		str	r4, [sp, #36]
 449:Src/main.c    **** 
 2308              		.loc 1 449 3 is_stmt 1 view .LVU572
 449:Src/main.c    **** 
 2309              		.loc 1 449 36 is_stmt 0 view .LVU573
 2310 0050 0A94     		str	r4, [sp, #40]
 451:Src/main.c    **** 
 2311              		.loc 1 451 3 is_stmt 1 view .LVU574
 2312 0052 0121     		movs	r1, #1
 2313 0054 07A8     		add	r0, sp, #28
 2314 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2315              	.LVL159:
 453:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 2316              		.loc 1 453 3 view .LVU575
 453:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 2317              		.loc 1 453 38 is_stmt 0 view .LVU576
 2318 005a 044B     		ldr	r3, .L105
 2319 005c 0093     		str	r3, [sp]
 454:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2320              		.loc 1 454 3 is_stmt 1 view .LVU577
 454:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2321              		.loc 1 454 36 is_stmt 0 view .LVU578
 2322 005e 0494     		str	r4, [sp, #16]
 455:Src/main.c    **** 
 2323              		.loc 1 455 3 is_stmt 1 view .LVU579
 455:Src/main.c    **** 
 2324              		.loc 1 455 35 is_stmt 0 view .LVU580
 2325 0060 0694     		str	r4, [sp, #24]
 457:Src/main.c    **** }
 2326              		.loc 1 457 3 is_stmt 1 view .LVU581
 2327 0062 6846     		mov	r0, sp
 2328 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2329              	.LVL160:
 458:Src/main.c    **** 
 2330              		.loc 1 458 1 is_stmt 0 view .LVU582
ARM GAS  /tmp/ccL0lKDS.s 			page 63


 2331 0068 18B0     		add	sp, sp, #96
 2332              		@ sp needed
 2333 006a 10BD     		pop	{r4, pc}
 2334              	.L106:
 2335              		.align	2
 2336              	.L105:
 2337 006c 20000200 		.word	131104
 2338              		.cfi_endproc
 2339              	.LFE49:
 2341              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2342              		.align	2
 2343              	.LC41:
 2344 0000 25642043 		.ascii	"%d C   \000"
 2344      20202000 
 2345              		.align	2
 2346              	.LC43:
 2347 0008 25642E25 		.ascii	"%d.%d C\000"
 2347      64204300 
 2348              		.align	2
 2349              	.LC45:
 2350 0010 25642E25 		.ascii	"%d.%d V\000"
 2350      64205600 
 2351              		.align	2
 2352              	.LC47:
 2353 0018 25642E25 		.ascii	"%d.%d A\000"
 2353      64204100 
 2354              		.section	.text.main,"ax",%progbits
 2355              		.align	1
 2356              		.global	main
 2357              		.syntax unified
 2358              		.code	16
 2359              		.thumb_func
 2360              		.fpu softvfp
 2362              	main:
 2363              	.LFB37:
 120:Src/main.c    ****   HAL_Init();
 2364              		.loc 1 120 1 is_stmt 1 view -0
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 64
 2367              		@ frame_needed = 0, uses_anonymous_args = 0
 2368 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2369              	.LCFI31:
 2370              		.cfi_def_cfa_offset 20
 2371              		.cfi_offset 4, -20
 2372              		.cfi_offset 5, -16
 2373              		.cfi_offset 6, -12
 2374              		.cfi_offset 7, -8
 2375              		.cfi_offset 14, -4
 2376 0002 D646     		mov	lr, r10
 2377 0004 4F46     		mov	r7, r9
 2378 0006 4646     		mov	r6, r8
 2379 0008 C0B5     		push	{r6, r7, lr}
 2380              	.LCFI32:
 2381              		.cfi_def_cfa_offset 32
 2382              		.cfi_offset 8, -32
 2383              		.cfi_offset 9, -28
 2384              		.cfi_offset 10, -24
ARM GAS  /tmp/ccL0lKDS.s 			page 64


 2385 000a 90B0     		sub	sp, sp, #64
 2386              	.LCFI33:
 2387              		.cfi_def_cfa_offset 96
 121:Src/main.c    **** 
 2388              		.loc 1 121 3 view .LVU584
 2389 000c FFF7FEFF 		bl	HAL_Init
 2390              	.LVL161:
 123:Src/main.c    **** 
 2391              		.loc 1 123 3 view .LVU585
 2392 0010 FFF7FEFF 		bl	SystemClock_Config
 2393              	.LVL162:
 125:Src/main.c    ****   MX_DMA_Init();
 2394              		.loc 1 125 3 view .LVU586
 2395 0014 FFF7FEFF 		bl	MX_GPIO_Init
 2396              	.LVL163:
 126:Src/main.c    ****   MX_ADC_Init();
 2397              		.loc 1 126 3 view .LVU587
 2398 0018 FFF7FEFF 		bl	MX_DMA_Init
 2399              	.LVL164:
 127:Src/main.c    ****   MX_I2C1_Init();
 2400              		.loc 1 127 3 view .LVU588
 2401 001c FFF7FEFF 		bl	MX_ADC_Init
 2402              	.LVL165:
 128:Src/main.c    ****   MX_I2C2_Init();
 2403              		.loc 1 128 3 view .LVU589
 2404 0020 FFF7FEFF 		bl	MX_I2C1_Init
 2405              	.LVL166:
 129:Src/main.c    ****   MX_TIM1_Init();
 2406              		.loc 1 129 3 view .LVU590
 2407 0024 FFF7FEFF 		bl	MX_I2C2_Init
 2408              	.LVL167:
 130:Src/main.c    ****   TIM3_Init();
 2409              		.loc 1 130 3 view .LVU591
 2410 0028 FFF7FEFF 		bl	MX_TIM1_Init
 2411              	.LVL168:
 131:Src/main.c    **** 
 2412              		.loc 1 131 3 view .LVU592
 2413 002c FFF7FEFF 		bl	TIM3_Init
 2414              	.LVL169:
 133:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 2415              		.loc 1 133 3 view .LVU593
 2416 0030 D74C     		ldr	r4, .L136
 2417 0032 0021     		movs	r1, #0
 2418 0034 2000     		movs	r0, r4
 2419 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2420              	.LVL170:
 134:Src/main.c    **** 
 2421              		.loc 1 134 3 view .LVU594
 2422 003a 0C21     		movs	r1, #12
 2423 003c 2000     		movs	r0, r4
 2424 003e FFF7FEFF 		bl	HAL_TIM_OC_Start
 2425              	.LVL171:
 136:Src/main.c    **** 
 2426              		.loc 1 136 3 view .LVU595
 2427 0042 0422     		movs	r2, #4
 2428 0044 D349     		ldr	r1, .L136+4
 2429 0046 D448     		ldr	r0, .L136+8
ARM GAS  /tmp/ccL0lKDS.s 			page 65


 2430 0048 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2431              	.LVL172:
 138:Src/main.c    ****   disp_init();
 2432              		.loc 1 138 3 view .LVU596
 2433 004c 6420     		movs	r0, #100
 2434 004e FFF7FEFF 		bl	HAL_Delay
 2435              	.LVL173:
 139:Src/main.c    ****   HAL_Delay(150);
 2436              		.loc 1 139 3 view .LVU597
 2437 0052 FFF7FEFF 		bl	disp_init
 2438              	.LVL174:
 140:Src/main.c    ****   set_screen();
 2439              		.loc 1 140 3 view .LVU598
 2440 0056 9620     		movs	r0, #150
 2441 0058 FFF7FEFF 		bl	HAL_Delay
 2442              	.LVL175:
 141:Src/main.c    ****   HAL_Delay(150);
 2443              		.loc 1 141 3 view .LVU599
 2444 005c FFF7FEFF 		bl	set_screen
 2445              	.LVL176:
 142:Src/main.c    ****   clear_screen();
 2446              		.loc 1 142 3 view .LVU600
 2447 0060 9620     		movs	r0, #150
 2448 0062 FFF7FEFF 		bl	HAL_Delay
 2449              	.LVL177:
 143:Src/main.c    **** 
 2450              		.loc 1 143 3 view .LVU601
 2451 0066 FFF7FEFF 		bl	clear_screen
 2452              	.LVL178:
 146:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2453              		.loc 1 146 3 view .LVU602
 146:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2454              		.loc 1 146 6 is_stmt 0 view .LVU603
 2455 006a 9020     		movs	r0, #144
 2456 006c 0821     		movs	r1, #8
 2457 006e C005     		lsls	r0, r0, #23
 2458 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2459              	.LVL179:
 146:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2460              		.loc 1 146 5 view .LVU604
 2461 0074 0028     		cmp	r0, #0
 2462 0076 06D0     		beq	.L108
 146:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2463              		.loc 1 146 40 discriminator 1 view .LVU605
 2464 0078 9020     		movs	r0, #144
 2465 007a 1021     		movs	r1, #16
 2466 007c C005     		lsls	r0, r0, #23
 2467 007e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2468              	.LVL180:
 146:Src/main.c    ****     draw_string(dfu_string, 1, 1 ,1);
 2469              		.loc 1 146 37 discriminator 1 view .LVU606
 2470 0082 0028     		cmp	r0, #0
 2471 0084 3FD1     		bne	.L130
 2472              	.L108:
 154:Src/main.c    ****     draw_string(by_string, 10, 9 ,1);
 2473              		.loc 1 154 5 is_stmt 1 view .LVU607
 2474 0086 C54B     		ldr	r3, .L136+12
ARM GAS  /tmp/ccL0lKDS.s 			page 66


 2475 0088 1868     		ldr	r0, [r3]
 2476 008a 0123     		movs	r3, #1
 2477 008c 0122     		movs	r2, #1
 2478 008e 0F21     		movs	r1, #15
 2479 0090 FFF7FEFF 		bl	draw_string
 2480              	.LVL181:
 155:Src/main.c    ****     refresh();
 2481              		.loc 1 155 5 view .LVU608
 2482 0094 C24B     		ldr	r3, .L136+16
 2483 0096 1868     		ldr	r0, [r3]
 2484 0098 0123     		movs	r3, #1
 2485 009a 0922     		movs	r2, #9
 2486 009c 0A21     		movs	r1, #10
 2487 009e FFF7FEFF 		bl	draw_string
 2488              	.LVL182:
 156:Src/main.c    ****     HAL_Delay(1000);
 2489              		.loc 1 156 5 view .LVU609
 2490 00a2 FFF7FEFF 		bl	refresh
 2491              	.LVL183:
 157:Src/main.c    ****     clear_screen();
 2492              		.loc 1 157 5 view .LVU610
 2493 00a6 FA24     		movs	r4, #250
 2494 00a8 A400     		lsls	r4, r4, #2
 2495 00aa 2000     		movs	r0, r4
 2496 00ac FFF7FEFF 		bl	HAL_Delay
 2497              	.LVL184:
 158:Src/main.c    ****     draw_string(assembly_string, 14, 1 ,1);
 2498              		.loc 1 158 5 view .LVU611
 2499 00b0 FFF7FEFF 		bl	clear_screen
 2500              	.LVL185:
 159:Src/main.c    ****     draw_string(jbr_string, 8, 9 ,1);
 2501              		.loc 1 159 5 view .LVU612
 2502 00b4 BB4B     		ldr	r3, .L136+20
 2503 00b6 1868     		ldr	r0, [r3]
 2504 00b8 0123     		movs	r3, #1
 2505 00ba 0122     		movs	r2, #1
 2506 00bc 0E21     		movs	r1, #14
 2507 00be FFF7FEFF 		bl	draw_string
 2508              	.LVL186:
 160:Src/main.c    ****     refresh();
 2509              		.loc 1 160 5 view .LVU613
 2510 00c2 B94B     		ldr	r3, .L136+24
 2511 00c4 1868     		ldr	r0, [r3]
 2512 00c6 0123     		movs	r3, #1
 2513 00c8 0922     		movs	r2, #9
 2514 00ca 0821     		movs	r1, #8
 2515 00cc FFF7FEFF 		bl	draw_string
 2516              	.LVL187:
 161:Src/main.c    **** #ifdef ENABLESERIAL
 2517              		.loc 1 161 5 view .LVU614
 2518 00d0 FFF7FEFF 		bl	refresh
 2519              	.LVL188:
 171:Src/main.c    **** #endif
 2520              		.loc 1 171 7 view .LVU615
 171:Src/main.c    **** #endif
 2521              		.loc 1 171 17 is_stmt 0 view .LVU616
 2522 00d4 B54A     		ldr	r2, .L136+28
ARM GAS  /tmp/ccL0lKDS.s 			page 67


 2523 00d6 2423     		movs	r3, #36
 2524 00d8 1421     		movs	r1, #20
 2525 00da D154     		strb	r1, [r2, r3]
 175:Src/main.c    ****   MX_IWDG_Init();
 2526              		.loc 1 175 3 is_stmt 1 view .LVU617
 2527 00dc 2000     		movs	r0, r4
 2528 00de FFF7FEFF 		bl	HAL_Delay
 2529              	.LVL189:
 176:Src/main.c    **** 
 2530              		.loc 1 176 3 view .LVU618
 2531 00e2 FFF7FEFF 		bl	MX_IWDG_Init
 2532              	.LVL190:
 178:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 2533              		.loc 1 178 3 view .LVU619
 178:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 2534              		.loc 1 178 14 is_stmt 0 view .LVU620
 2535 00e6 B24B     		ldr	r3, .L136+32
 2536 00e8 1888     		ldrh	r0, [r3]
 178:Src/main.c    ****   if (r.target >= 400) r.target = 220;  //initial temp set
 2537              		.loc 1 178 12 view .LVU621
 2538 00ea FFF7FEFF 		bl	__aeabi_ui2f
 2539              	.LVL191:
 2540 00ee B14B     		ldr	r3, .L136+36
 2541 00f0 1860     		str	r0, [r3]
 179:Src/main.c    **** 
 2542              		.loc 1 179 3 is_stmt 1 view .LVU622
 179:Src/main.c    **** 
 2543              		.loc 1 179 6 is_stmt 0 view .LVU623
 2544 00f2 B149     		ldr	r1, .L136+40
 2545 00f4 FFF7FEFF 		bl	__aeabi_fcmpge
 2546              	.LVL192:
 2547 00f8 0028     		cmp	r0, #0
 2548 00fa 00D1     		bne	.LCB2062
 2549 00fc B4E1     		b	.L124	@long jump
 2550              	.LCB2062:
 179:Src/main.c    **** 
 2551              		.loc 1 179 24 is_stmt 1 discriminator 1 view .LVU624
 179:Src/main.c    **** 
 2552              		.loc 1 179 33 is_stmt 0 discriminator 1 view .LVU625
 2553 00fe AD4B     		ldr	r3, .L136+36
 2554 0100 AE4A     		ldr	r2, .L136+44
 2555 0102 1A60     		str	r2, [r3]
 2556 0104 B0E1     		b	.L124
 2557              	.L130:
 147:Src/main.c    ****     draw_string(dfu_string, 1, 8 ,1);
 2558              		.loc 1 147 5 is_stmt 1 view .LVU626
 2559 0106 AE4C     		ldr	r4, .L136+48
 2560 0108 0123     		movs	r3, #1
 2561 010a 1A00     		movs	r2, r3
 2562 010c 1900     		movs	r1, r3
 2563 010e 2068     		ldr	r0, [r4]
 2564 0110 FFF7FEFF 		bl	draw_string
 2565              	.LVL193:
 148:Src/main.c    ****     refresh();
 2566              		.loc 1 148 5 view .LVU627
 2567 0114 0123     		movs	r3, #1
 2568 0116 0822     		movs	r2, #8
ARM GAS  /tmp/ccL0lKDS.s 			page 68


 2569 0118 1900     		movs	r1, r3
 2570 011a 2068     		ldr	r0, [r4]
 2571 011c FFF7FEFF 		bl	draw_string
 2572              	.LVL194:
 149:Src/main.c    ****     HAL_Delay(40);
 2573              		.loc 1 149 5 view .LVU628
 2574 0120 FFF7FEFF 		bl	refresh
 2575              	.LVL195:
 150:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 2576              		.loc 1 150 5 view .LVU629
 2577 0124 2820     		movs	r0, #40
 2578 0126 FFF7FEFF 		bl	HAL_Delay
 2579              	.LVL196:
 151:Src/main.c    ****     NVIC_SystemReset();
 2580              		.loc 1 151 5 view .LVU630
 151:Src/main.c    ****     NVIC_SystemReset();
 2581              		.loc 1 151 36 is_stmt 0 view .LVU631
 2582 012a A64B     		ldr	r3, .L136+52
 2583 012c A64A     		ldr	r2, .L136+56
 2584 012e 1A60     		str	r2, [r3]
 152:Src/main.c    ****   } else {
 2585              		.loc 1 152 5 is_stmt 1 view .LVU632
 2586              	.LBB30:
 2587              	.LBI30:
 2588              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
ARM GAS  /tmp/ccL0lKDS.s 			page 69


  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
ARM GAS  /tmp/ccL0lKDS.s 			page 70


  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
ARM GAS  /tmp/ccL0lKDS.s 			page 71


 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
ARM GAS  /tmp/ccL0lKDS.s 			page 72


 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
ARM GAS  /tmp/ccL0lKDS.s 			page 73


 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccL0lKDS.s 			page 74


 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
ARM GAS  /tmp/ccL0lKDS.s 			page 75


 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
ARM GAS  /tmp/ccL0lKDS.s 			page 76


 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
ARM GAS  /tmp/ccL0lKDS.s 			page 77


 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
ARM GAS  /tmp/ccL0lKDS.s 			page 78


 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
ARM GAS  /tmp/ccL0lKDS.s 			page 79


 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccL0lKDS.s 			page 80


 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /tmp/ccL0lKDS.s 			page 81


 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 2589              		.loc 2 730 22 view .LVU633
 2590              	.LBB31:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 2591              		.loc 2 732 3 view .LVU634
 2592              	.LBB32:
 2593              	.LBI32:
 2594              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
ARM GAS  /tmp/ccL0lKDS.s 			page 82


  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  /tmp/ccL0lKDS.s 			page 83


  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccL0lKDS.s 			page 84


 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccL0lKDS.s 			page 85


 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccL0lKDS.s 			page 86


 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
ARM GAS  /tmp/ccL0lKDS.s 			page 87


 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccL0lKDS.s 			page 88


 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 2595              		.loc 3 427 53 view .LVU635
 2596              	.LBB33:
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2597              		.loc 3 429 3 view .LVU636
 2598              		.syntax divided
 2599              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccL0lKDS.s 			page 89


 2600 0130 BFF34F8F 		dsb 0xF
 2601              	@ 0 "" 2
 2602              		.thumb
 2603              		.syntax unified
 2604              	.LBE33:
 2605              	.LBE32:
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 2606              		.loc 2 734 3 view .LVU637
 2607              		.loc 2 734 15 is_stmt 0 view .LVU638
 2608 0134 A54B     		ldr	r3, .L136+60
 2609 0136 A64A     		ldr	r2, .L136+64
 2610 0138 DA60     		str	r2, [r3, #12]
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 2611              		.loc 2 736 3 is_stmt 1 view .LVU639
 2612              	.LBB34:
 2613              	.LBI34:
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2614              		.loc 3 427 53 view .LVU640
 2615              	.LBB35:
 2616              		.loc 3 429 3 view .LVU641
 2617              		.syntax divided
 2618              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2619 013a BFF34F8F 		dsb 0xF
 2620              	@ 0 "" 2
 2621              		.thumb
 2622              		.syntax unified
 2623              	.L109:
 2624              	.LBE35:
 2625              	.LBE34:
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 2626              		.loc 2 738 3 view .LVU642
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 2627              		.loc 2 740 5 view .LVU643
 2628              	.LBB36:
 2629              	.LBI36:
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2630              		.loc 3 373 53 view .LVU644
 2631              	.LBB37:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2632              		.loc 3 375 3 view .LVU645
 2633              		.syntax divided
 2634              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2635 013e C046     		nop
 2636              	@ 0 "" 2
 2637              		.thumb
 2638              		.syntax unified
 2639 0140 FDE7     		b	.L109
 2640              	.L134:
 2641              	.LBE37:
 2642              	.LBE36:
 2643              	.LBE31:
 2644              	.LBE30:
 2645              	.LBB38:
ARM GAS  /tmp/ccL0lKDS.s 			page 90


 190:Src/main.c    ****       s.writeFlash = 1;
 2646              		.loc 1 190 7 view .LVU646
 190:Src/main.c    ****       s.writeFlash = 1;
 2647              		.loc 1 190 16 is_stmt 0 view .LVU647
 2648 0142 9C4C     		ldr	r4, .L136+36
 2649 0144 A349     		ldr	r1, .L136+68
 2650 0146 2068     		ldr	r0, [r4]
 2651 0148 FFF7FEFF 		bl	__aeabi_fsub
 2652              	.LVL197:
 2653 014c 2060     		str	r0, [r4]
 191:Src/main.c    ****       HAL_Delay(40);
 2654              		.loc 1 191 7 is_stmt 1 view .LVU648
 191:Src/main.c    ****       HAL_Delay(40);
 2655              		.loc 1 191 20 is_stmt 0 view .LVU649
 2656 014e 974B     		ldr	r3, .L136+28
 2657 0150 0122     		movs	r2, #1
 2658 0152 1A77     		strb	r2, [r3, #28]
 192:Src/main.c    ****     }
 2659              		.loc 1 192 7 is_stmt 1 view .LVU650
 2660 0154 2820     		movs	r0, #40
 2661 0156 FFF7FEFF 		bl	HAL_Delay
 2662              	.LVL198:
 2663 015a A0E1     		b	.L112
 2664              	.L135:
 196:Src/main.c    ****       s.writeFlash = 1;
 2665              		.loc 1 196 7 view .LVU651
 196:Src/main.c    ****       s.writeFlash = 1;
 2666              		.loc 1 196 16 is_stmt 0 view .LVU652
 2667 015c 954C     		ldr	r4, .L136+36
 2668 015e 9D49     		ldr	r1, .L136+68
 2669 0160 2068     		ldr	r0, [r4]
 2670 0162 FFF7FEFF 		bl	__aeabi_fadd
 2671              	.LVL199:
 2672 0166 2060     		str	r0, [r4]
 197:Src/main.c    ****       HAL_Delay(40);
 2673              		.loc 1 197 7 is_stmt 1 view .LVU653
 197:Src/main.c    ****       HAL_Delay(40);
 2674              		.loc 1 197 20 is_stmt 0 view .LVU654
 2675 0168 904B     		ldr	r3, .L136+28
 2676 016a 0122     		movs	r2, #1
 2677 016c 1A77     		strb	r2, [r3, #28]
 198:Src/main.c    ****     }
 2678              		.loc 1 198 7 is_stmt 1 view .LVU655
 2679 016e 2820     		movs	r0, #40
 2680 0170 FFF7FEFF 		bl	HAL_Delay
 2681              	.LVL200:
 2682 0174 98E1     		b	.L113
 2683              	.L125:
 201:Src/main.c    **** 
 2684              		.loc 1 201 16 is_stmt 0 view .LVU656
 2685 0176 904C     		ldr	r4, .L136+40
 2686              	.L114:
 201:Src/main.c    **** 
 2687              		.loc 1 201 14 discriminator 8 view .LVU657
 2688 0178 8E4B     		ldr	r3, .L136+36
 2689 017a 1C60     		str	r4, [r3]
 203:Src/main.c    ****       HAL_FLASH_Unlock();
ARM GAS  /tmp/ccL0lKDS.s 			page 91


 2690              		.loc 1 203 5 is_stmt 1 discriminator 8 view .LVU658
 203:Src/main.c    ****       HAL_FLASH_Unlock();
 2691              		.loc 1 203 9 is_stmt 0 discriminator 8 view .LVU659
 2692 017c 8B4B     		ldr	r3, .L136+28
 2693 017e 1B7F     		ldrb	r3, [r3, #28]
 203:Src/main.c    ****       HAL_FLASH_Unlock();
 2694              		.loc 1 203 7 discriminator 8 view .LVU660
 2695 0180 012B     		cmp	r3, #1
 2696 0182 00D1     		bne	.LCB2180
 2697 0184 C9E0     		b	.L131	@long jump
 2698              	.LCB2180:
 2699              	.L116:
 227:Src/main.c    ****     unsigned char str2[14] = "          ";
 2700              		.loc 1 227 5 is_stmt 1 view .LVU661
 227:Src/main.c    ****     unsigned char str2[14] = "          ";
 2701              		.loc 1 227 19 is_stmt 0 view .LVU662
 2702 0186 E846     		mov	r8, sp
 2703 0188 934C     		ldr	r4, .L136+72
 2704 018a 4346     		mov	r3, r8
 2705 018c 2500     		movs	r5, r4
 2706 018e 06CD     		ldmia	r5!, {r1, r2}
 2707 0190 06C3     		stmia	r3!, {r1, r2}
 2708 0192 2A88     		ldrh	r2, [r5]
 2709 0194 1A80     		strh	r2, [r3]
 2710 0196 AA78     		ldrb	r2, [r5, #2]
 2711 0198 9A70     		strb	r2, [r3, #2]
 2712 019a 0322     		movs	r2, #3
 2713 019c 0021     		movs	r1, #0
 2714 019e 0B20     		movs	r0, #11
 2715 01a0 6844     		add	r0, r0, sp
 2716 01a2 FFF7FEFF 		bl	memset
 2717              	.LVL201:
 228:Src/main.c    ****     unsigned char str3[14] = "          ";
 2718              		.loc 1 228 5 is_stmt 1 view .LVU663
 228:Src/main.c    ****     unsigned char str3[14] = "          ";
 2719              		.loc 1 228 19 is_stmt 0 view .LVU664
 2720 01a6 04AF     		add	r7, sp, #16
 2721 01a8 3B00     		movs	r3, r7
 2722 01aa 2200     		movs	r2, r4
 2723 01ac 03CA     		ldmia	r2!, {r0, r1}
 2724 01ae 03C3     		stmia	r3!, {r0, r1}
 2725 01b0 2A88     		ldrh	r2, [r5]
 2726 01b2 1A80     		strh	r2, [r3]
 2727 01b4 AA78     		ldrb	r2, [r5, #2]
 2728 01b6 9A70     		strb	r2, [r3, #2]
 2729 01b8 0322     		movs	r2, #3
 2730 01ba 0021     		movs	r1, #0
 2731 01bc 1B20     		movs	r0, #27
 2732 01be 6844     		add	r0, r0, sp
 2733 01c0 FFF7FEFF 		bl	memset
 2734              	.LVL202:
 229:Src/main.c    ****     unsigned char str4[14] = "          ";
 2735              		.loc 1 229 5 is_stmt 1 view .LVU665
 229:Src/main.c    ****     unsigned char str4[14] = "          ";
 2736              		.loc 1 229 19 is_stmt 0 view .LVU666
 2737 01c4 08AE     		add	r6, sp, #32
 2738 01c6 3300     		movs	r3, r6
ARM GAS  /tmp/ccL0lKDS.s 			page 92


 2739 01c8 2200     		movs	r2, r4
 2740 01ca 03CA     		ldmia	r2!, {r0, r1}
 2741 01cc 03C3     		stmia	r3!, {r0, r1}
 2742 01ce 2A88     		ldrh	r2, [r5]
 2743 01d0 1A80     		strh	r2, [r3]
 2744 01d2 AA78     		ldrb	r2, [r5, #2]
 2745 01d4 9A70     		strb	r2, [r3, #2]
 2746 01d6 0322     		movs	r2, #3
 2747 01d8 0021     		movs	r1, #0
 2748 01da 2B20     		movs	r0, #43
 2749 01dc 6844     		add	r0, r0, sp
 2750 01de FFF7FEFF 		bl	memset
 2751              	.LVL203:
 230:Src/main.c    ****     sprintf((char * restrict) str1, "%d C   ", (uint16_t)r.target);
 2752              		.loc 1 230 5 is_stmt 1 view .LVU667
 230:Src/main.c    ****     sprintf((char * restrict) str1, "%d C   ", (uint16_t)r.target);
 2753              		.loc 1 230 19 is_stmt 0 view .LVU668
 2754 01e2 0CAB     		add	r3, sp, #48
 2755 01e4 9946     		mov	r9, r3
 2756 01e6 06CC     		ldmia	r4!, {r1, r2}
 2757 01e8 06C3     		stmia	r3!, {r1, r2}
 2758 01ea 2A88     		ldrh	r2, [r5]
 2759 01ec 1A80     		strh	r2, [r3]
 2760 01ee AA78     		ldrb	r2, [r5, #2]
 2761 01f0 9A70     		strb	r2, [r3, #2]
 2762 01f2 0322     		movs	r2, #3
 2763 01f4 0021     		movs	r1, #0
 2764 01f6 3B20     		movs	r0, #59
 2765 01f8 6844     		add	r0, r0, sp
 2766 01fa FFF7FEFF 		bl	memset
 2767              	.LVL204:
 231:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2768              		.loc 1 231 5 is_stmt 1 view .LVU669
 231:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2769              		.loc 1 231 59 is_stmt 0 view .LVU670
 2770 01fe 6D4B     		ldr	r3, .L136+36
 2771 0200 1868     		ldr	r0, [r3]
 231:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2772              		.loc 1 231 48 view .LVU671
 2773 0202 FFF7FEFF 		bl	__aeabi_f2uiz
 2774              	.LVL205:
 2775 0206 82B2     		uxth	r2, r0
 231:Src/main.c    ****     sprintf((char * restrict) str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)
 2776              		.loc 1 231 5 view .LVU672
 2777 0208 7449     		ldr	r1, .L136+76
 2778 020a 4046     		mov	r0, r8
 2779 020c FFF7FEFF 		bl	sprintf
 2780              	.LVL206:
 232:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2781              		.loc 1 232 5 is_stmt 1 view .LVU673
 232:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2782              		.loc 1 232 59 is_stmt 0 view .LVU674
 2783 0210 664C     		ldr	r4, .L136+28
 2784 0212 6368     		ldr	r3, [r4, #4]
 2785 0214 9A46     		mov	r10, r3
 232:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2786              		.loc 1 232 48 view .LVU675
ARM GAS  /tmp/ccL0lKDS.s 			page 93


 2787 0216 181C     		adds	r0, r3, #0
 2788 0218 FFF7FEFF 		bl	__aeabi_f2uiz
 2789              	.LVL207:
 2790 021c 85B2     		uxth	r5, r0
 232:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2791              		.loc 1 232 89 view .LVU676
 2792 021e 2800     		movs	r0, r5
 2793 0220 FFF7FEFF 		bl	__aeabi_i2f
 2794              	.LVL208:
 2795 0224 011C     		adds	r1, r0, #0
 2796 0226 5046     		mov	r0, r10
 2797 0228 FFF7FEFF 		bl	__aeabi_fsub
 2798              	.LVL209:
 232:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2799              		.loc 1 232 110 view .LVU677
 2800 022c 6C49     		ldr	r1, .L136+80
 2801 022e FFF7FEFF 		bl	__aeabi_fmul
 2802              	.LVL210:
 232:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2803              		.loc 1 232 68 view .LVU678
 2804 0232 FFF7FEFF 		bl	__aeabi_f2uiz
 2805              	.LVL211:
 2806 0236 83B2     		uxth	r3, r0
 232:Src/main.c    ****     sprintf((char * restrict) str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*1
 2807              		.loc 1 232 5 view .LVU679
 2808 0238 2A00     		movs	r2, r5
 2809 023a 6A49     		ldr	r1, .L136+84
 2810 023c 3800     		movs	r0, r7
 2811 023e FFF7FEFF 		bl	sprintf
 2812              	.LVL212:
 233:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2813              		.loc 1 233 5 is_stmt 1 view .LVU680
 233:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2814              		.loc 1 233 59 is_stmt 0 view .LVU681
 2815 0242 A368     		ldr	r3, [r4, #8]
 2816 0244 9A46     		mov	r10, r3
 233:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2817              		.loc 1 233 48 view .LVU682
 2818 0246 181C     		adds	r0, r3, #0
 2819 0248 FFF7FEFF 		bl	__aeabi_f2uiz
 2820              	.LVL213:
 2821 024c 85B2     		uxth	r5, r0
 233:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2822              		.loc 1 233 81 view .LVU683
 2823 024e 2800     		movs	r0, r5
 2824 0250 FFF7FEFF 		bl	__aeabi_i2f
 2825              	.LVL214:
 2826 0254 011C     		adds	r1, r0, #0
 2827 0256 5046     		mov	r0, r10
 2828 0258 FFF7FEFF 		bl	__aeabi_fsub
 2829              	.LVL215:
 233:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2830              		.loc 1 233 98 view .LVU684
 2831 025c 6049     		ldr	r1, .L136+80
 2832 025e FFF7FEFF 		bl	__aeabi_fmul
 2833              	.LVL216:
 233:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
ARM GAS  /tmp/ccL0lKDS.s 			page 94


 2834              		.loc 1 233 64 view .LVU685
 2835 0262 FFF7FEFF 		bl	__aeabi_f2uiz
 2836              	.LVL217:
 2837 0266 83B2     		uxth	r3, r0
 233:Src/main.c    ****     sprintf((char * restrict) str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.
 2838              		.loc 1 233 5 view .LVU686
 2839 0268 2A00     		movs	r2, r5
 2840 026a 5F49     		ldr	r1, .L136+88
 2841 026c 3000     		movs	r0, r6
 2842 026e FFF7FEFF 		bl	sprintf
 2843              	.LVL218:
 234:Src/main.c    **** 
 2844              		.loc 1 234 5 is_stmt 1 view .LVU687
 234:Src/main.c    **** 
 2845              		.loc 1 234 59 is_stmt 0 view .LVU688
 2846 0272 2369     		ldr	r3, [r4, #16]
 2847 0274 9A46     		mov	r10, r3
 234:Src/main.c    **** 
 2848              		.loc 1 234 48 view .LVU689
 2849 0276 181C     		adds	r0, r3, #0
 2850 0278 FFF7FEFF 		bl	__aeabi_f2uiz
 2851              	.LVL219:
 2852 027c 85B2     		uxth	r5, r0
 234:Src/main.c    **** 
 2853              		.loc 1 234 87 view .LVU690
 2854 027e 2800     		movs	r0, r5
 2855 0280 FFF7FEFF 		bl	__aeabi_i2f
 2856              	.LVL220:
 2857 0284 011C     		adds	r1, r0, #0
 2858 0286 5046     		mov	r0, r10
 2859 0288 FFF7FEFF 		bl	__aeabi_fsub
 2860              	.LVL221:
 234:Src/main.c    **** 
 2861              		.loc 1 234 107 view .LVU691
 2862 028c 5449     		ldr	r1, .L136+80
 2863 028e FFF7FEFF 		bl	__aeabi_fmul
 2864              	.LVL222:
 234:Src/main.c    **** 
 2865              		.loc 1 234 67 view .LVU692
 2866 0292 FFF7FEFF 		bl	__aeabi_f2uiz
 2867              	.LVL223:
 2868 0296 83B2     		uxth	r3, r0
 234:Src/main.c    **** 
 2869              		.loc 1 234 5 view .LVU693
 2870 0298 2A00     		movs	r2, r5
 2871 029a 5449     		ldr	r1, .L136+92
 2872 029c 4846     		mov	r0, r9
 2873 029e FFF7FEFF 		bl	sprintf
 2874              	.LVL224:
 236:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 2875              		.loc 1 236 5 is_stmt 1 view .LVU694
 2876 02a2 FFF7FEFF 		bl	clear_screen
 2877              	.LVL225:
 237:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 2878              		.loc 1 237 5 view .LVU695
 2879 02a6 0123     		movs	r3, #1
 2880 02a8 0122     		movs	r2, #1
ARM GAS  /tmp/ccL0lKDS.s 			page 95


 2881 02aa 0A21     		movs	r1, #10
 2882 02ac 4046     		mov	r0, r8
 2883 02ae FFF7FEFF 		bl	draw_string
 2884              	.LVL226:
 238:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 2885              		.loc 1 238 5 view .LVU696
 2886 02b2 0123     		movs	r3, #1
 2887 02b4 0922     		movs	r2, #9
 2888 02b6 0A21     		movs	r1, #10
 2889 02b8 3800     		movs	r0, r7
 2890 02ba FFF7FEFF 		bl	draw_string
 2891              	.LVL227:
 239:Src/main.c    **** #ifdef DISPLAYCURRENT
 2892              		.loc 1 239 5 view .LVU697
 2893 02be 0123     		movs	r3, #1
 2894 02c0 0122     		movs	r2, #1
 2895 02c2 3C21     		movs	r1, #60
 2896 02c4 3000     		movs	r0, r6
 2897 02c6 FFF7FEFF 		bl	draw_string
 2898              	.LVL228:
 241:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 2899              		.loc 1 241 5 view .LVU698
 241:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 2900              		.loc 1 241 9 is_stmt 0 view .LVU699
 2901 02ca 2423     		movs	r3, #36
 2902 02cc E35C     		ldrb	r3, [r4, r3]
 241:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 2903              		.loc 1 241 7 view .LVU700
 2904 02ce 002B     		cmp	r3, #0
 2905 02d0 56D0     		beq	.L132
 244:Src/main.c    ****     }
 2906              		.loc 1 244 7 is_stmt 1 view .LVU701
 244:Src/main.c    ****     }
 2907              		.loc 1 244 16 is_stmt 0 view .LVU702
 2908 02d2 013B     		subs	r3, r3, #1
 2909 02d4 3549     		ldr	r1, .L136+28
 2910 02d6 2422     		movs	r2, #36
 2911 02d8 8B54     		strb	r3, [r1, r2]
 2912              	.L120:
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2913              		.loc 1 247 5 is_stmt 1 view .LVU703
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2914              		.loc 1 247 23 is_stmt 0 view .LVU704
 2915 02da 344B     		ldr	r3, .L136+28
 2916 02dc 186A     		ldr	r0, [r3, #32]
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2917              		.loc 1 247 36 view .LVU705
 2918 02de 4449     		ldr	r1, .L136+96
 2919 02e0 FFF7FEFF 		bl	__aeabi_fmul
 2920              	.LVL229:
 2921 02e4 FFF7FEFF 		bl	__aeabi_f2d
 2922              	.LVL230:
 2923 02e8 0600     		movs	r6, r0
 2924 02ea 0F00     		movs	r7, r1
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2925              		.loc 1 247 58 view .LVU706
 2926 02ec 314B     		ldr	r3, .L136+36
ARM GAS  /tmp/ccL0lKDS.s 			page 96


 2927 02ee 5868     		ldr	r0, [r3, #4]
 2928 02f0 4049     		ldr	r1, .L136+100
 2929 02f2 FFF7FEFF 		bl	__aeabi_fmul
 2930              	.LVL231:
 2931 02f6 041C     		adds	r4, r0, #0
 2932 02f8 3F49     		ldr	r1, .L136+104
 2933 02fa FFF7FEFF 		bl	__aeabi_fcmpgt
 2934              	.LVL232:
 2935 02fe 0028     		cmp	r0, #0
 2936 0300 00D0     		beq	.LCB2360
 2937 0302 7DE0     		b	.L126	@long jump
 2938              	.LCB2360:
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2939              		.loc 1 247 58 discriminator 2 view .LVU707
 2940 0304 0021     		movs	r1, #0
 2941 0306 201C     		adds	r0, r4, #0
 2942 0308 FFF7FEFF 		bl	__aeabi_fcmplt
 2943              	.LVL233:
 2944 030c 0028     		cmp	r0, #0
 2945 030e 00D0     		beq	.LCB2366
 2946 0310 DCE0     		b	.L127	@long jump
 2947              	.LCB2366:
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2948              		.loc 1 247 58 discriminator 5 view .LVU708
 2949 0312 201C     		adds	r0, r4, #0
 2950 0314 FFF7FEFF 		bl	__aeabi_f2d
 2951              	.LVL234:
 2952 0318 74E0     		b	.L121
 2953              	.L131:
 204:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 2954              		.loc 1 204 7 is_stmt 1 view .LVU709
 2955 031a FFF7FEFF 		bl	HAL_FLASH_Unlock
 2956              	.LVL235:
 205:Src/main.c    ****       FLASH->AR = 0x0800e400;
 2957              		.loc 1 205 7 view .LVU710
 205:Src/main.c    ****       FLASH->AR = 0x0800e400;
 2958              		.loc 1 205 17 is_stmt 0 view .LVU711
 2959 031e 374B     		ldr	r3, .L136+108
 2960 0320 1A69     		ldr	r2, [r3, #16]
 2961 0322 0221     		movs	r1, #2
 2962 0324 0A43     		orrs	r2, r1
 2963 0326 1A61     		str	r2, [r3, #16]
 206:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 2964              		.loc 1 206 7 is_stmt 1 view .LVU712
 206:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 2965              		.loc 1 206 17 is_stmt 0 view .LVU713
 2966 0328 214A     		ldr	r2, .L136+32
 2967 032a 5A61     		str	r2, [r3, #20]
 207:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 2968              		.loc 1 207 7 is_stmt 1 view .LVU714
 207:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 2969              		.loc 1 207 17 is_stmt 0 view .LVU715
 2970 032c 1A69     		ldr	r2, [r3, #16]
 2971 032e 3E31     		adds	r1, r1, #62
 2972 0330 0A43     		orrs	r2, r1
 2973 0332 1A61     		str	r2, [r3, #16]
 208:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
ARM GAS  /tmp/ccL0lKDS.s 			page 97


 2974              		.loc 1 208 7 is_stmt 1 view .LVU716
 2975              	.L117:
 208:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 2976              		.loc 1 208 47 discriminator 1 view .LVU717
 208:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 2977              		.loc 1 208 13 discriminator 1 view .LVU718
 208:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 2978              		.loc 1 208 20 is_stmt 0 discriminator 1 view .LVU719
 2979 0334 314B     		ldr	r3, .L136+108
 2980 0336 DB68     		ldr	r3, [r3, #12]
 208:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 2981              		.loc 1 208 13 discriminator 1 view .LVU720
 2982 0338 DB07     		lsls	r3, r3, #31
 2983 033a FBD4     		bmi	.L117
 209:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 2984              		.loc 1 209 7 is_stmt 1 view .LVU721
 209:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 2985              		.loc 1 209 17 is_stmt 0 view .LVU722
 2986 033c 2F4B     		ldr	r3, .L136+108
 2987 033e DB68     		ldr	r3, [r3, #12]
 209:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 2988              		.loc 1 209 10 view .LVU723
 2989 0340 9B06     		lsls	r3, r3, #26
 2990 0342 04D4     		bmi	.L133
 2991              	.L118:
 217:Src/main.c    ****       #endif
 2992              		.loc 1 217 13 is_stmt 1 view .LVU724
 217:Src/main.c    ****       #endif
 2993              		.loc 1 217 23 is_stmt 0 view .LVU725
 2994 0344 194A     		ldr	r2, .L136+28
 2995 0346 2423     		movs	r3, #36
 2996 0348 0C21     		movs	r1, #12
 2997 034a D154     		strb	r1, [r2, r3]
 2998 034c 1BE7     		b	.L116
 2999              	.L133:
 210:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 3000              		.loc 1 210 9 is_stmt 1 view .LVU726
 210:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 3001              		.loc 1 210 19 is_stmt 0 view .LVU727
 3002 034e 2B4B     		ldr	r3, .L136+108
 3003 0350 DA68     		ldr	r2, [r3, #12]
 3004 0352 2021     		movs	r1, #32
 3005 0354 0A43     		orrs	r2, r1
 3006 0356 DA60     		str	r2, [r3, #12]
 211:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 3007              		.loc 1 211 9 is_stmt 1 view .LVU728
 211:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 3008              		.loc 1 211 19 is_stmt 0 view .LVU729
 3009 0358 1A69     		ldr	r2, [r3, #16]
 3010 035a 1E39     		subs	r1, r1, #30
 3011 035c 8A43     		bics	r2, r1
 3012 035e 1A61     		str	r2, [r3, #16]
 212:Src/main.c    ****         HAL_FLASH_Lock();
 3013              		.loc 1 212 9 is_stmt 1 view .LVU730
 212:Src/main.c    ****         HAL_FLASH_Lock();
 3014              		.loc 1 212 78 is_stmt 0 view .LVU731
 3015 0360 144B     		ldr	r3, .L136+36
ARM GAS  /tmp/ccL0lKDS.s 			page 98


 3016 0362 1868     		ldr	r0, [r3]
 212:Src/main.c    ****         HAL_FLASH_Lock();
 3017              		.loc 1 212 67 view .LVU732
 3018 0364 FFF7FEFF 		bl	__aeabi_f2uiz
 3019              	.LVL236:
 3020 0368 82B2     		uxth	r2, r0
 212:Src/main.c    ****         HAL_FLASH_Lock();
 3021              		.loc 1 212 9 view .LVU733
 3022 036a 0023     		movs	r3, #0
 3023 036c 1049     		ldr	r1, .L136+32
 3024 036e 0120     		movs	r0, #1
 3025 0370 FFF7FEFF 		bl	HAL_FLASH_Program
 3026              	.LVL237:
 213:Src/main.c    ****         s.writeFlash = 0;
 3027              		.loc 1 213 9 is_stmt 1 view .LVU734
 3028 0374 FFF7FEFF 		bl	HAL_FLASH_Lock
 3029              	.LVL238:
 214:Src/main.c    ****       }
 3030              		.loc 1 214 9 view .LVU735
 214:Src/main.c    ****       }
 3031              		.loc 1 214 22 is_stmt 0 view .LVU736
 3032 0378 0022     		movs	r2, #0
 3033 037a 0C4B     		ldr	r3, .L136+28
 3034 037c 1A77     		strb	r2, [r3, #28]
 3035 037e E1E7     		b	.L118
 3036              	.L132:
 242:Src/main.c    ****     } else {
 3037              		.loc 1 242 7 is_stmt 1 view .LVU737
 3038 0380 0133     		adds	r3, r3, #1
 3039 0382 0122     		movs	r2, #1
 3040 0384 0A21     		movs	r1, #10
 3041 0386 4846     		mov	r0, r9
 3042 0388 FFF7FEFF 		bl	draw_string
 3043              	.LVL239:
 3044 038c A5E7     		b	.L120
 3045              	.L137:
 3046 038e C046     		.align	2
 3047              	.L136:
 3048 0390 00000000 		.word	.LANCHOR4
 3049 0394 00000000 		.word	.LANCHOR6
 3050 0398 00000000 		.word	.LANCHOR0
 3051 039c 00000000 		.word	.LANCHOR15
 3052 03a0 00000000 		.word	.LANCHOR16
 3053 03a4 00000000 		.word	.LANCHOR17
 3054 03a8 00000000 		.word	.LANCHOR18
 3055 03ac 00000000 		.word	.LANCHOR7
 3056 03b0 00E40008 		.word	134276096
 3057 03b4 00000000 		.word	.LANCHOR9
 3058 03b8 0000C843 		.word	1137180672
 3059 03bc 00005C43 		.word	1130102784
 3060 03c0 00000000 		.word	.LANCHOR14
 3061 03c4 F03F0020 		.word	536887280
 3062 03c8 EFBEADDE 		.word	-559038737
 3063 03cc 00ED00E0 		.word	-536810240
 3064 03d0 0400FA05 		.word	100270084
 3065 03d4 0000A040 		.word	1084227584
 3066 03d8 00000000 		.word	.LANCHOR19
ARM GAS  /tmp/ccL0lKDS.s 			page 99


 3067 03dc 00000000 		.word	.LC41
 3068 03e0 00002041 		.word	1092616192
 3069 03e4 08000000 		.word	.LC43
 3070 03e8 10000000 		.word	.LC45
 3071 03ec 18000000 		.word	.LC47
 3072 03f0 6666663F 		.word	1063675494
 3073 03f4 00004040 		.word	1077936128
 3074 03f8 0000F041 		.word	1106247680
 3075 03fc 00200240 		.word	1073881088
 3076              	.L126:
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 3077              		.loc 1 247 58 is_stmt 0 view .LVU738
 3078 0400 0020     		movs	r0, #0
 3079 0402 3949     		ldr	r1, .L138
 3080              	.L121:
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 3081              		.loc 1 247 82 discriminator 8 view .LVU739
 3082 0404 0022     		movs	r2, #0
 3083 0406 394B     		ldr	r3, .L138+4
 3084 0408 FFF7FEFF 		bl	__aeabi_dmul
 3085              	.LVL240:
 3086 040c 0200     		movs	r2, r0
 3087 040e 0B00     		movs	r3, r1
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 3088              		.loc 1 247 55 discriminator 8 view .LVU740
 3089 0410 3000     		movs	r0, r6
 3090 0412 3900     		movs	r1, r7
 3091 0414 FFF7FEFF 		bl	__aeabi_dadd
 3092              	.LVL241:
 3093 0418 FFF7FEFF 		bl	__aeabi_d2f
 3094              	.LVL242:
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 3095              		.loc 1 247 19 discriminator 8 view .LVU741
 3096 041c 344C     		ldr	r4, .L138+8
 3097 041e 2062     		str	r0, [r4, #32]
 248:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3098              		.loc 1 248 5 is_stmt 1 discriminator 8 view .LVU742
 248:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3099              		.loc 1 248 26 is_stmt 0 discriminator 8 view .LVU743
 3100 0420 3449     		ldr	r1, .L138+12
 3101 0422 2069     		ldr	r0, [r4, #16]
 3102 0424 FFF7FEFF 		bl	__aeabi_fmul
 3103              	.LVL243:
 3104 0428 FFF7FEFF 		bl	__aeabi_f2d
 3105              	.LVL244:
 3106 042c 0600     		movs	r6, r0
 3107 042e 0F00     		movs	r7, r1
 248:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3108              		.loc 1 248 49 discriminator 8 view .LVU744
 3109 0430 E068     		ldr	r0, [r4, #12]
 3110 0432 FFF7FEFF 		bl	__aeabi_f2d
 3111              	.LVL245:
 248:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3112              		.loc 1 248 53 discriminator 8 view .LVU745
 3113 0436 0022     		movs	r2, #0
 3114 0438 2C4B     		ldr	r3, .L138+4
 3115 043a FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccL0lKDS.s 			page 100


 3116              	.LVL246:
 3117 043e 0200     		movs	r2, r0
 3118 0440 0B00     		movs	r3, r1
 248:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3119              		.loc 1 248 45 discriminator 8 view .LVU746
 3120 0442 3000     		movs	r0, r6
 3121 0444 3900     		movs	r1, r7
 3122 0446 FFF7FEFF 		bl	__aeabi_dadd
 3123              	.LVL247:
 3124 044a FFF7FEFF 		bl	__aeabi_d2f
 3125              	.LVL248:
 248:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 3126              		.loc 1 248 14 discriminator 8 view .LVU747
 3127 044e 2061     		str	r0, [r4, #16]
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3128              		.loc 1 249 5 is_stmt 1 discriminator 8 view .LVU748
 3129              	.LBB39:
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3130              		.loc 1 249 9 discriminator 8 view .LVU749
 3131              	.LVL249:
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3132              		.loc 1 249 18 is_stmt 0 discriminator 8 view .LVU750
 3133 0450 0024     		movs	r4, #0
 3134              	.LVL250:
 3135              	.L122:
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3136              		.loc 1 249 25 is_stmt 1 discriminator 1 view .LVU751
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3137              		.loc 1 249 36 is_stmt 0 discriminator 1 view .LVU752
 3138 0452 274B     		ldr	r3, .L138+8
 3139 0454 186A     		ldr	r0, [r3, #32]
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3140              		.loc 1 249 30 discriminator 1 view .LVU753
 3141 0456 FFF7FEFF 		bl	__aeabi_f2iz
 3142              	.LVL251:
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3143              		.loc 1 249 5 discriminator 1 view .LVU754
 3144 045a 8442     		cmp	r4, r0
 3145 045c 39DD     		ble	.L123
 3146              	.LBE39:
 253:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 3147              		.loc 1 253 5 is_stmt 1 view .LVU755
 3148 045e FFF7FEFF 		bl	refresh
 3149              	.LVL252:
 254:Src/main.c    ****   }
 3150              		.loc 1 254 5 view .LVU756
 3151 0462 2548     		ldr	r0, .L138+16
 3152 0464 FFF7FEFF 		bl	HAL_IWDG_Refresh
 3153              	.LVL253:
 3154              	.LBE38:
 181:Src/main.c    ****   {
 3155              		.loc 1 181 9 view .LVU757
 3156              	.L124:
 181:Src/main.c    ****   {
 3157              		.loc 1 181 3 view .LVU758
 3158              	.LBB41:
 183:Src/main.c    **** 
ARM GAS  /tmp/ccL0lKDS.s 			page 101


 3159              		.loc 1 183 5 view .LVU759
 3160 0468 3220     		movs	r0, #50
 3161 046a FFF7FEFF 		bl	HAL_Delay
 3162              	.LVL254:
 186:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 3163              		.loc 1 186 5 view .LVU760
 186:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 3164              		.loc 1 186 19 is_stmt 0 view .LVU761
 3165 046e 9024     		movs	r4, #144
 3166 0470 E405     		lsls	r4, r4, #23
 3167 0472 0821     		movs	r1, #8
 3168 0474 2000     		movs	r0, r4
 3169 0476 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3170              	.LVL255:
 186:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 3171              		.loc 1 186 17 view .LVU762
 3172 047a 1D4D     		ldr	r5, .L138+8
 3173 047c A877     		strb	r0, [r5, #30]
 187:Src/main.c    **** 
 3174              		.loc 1 187 5 is_stmt 1 view .LVU763
 187:Src/main.c    **** 
 3175              		.loc 1 187 19 is_stmt 0 view .LVU764
 3176 047e 1021     		movs	r1, #16
 3177 0480 2000     		movs	r0, r4
 3178 0482 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3179              	.LVL256:
 3180 0486 0400     		movs	r4, r0
 187:Src/main.c    **** 
 3181              		.loc 1 187 52 view .LVU765
 3182 0488 8021     		movs	r1, #128
 3183 048a 8901     		lsls	r1, r1, #6
 3184 048c 1B48     		ldr	r0, .L138+20
 3185 048e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3186              	.LVL257:
 187:Src/main.c    **** 
 3187              		.loc 1 187 17 view .LVU766
 3188 0492 2043     		orrs	r0, r4
 3189 0494 C0B2     		uxtb	r0, r0
 3190 0496 6877     		strb	r0, [r5, #29]
 189:Src/main.c    ****       r.target -= 5;
 3191              		.loc 1 189 5 is_stmt 1 view .LVU767
 189:Src/main.c    ****       r.target -= 5;
 3192              		.loc 1 189 7 is_stmt 0 view .LVU768
 3193 0498 0128     		cmp	r0, #1
 3194 049a 00D1     		bne	.LCB2584
 3195 049c 51E6     		b	.L134	@long jump
 3196              	.LCB2584:
 3197              	.L112:
 195:Src/main.c    ****       r.target += 5;
 3198              		.loc 1 195 5 is_stmt 1 view .LVU769
 195:Src/main.c    ****       r.target += 5;
 3199              		.loc 1 195 16 is_stmt 0 view .LVU770
 3200 049e 144B     		ldr	r3, .L138+8
 3201 04a0 9B7F     		ldrb	r3, [r3, #30]
 195:Src/main.c    ****       r.target += 5;
 3202              		.loc 1 195 7 view .LVU771
 3203 04a2 012B     		cmp	r3, #1
ARM GAS  /tmp/ccL0lKDS.s 			page 102


 3204 04a4 00D1     		bne	.LCB2590
 3205 04a6 59E6     		b	.L135	@long jump
 3206              	.LCB2590:
 3207              	.L113:
 201:Src/main.c    **** 
 3208              		.loc 1 201 5 is_stmt 1 view .LVU772
 201:Src/main.c    **** 
 3209              		.loc 1 201 16 is_stmt 0 view .LVU773
 3210 04a8 154B     		ldr	r3, .L138+24
 3211 04aa 1C68     		ldr	r4, [r3]
 3212 04ac 1549     		ldr	r1, .L138+28
 3213 04ae 201C     		adds	r0, r4, #0
 3214 04b0 FFF7FEFF 		bl	__aeabi_fcmpgt
 3215              	.LVL258:
 3216 04b4 0028     		cmp	r0, #0
 3217 04b6 00D0     		beq	.LCB2600
 3218 04b8 5DE6     		b	.L125	@long jump
 3219              	.LCB2600:
 201:Src/main.c    **** 
 3220              		.loc 1 201 16 discriminator 2 view .LVU774
 3221 04ba 1349     		ldr	r1, .L138+32
 3222 04bc 201C     		adds	r0, r4, #0
 3223 04be FFF7FEFF 		bl	__aeabi_fcmplt
 3224              	.LVL259:
 3225 04c2 0028     		cmp	r0, #0
 3226 04c4 00D1     		bne	.LCB2606
 3227 04c6 57E6     		b	.L114	@long jump
 3228              	.LCB2606:
 201:Src/main.c    **** 
 3229              		.loc 1 201 16 view .LVU775
 3230 04c8 0F4C     		ldr	r4, .L138+32
 3231 04ca 55E6     		b	.L114
 3232              	.L127:
 247:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 3233              		.loc 1 247 58 view .LVU776
 3234 04cc 0020     		movs	r0, #0
 3235 04ce 0021     		movs	r1, #0
 3236 04d0 98E7     		b	.L121
 3237              	.LVL260:
 3238              	.L123:
 3239              	.LBB40:
 250:Src/main.c    ****     }
 3240              		.loc 1 250 7 is_stmt 1 discriminator 3 view .LVU777
 250:Src/main.c    ****     }
 3241              		.loc 1 250 21 is_stmt 0 discriminator 3 view .LVU778
 3242 04d2 2000     		movs	r0, r4
 3243 04d4 3C30     		adds	r0, r0, #60
 250:Src/main.c    ****     }
 3244              		.loc 1 250 7 discriminator 3 view .LVU779
 3245 04d6 00B2     		sxth	r0, r0
 3246 04d8 0123     		movs	r3, #1
 3247 04da 0822     		movs	r2, #8
 3248 04dc 0821     		movs	r1, #8
 3249 04de FFF7FEFF 		bl	draw_v_line
 3250              	.LVL261:
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3251              		.loc 1 249 50 is_stmt 1 discriminator 3 view .LVU780
ARM GAS  /tmp/ccL0lKDS.s 			page 103


 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3252              		.loc 1 249 51 is_stmt 0 discriminator 3 view .LVU781
 3253 04e2 0134     		adds	r4, r4, #1
 3254              	.LVL262:
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3255              		.loc 1 249 51 discriminator 3 view .LVU782
 3256 04e4 A4B2     		uxth	r4, r4
 3257              	.LVL263:
 249:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 3258              		.loc 1 249 51 discriminator 3 view .LVU783
 3259 04e6 B4E7     		b	.L122
 3260              	.L139:
 3261              		.align	2
 3262              	.L138:
 3263 04e8 00003E40 		.word	1077805056
 3264 04ec 9A99B93F 		.word	1069128090
 3265 04f0 00000000 		.word	.LANCHOR7
 3266 04f4 6666663F 		.word	1063675494
 3267 04f8 00000000 		.word	.LANCHOR5
 3268 04fc 00080048 		.word	1207961600
 3269 0500 00000000 		.word	.LANCHOR9
 3270 0504 0000C843 		.word	1137180672
 3271 0508 0000A041 		.word	1101004800
 3272              	.LBE40:
 3273              	.LBE41:
 3274              		.cfi_endproc
 3275              	.LFE37:
 3277              		.section	.text.Error_Handler,"ax",%progbits
 3278              		.align	1
 3279              		.global	Error_Handler
 3280              		.syntax unified
 3281              		.code	16
 3282              		.thumb_func
 3283              		.fpu softvfp
 3285              	Error_Handler:
 3286              	.LFB58:
 701:Src/main.c    **** 
 702:Src/main.c    **** void Error_Handler(void)
 703:Src/main.c    **** {
 3287              		.loc 1 703 1 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 3291              		@ link register save eliminated.
 704:Src/main.c    **** 
 705:Src/main.c    **** }
 3292              		.loc 1 705 1 view .LVU785
 3293              		@ sp needed
 3294 0000 7047     		bx	lr
 3295              		.cfi_endproc
 3296              	.LFE58:
 3298              		.global	OLED_Setup_Array
 3299              		.global	REFRESH_COMMANDS
 3300              		.global	screenBuffer
 3301              		.global	jbr_string
 3302              		.section	.rodata.str1.4,"aMS",%progbits,1
 3303              		.align	2
ARM GAS  /tmp/ccL0lKDS.s 			page 104


 3304              	.LC50:
 3305 0000 4A425220 		.ascii	"JBR Eng 2020\000"
 3305      456E6720 
 3305      32303230 
 3305      00
 3306              		.global	assembly_string
 3307 000d 000000   		.align	2
 3308              	.LC51:
 3309 0010 41737365 		.ascii	"Assembly by\000"
 3309      6D626C79 
 3309      20627900 
 3310              		.global	by_string
 3311              		.align	2
 3312              	.LC52:
 3313 001c 6279204A 		.ascii	"by Jan Henrik\000"
 3313      616E2048 
 3313      656E7269 
 3313      6B00
 3314              		.global	otter_string
 3315 002a 0000     		.align	2
 3316              	.LC53:
 3317 002c 4F747465 		.ascii	"Otter-Iron\000"
 3317      722D4972 
 3317      6F6E00
 3318              		.global	dfu_string
 3319 0037 00       		.align	2
 3320              	.LC54:
 3321 0038 64667564 		.ascii	"dfudfudfudfudfu\000"
 3321      66756466 
 3321      75646675 
 3321      64667500 
 3322              		.global	sendDataUSB
 3323              		.global	tipcal
 3324              		.global	r
 3325              		.global	s
 3326              		.global	USBD_Device
 3327              		.global	hiwdg
 3328              		.global	htim3
 3329              		.global	htim1
 3330              		.global	hi2c2
 3331              		.global	hi2c1
 3332              		.global	hdma_adc
 3333              		.global	hadc
 3334              		.global	wduty
 3335              		.global	font
 3336              		.section	.rodata
 3337              		.align	2
 3338              		.set	.LANCHOR19,. + 0
 3339              	.LC39:
 3340 0000 20202020 		.ascii	"          \000"
 3340      20202020 
 3340      202000
 3341 000b 000000   		.space	3
 3342              		.section	.bss.ADC_raw,"aw",%nobits
 3343              		.align	2
 3344              		.set	.LANCHOR6,. + 0
 3347              	ADC_raw:
ARM GAS  /tmp/ccL0lKDS.s 			page 105


 3348 0000 00000000 		.space	8
 3348      00000000 
 3349              		.section	.bss.USBD_Device,"aw",%nobits
 3350              		.align	2
 3353              	USBD_Device:
 3354 0000 00000000 		.space	548
 3354      00000000 
 3354      00000000 
 3354      00000000 
 3354      00000000 
 3355              		.section	.bss.hadc,"aw",%nobits
 3356              		.align	2
 3357              		.set	.LANCHOR0,. + 0
 3360              	hadc:
 3361 0000 00000000 		.space	76
 3361      00000000 
 3361      00000000 
 3361      00000000 
 3361      00000000 
 3362              		.section	.bss.hdma_adc,"aw",%nobits
 3363              		.align	2
 3366              	hdma_adc:
 3367 0000 00000000 		.space	68
 3367      00000000 
 3367      00000000 
 3367      00000000 
 3367      00000000 
 3368              		.section	.bss.hi2c1,"aw",%nobits
 3369              		.align	2
 3370              		.set	.LANCHOR1,. + 0
 3373              	hi2c1:
 3374 0000 00000000 		.space	76
 3374      00000000 
 3374      00000000 
 3374      00000000 
 3374      00000000 
 3375              		.section	.bss.hi2c2,"aw",%nobits
 3376              		.align	2
 3377              		.set	.LANCHOR2,. + 0
 3380              	hi2c2:
 3381 0000 00000000 		.space	76
 3381      00000000 
 3381      00000000 
 3381      00000000 
 3381      00000000 
 3382              		.section	.bss.hiwdg,"aw",%nobits
 3383              		.align	2
 3384              		.set	.LANCHOR5,. + 0
 3387              	hiwdg:
 3388 0000 00000000 		.space	16
 3388      00000000 
 3388      00000000 
 3388      00000000 
 3389              		.section	.bss.htim1,"aw",%nobits
 3390              		.align	2
 3391              		.set	.LANCHOR4,. + 0
 3394              	htim1:
ARM GAS  /tmp/ccL0lKDS.s 			page 106


 3395 0000 00000000 		.space	64
 3395      00000000 
 3395      00000000 
 3395      00000000 
 3395      00000000 
 3396              		.section	.bss.htim3,"aw",%nobits
 3397              		.align	2
 3398              		.set	.LANCHOR3,. + 0
 3401              	htim3:
 3402 0000 00000000 		.space	64
 3402      00000000 
 3402      00000000 
 3402      00000000 
 3402      00000000 
 3403              		.section	.bss.screenBuffer,"aw",%nobits
 3404              		.align	2
 3407              	screenBuffer:
 3408 0000 00000000 		.space	218
 3408      00000000 
 3408      00000000 
 3408      00000000 
 3408      00000000 
 3409              		.section	.bss.sendDataUSB,"aw",%nobits
 3410              		.align	2
 3411              		.set	.LANCHOR11,. + 0
 3414              	sendDataUSB:
 3415 0000 00000000 		.space	4
 3416              		.section	.data.OLED_Setup_Array,"aw"
 3417              		.align	2
 3418              		.set	.LANCHOR13,. + 0
 3421              	OLED_Setup_Array:
 3422 0000 80AE80D5 		.ascii	"\200\256\200\325\200R\200\250\200\017\200\300\200\323"
 3422      805280A8 
 3422      800F80C0 
 3422      80D3
 3423 000e 80008040 		.ascii	"\200\000\200@\200\240\200\215\200\024\200\332\200\002"
 3423      80A0808D 
 3423      801480DA 
 3423      8002
 3424 001c 80818033 		.ascii	"\200\201\2003\200\331\200\361\200\333\2000\200\244\200"
 3424      80D980F1 
 3424      80DB8030 
 3424      80A480
 3425 002b A6802080 		.ascii	"\246\200 \200\000\200\257"
 3425      0080AF
 3426              		.section	.data.assembly_string,"aw"
 3427              		.align	2
 3428              		.set	.LANCHOR17,. + 0
 3431              	assembly_string:
 3432 0000 10000000 		.word	.LC51
 3433              		.section	.data.by_string,"aw"
 3434              		.align	2
 3435              		.set	.LANCHOR16,. + 0
 3438              	by_string:
 3439 0000 1C000000 		.word	.LC52
 3440              		.section	.data.dfu_string,"aw"
 3441              		.align	2
ARM GAS  /tmp/ccL0lKDS.s 			page 107


 3442              		.set	.LANCHOR14,. + 0
 3445              	dfu_string:
 3446 0000 38000000 		.word	.LC54
 3447              		.section	.data.jbr_string,"aw"
 3448              		.align	2
 3449              		.set	.LANCHOR18,. + 0
 3452              	jbr_string:
 3453 0000 00000000 		.word	.LC50
 3454              		.section	.data.otter_string,"aw"
 3455              		.align	2
 3456              		.set	.LANCHOR15,. + 0
 3459              	otter_string:
 3460 0000 2C000000 		.word	.LC53
 3461              		.section	.data.r,"aw"
 3462              		.align	2
 3463              		.set	.LANCHOR9,. + 0
 3466              	r:
 3467 0000 00005C43 		.word	1130102784
 3468 0004 00000000 		.space	12
 3468      00000000 
 3468      00000000 
 3469 0010 00004843 		.word	1128792064
 3470 0014 00000000 		.space	8
 3470      00000000 
 3471 001c 240B9838 		.word	949488420
 3472 0020 0000003F 		.word	1056964608
 3473 0024 0AD7233C 		.word	1008981770
 3474 0028 00000000 		.word	0
 3475 002c 0000A041 		.word	1101004800
 3476              		.section	.data.s,"aw"
 3477              		.align	2
 3478              		.set	.LANCHOR7,. + 0
 3481              	s:
 3482 0000 00000000 		.space	20
 3482      00000000 
 3482      00000000 
 3482      00000000 
 3482      00000000 
 3483 0014 00004040 		.word	1077936128
 3484 0018 00000000 		.space	4
 3485 001c 00       		.byte	0
 3486 001d 00000000 		.space	11
 3486      00000000 
 3486      000000
 3487              		.section	.data.tipcal,"aw"
 3488              		.align	2
 3489              		.set	.LANCHOR8,. + 0
 3492              	tipcal:
 3493 0000 0000F042 		.word	1123024896
 3494 0004 0000B842 		.word	1119354880
 3495              		.section	.data.wduty,"aw"
 3496              		.align	1
 3497              		.set	.LANCHOR10,. + 0
 3500              	wduty:
 3501 0000 9600     		.short	150
 3502              		.section	.rodata.REFRESH_COMMANDS,"a"
 3503              		.align	2
ARM GAS  /tmp/ccL0lKDS.s 			page 108


 3504              		.set	.LANCHOR12,. + 0
 3507              	REFRESH_COMMANDS:
 3508 0000 80AF8021 		.ascii	"\200\257\200!\200 \200\177\200\300\200\"\200\000\200"
 3508      8020807F 
 3508      80C08022 
 3508      800080
 3509 000f 0140     		.ascii	"\001@"
 3510              		.section	.rodata.font,"a"
 3511              		.align	2
 3514              	font:
 3515 0000 00000000 		.ascii	"\000\000\000\000\000\000"
 3515      0000
 3516 0006 2F000000 		.ascii	"/\000\000\000\000\000"
 3516      0000
 3517 000c 03000300 		.ascii	"\003\000\003\000\000\000"
 3517      0000
 3518 0012 123F1212 		.ascii	"\022?\022\022?\022"
 3518      3F12
 3519 0018 2E2A7F2A 		.ascii	".*\177*:\000"
 3519      3A00
 3520 001e 23130804 		.ascii	"#\023\010\00421"
 3520      3231
 3521 0024 102A252A 		.ascii	"\020*%*\020 "
 3521      1020
 3522 002a 02010000 		.ascii	"\002\001\000\000\000\000"
 3522      0000
 3523 0030 1E210000 		.ascii	"\036!\000\000\000\000"
 3523      0000
 3524 0036 211E0000 		.ascii	"!\036\000\000\000\000"
 3524      0000
 3525 003c 082A1C2A 		.ascii	"\010*\034*\010\010"
 3525      0808
 3526 0042 08083E08 		.ascii	"\010\010>\010\010\010"
 3526      0808
 3527 0048 80600000 		.ascii	"\200`\000\000\000\000"
 3527      0000
 3528 004e 08080808 		.ascii	"\010\010\010\010\010\000"
 3528      0800
 3529 0054 30300000 		.ascii	"00\000\000\000\000"
 3529      0000
 3530 005a 20100804 		.ascii	" \020\010\004\002\000"
 3530      0200
 3531 0060 1E312925 		.ascii	"\0361)%#\036"
 3531      231E
 3532 0066 22213F20 		.ascii	"\"!?   "
 3532      2020
 3533 006c 32292929 		.ascii	"2))))&"
 3533      2926
 3534 0072 12212125 		.ascii	"\022!!%%\032"
 3534      251A
 3535 0078 1814123F 		.ascii	"\030\024\022?\020\020"
 3535      1010
 3536 007e 17252525 		.ascii	"\027%%%%\031"
 3536      2519
 3537 0084 1E252525 		.ascii	"\036%%%%\030"
 3537      2518
 3538 008a 01013109 		.ascii	"\001\0011\011\005\003"
ARM GAS  /tmp/ccL0lKDS.s 			page 109


 3538      0503
 3539 0090 1A252525 		.ascii	"\032%%%%\032"
 3539      251A
 3540 0096 06292929 		.ascii	"\006))))\036"
 3540      291E
 3541 009c 24000000 		.ascii	"$\000\000\000\000\000"
 3541      0000
 3542 00a2 80640000 		.ascii	"\200d\000\000\000\000"
 3542      0000
 3543 00a8 08142200 		.ascii	"\010\024\"\000\000\000"
 3543      0000
 3544 00ae 14141414 		.ascii	"\024\024\024\024\024\000"
 3544      1400
 3545 00b4 22140800 		.ascii	"\"\024\010\000\000\000"
 3545      0000
 3546 00ba 02010129 		.ascii	"\002\001\001)\005\002"
 3546      0502
 3547 00c0 1E212D2B 		.ascii	"\036!-+-\016"
 3547      2D0E
 3548 00c6 3E090909 		.ascii	">\011\011\011\011>"
 3548      093E
 3549 00cc 3F252525 		.ascii	"?%%%%\032"
 3549      251A
 3550 00d2 1E212121 		.ascii	"\036!!!!\022"
 3550      2112
 3551 00d8 3F212121 		.ascii	"?!!!\022\014"
 3551      120C
 3552 00de 3F252525 		.ascii	"?%%%%!"
 3552      2521
 3553 00e4 3F050505 		.ascii	"?\005\005\005\005\001"
 3553      0501
 3554 00ea 1E212121 		.ascii	"\036!!!)\032"
 3554      291A
 3555 00f0 3F040404 		.ascii	"?\004\004\004\004?"
 3555      043F
 3556 00f6 21213F21 		.ascii	"!!?!!!"
 3556      2121
 3557 00fc 10202020 		.ascii	"\020    \037"
 3557      201F
 3558 0102 3F040C0A 		.ascii	"?\004\014\012\021 "
 3558      1120
 3559 0108 3F202020 		.ascii	"?     "
 3559      2020
 3560 010e 3F020404 		.ascii	"?\002\004\004\002?"
 3560      023F
 3561 0114 3F020408 		.ascii	"?\002\004\010\020?"
 3561      103F
 3562 011a 1E212121 		.ascii	"\036!!!!\036"
 3562      211E
 3563 0120 3F090909 		.ascii	"?\011\011\011\011\006"
 3563      0906
 3564 0126 1E212931 		.ascii	"\036!)1!\036"
 3564      211E
 3565 012c 3F090909 		.ascii	"?\011\011\011\031&"
 3565      1926
 3566 0132 12252525 		.ascii	"\022%%%%\030"
 3566      2518
ARM GAS  /tmp/ccL0lKDS.s 			page 110


 3567 0138 0101013F 		.ascii	"\001\001\001?\001\001"
 3567      0101
 3568 013e 1F202020 		.ascii	"\037    \037"
 3568      201F
 3569 0144 0F102020 		.ascii	"\017\020  \020\017"
 3569      100F
 3570 014a 1F201010 		.ascii	"\037 \020\020 \037"
 3570      201F
 3571 0150 21120C0C 		.ascii	"!\022\014\014\022!"
 3571      1221
 3572 0156 01020C38 		.ascii	"\001\002\0148\004\002"
 3572      0402
 3573 015c 21312925 		.ascii	"!1)%#!"
 3573      2321
 3574 0162 3F210000 		.ascii	"?!\000\000\000\000"
 3574      0000
 3575 0168 02040810 		.ascii	"\002\004\010\020 \000"
 3575      2000
 3576 016e 213F0000 		.ascii	"!?\000\000\000\000"
 3576      0000
 3577 0174 04023F02 		.ascii	"\004\002?\002\004\000"
 3577      0400
 3578 017a 40404040 		.ascii	"@@@@@@"
 3578      4040
 3579 0180 01020000 		.ascii	"\001\002\000\000\000\000"
 3579      0000
 3580 0186 10302A2A 		.ascii	"\0200**<\000"
 3580      3C00
 3581 018c 3F242424 		.ascii	"?$$$\030\000"
 3581      1800
 3582 0192 0C142222 		.ascii	"\014\024\"\"\000\000"
 3582      0000
 3583 0198 18242424 		.ascii	"\030$$$?\000"
 3583      3F00
 3584 019e 1C2C2A2A 		.ascii	"\034,**$\000"
 3584      2400
 3585 01a4 3E050100 		.ascii	">\005\001\000\000\000"
 3585      0000
 3586 01aa 1828A4A4 		.ascii	"\030(\244\244|\000"
 3586      7C00
 3587 01b0 3F04040C 		.ascii	"?\004\004\0140\000"
 3587      3000
 3588 01b6 243D2000 		.ascii	"$= \000\000\000"
 3588      0000
 3589 01bc 2040403D 		.ascii	" @@=\000\000"
 3589      0000
 3590 01c2 3F0C1220 		.ascii	"?\014\022 \000\000"
 3590      0000
 3591 01c8 1F202000 		.ascii	"\037  \000\000\000"
 3591      0000
 3592 01ce 3E023C02 		.ascii	">\002<\002<\000"
 3592      3C00
 3593 01d4 3E020202 		.ascii	">\002\002\002<\000"
 3593      3C00
 3594 01da 0C142232 		.ascii	"\014\024\"2\014\000"
 3594      0C00
 3595 01e0 FC242424 		.ascii	"\374$$$\030\000"
ARM GAS  /tmp/ccL0lKDS.s 			page 111


 3595      1800
 3596 01e6 18242424 		.ascii	"\030$$$\374\200"
 3596      FC80
 3597 01ec 3C040202 		.ascii	"<\004\002\002\000\000"
 3597      0000
 3598 01f2 242C2A2A 		.ascii	"$,**\020\000"
 3598      1000
 3599 01f8 021F2220 		.ascii	"\002\037\" \000\000"
 3599      0000
 3600 01fe 1E202020 		.ascii	"\036   \036\000"
 3600      1E00
 3601 0204 06182018 		.ascii	"\006\030 \030\006\000"
 3601      0600
 3602 020a 1E301C30 		.ascii	"\0360\0340\016\000"
 3602      0E00
 3603 0210 22140814 		.ascii	"\"\024\010\024\"\000"
 3603      2200
 3604 0216 0C10A0A0 		.ascii	"\014\020\240\240|\000"
 3604      7C00
 3605 021c 22322A26 		.ascii	"\"2*&\"\""
 3605      2222
 3606 0222 0C3F2100 		.ascii	"\014?!\000\000\000"
 3606      0000
 3607 0228 3F000000 		.ascii	"?\000\000\000\000\000"
 3607      0000
 3608 022e 213F0C00 		.ascii	"!?\014\000\000\000"
 3608      0000
 3609 0234 02010201 		.ascii	"\002\001\002\001\000\000"
 3609      0000
 3610 023a 00000000 		.ascii	"\000\000\000\000\000\000"
 3610      0000
 3611              		.text
 3612              	.Letext0:
 3613              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3614              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3615              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 3616              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 3617              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 3618              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 3619              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 3620              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 3621              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 3622              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 3623              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 3624              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"
 3625              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 3626              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 3627              		.file 18 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 3628              		.file 19 "Inc/font.h"
 3629              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 3630              		.file 21 "Inc/main.h"
 3631              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 3632              		.file 23 "/usr/arm-none-eabi/include/string.h"
 3633              		.file 24 "/usr/arm-none-eabi/include/stdio.h"
 3634              		.file 25 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 3635              		.file 26 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 3636              		.file 27 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_flash.h"
ARM GAS  /tmp/ccL0lKDS.s 			page 112


 3637              		.file 28 "<built-in>"
ARM GAS  /tmp/ccL0lKDS.s 			page 113


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccL0lKDS.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccL0lKDS.s:153    .text.MX_GPIO_Init:0000000000000084 $d
     /tmp/ccL0lKDS.s:160    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:166    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccL0lKDS.s:223    .text.MX_DMA_Init:000000000000003c $d
     /tmp/ccL0lKDS.s:228    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:234    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccL0lKDS.s:398    .text.MX_ADC_Init:00000000000000a4 $d
     /tmp/ccL0lKDS.s:405    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:411    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccL0lKDS.s:474    .text.MX_I2C1_Init:0000000000000038 $d
     /tmp/ccL0lKDS.s:481    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:487    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccL0lKDS.s:550    .text.MX_I2C2_Init:0000000000000038 $d
     /tmp/ccL0lKDS.s:557    .text.TIM3_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:563    .text.TIM3_Init:0000000000000000 TIM3_Init
     /tmp/ccL0lKDS.s:647    .text.TIM3_Init:0000000000000050 $d
     /tmp/ccL0lKDS.s:655    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:661    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccL0lKDS.s:863    .text.MX_TIM1_Init:00000000000000d4 $d
     /tmp/ccL0lKDS.s:870    .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/ccL0lKDS.s:876    .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/ccL0lKDS.s:912    .text.MX_IWDG_Init:0000000000000018 $d
     /tmp/ccL0lKDS.s:938    .text.reg:0000000000000000 $t
     /tmp/ccL0lKDS.s:945    .text.reg:0000000000000000 reg
     /tmp/ccL0lKDS.s:1402   .text.reg:0000000000000278 $d
     /tmp/ccL0lKDS.s:1431   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccL0lKDS.s:1438   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccL0lKDS.s:1489   .text.HAL_TIM_PeriodElapsedCallback:0000000000000028 $d
     /tmp/ccL0lKDS.s:3353   .bss.USBD_Device:0000000000000000 USBD_Device
     /tmp/ccL0lKDS.s:1497   .rodata.USB_printfloat.str1.4:0000000000000000 $d
     /tmp/ccL0lKDS.s:1501   .text.USB_printfloat:0000000000000000 $t
     /tmp/ccL0lKDS.s:1508   .text.USB_printfloat:0000000000000000 USB_printfloat
     /tmp/ccL0lKDS.s:1575   .text.USB_printfloat:0000000000000048 $d
     /tmp/ccL0lKDS.s:1583   .text.disp_init:0000000000000000 $t
     /tmp/ccL0lKDS.s:1590   .text.disp_init:0000000000000000 disp_init
     /tmp/ccL0lKDS.s:1660   .text.disp_init:0000000000000048 $d
     /tmp/ccL0lKDS.s:3407   .bss.screenBuffer:0000000000000000 screenBuffer
     /tmp/ccL0lKDS.s:1669   .text.refresh:0000000000000000 $t
     /tmp/ccL0lKDS.s:1676   .text.refresh:0000000000000000 refresh
     /tmp/ccL0lKDS.s:1736   .text.refresh:0000000000000034 $d
     /tmp/ccL0lKDS.s:1743   .text.clear_screen:0000000000000000 $t
     /tmp/ccL0lKDS.s:1750   .text.clear_screen:0000000000000000 clear_screen
     /tmp/ccL0lKDS.s:1773   .text.clear_screen:0000000000000010 $d
     /tmp/ccL0lKDS.s:1778   .text.set_screen:0000000000000000 $t
     /tmp/ccL0lKDS.s:1785   .text.set_screen:0000000000000000 set_screen
     /tmp/ccL0lKDS.s:1808   .text.set_screen:0000000000000010 $d
     /tmp/ccL0lKDS.s:1813   .text.write_pixel:0000000000000000 $t
     /tmp/ccL0lKDS.s:1820   .text.write_pixel:0000000000000000 write_pixel
     /tmp/ccL0lKDS.s:1925   .text.write_pixel:0000000000000070 $d
     /tmp/ccL0lKDS.s:1930   .text.draw_v_line:0000000000000000 $t
     /tmp/ccL0lKDS.s:1937   .text.draw_v_line:0000000000000000 draw_v_line
     /tmp/ccL0lKDS.s:2002   .text.draw_char:0000000000000000 $t
     /tmp/ccL0lKDS.s:2009   .text.draw_char:0000000000000000 draw_char
ARM GAS  /tmp/ccL0lKDS.s 			page 114


     /tmp/ccL0lKDS.s:2145   .text.draw_char:0000000000000068 $d
     /tmp/ccL0lKDS.s:3514   .rodata.font:0000000000000000 font
     /tmp/ccL0lKDS.s:2150   .text.draw_string:0000000000000000 $t
     /tmp/ccL0lKDS.s:2157   .text.draw_string:0000000000000000 draw_string
     /tmp/ccL0lKDS.s:2217   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccL0lKDS.s:2224   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccL0lKDS.s:2337   .text.SystemClock_Config:000000000000006c $d
     /tmp/ccL0lKDS.s:2342   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccL0lKDS.s:2355   .text.main:0000000000000000 $t
     /tmp/ccL0lKDS.s:2362   .text.main:0000000000000000 main
     /tmp/ccL0lKDS.s:3048   .text.main:0000000000000390 $d
     /tmp/ccL0lKDS.s:3078   .text.main:0000000000000400 $t
     /tmp/ccL0lKDS.s:3263   .text.main:00000000000004e8 $d
     /tmp/ccL0lKDS.s:3278   .text.Error_Handler:0000000000000000 $t
     /tmp/ccL0lKDS.s:3285   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccL0lKDS.s:3421   .data.OLED_Setup_Array:0000000000000000 OLED_Setup_Array
     /tmp/ccL0lKDS.s:3507   .rodata.REFRESH_COMMANDS:0000000000000000 REFRESH_COMMANDS
     /tmp/ccL0lKDS.s:3452   .data.jbr_string:0000000000000000 jbr_string
     /tmp/ccL0lKDS.s:3303   .rodata.str1.4:0000000000000000 $d
     /tmp/ccL0lKDS.s:3431   .data.assembly_string:0000000000000000 assembly_string
     /tmp/ccL0lKDS.s:3438   .data.by_string:0000000000000000 by_string
     /tmp/ccL0lKDS.s:3459   .data.otter_string:0000000000000000 otter_string
     /tmp/ccL0lKDS.s:3445   .data.dfu_string:0000000000000000 dfu_string
     /tmp/ccL0lKDS.s:3414   .bss.sendDataUSB:0000000000000000 sendDataUSB
     /tmp/ccL0lKDS.s:3492   .data.tipcal:0000000000000000 tipcal
     /tmp/ccL0lKDS.s:3466   .data.r:0000000000000000 r
     /tmp/ccL0lKDS.s:3481   .data.s:0000000000000000 s
     /tmp/ccL0lKDS.s:3387   .bss.hiwdg:0000000000000000 hiwdg
     /tmp/ccL0lKDS.s:3401   .bss.htim3:0000000000000000 htim3
     /tmp/ccL0lKDS.s:3394   .bss.htim1:0000000000000000 htim1
     /tmp/ccL0lKDS.s:3380   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccL0lKDS.s:3373   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccL0lKDS.s:3366   .bss.hdma_adc:0000000000000000 hdma_adc
     /tmp/ccL0lKDS.s:3360   .bss.hadc:0000000000000000 hadc
     /tmp/ccL0lKDS.s:3500   .data.wduty:0000000000000000 wduty
     /tmp/ccL0lKDS.s:3337   .rodata:0000000000000000 $d
     /tmp/ccL0lKDS.s:3343   .bss.ADC_raw:0000000000000000 $d
     /tmp/ccL0lKDS.s:3347   .bss.ADC_raw:0000000000000000 ADC_raw
     /tmp/ccL0lKDS.s:3350   .bss.USBD_Device:0000000000000000 $d
     /tmp/ccL0lKDS.s:3356   .bss.hadc:0000000000000000 $d
     /tmp/ccL0lKDS.s:3363   .bss.hdma_adc:0000000000000000 $d
     /tmp/ccL0lKDS.s:3369   .bss.hi2c1:0000000000000000 $d
     /tmp/ccL0lKDS.s:3376   .bss.hi2c2:0000000000000000 $d
     /tmp/ccL0lKDS.s:3383   .bss.hiwdg:0000000000000000 $d
     /tmp/ccL0lKDS.s:3390   .bss.htim1:0000000000000000 $d
     /tmp/ccL0lKDS.s:3397   .bss.htim3:0000000000000000 $d
     /tmp/ccL0lKDS.s:3404   .bss.screenBuffer:0000000000000000 $d
     /tmp/ccL0lKDS.s:3410   .bss.sendDataUSB:0000000000000000 $d
     /tmp/ccL0lKDS.s:3417   .data.OLED_Setup_Array:0000000000000000 $d
     /tmp/ccL0lKDS.s:3427   .data.assembly_string:0000000000000000 $d
     /tmp/ccL0lKDS.s:3434   .data.by_string:0000000000000000 $d
     /tmp/ccL0lKDS.s:3441   .data.dfu_string:0000000000000000 $d
     /tmp/ccL0lKDS.s:3448   .data.jbr_string:0000000000000000 $d
     /tmp/ccL0lKDS.s:3455   .data.otter_string:0000000000000000 $d
     /tmp/ccL0lKDS.s:3462   .data.r:0000000000000000 $d
     /tmp/ccL0lKDS.s:3477   .data.s:0000000000000000 $d
     /tmp/ccL0lKDS.s:3488   .data.tipcal:0000000000000000 $d
ARM GAS  /tmp/ccL0lKDS.s 			page 115


     /tmp/ccL0lKDS.s:3496   .data.wduty:0000000000000000 $d
     /tmp/ccL0lKDS.s:3503   .rodata.REFRESH_COMMANDS:0000000000000000 $d
     /tmp/ccL0lKDS.s:3511   .rodata.font:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_MspInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_IWDG_Init
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_i2d
__aeabi_dadd
__aeabi_fcmpge
__aeabi_fcmple
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_f2iz
__aeabi_dcmple
USBD_CDC_SetTxBuffer
USBD_CDC_TransmitPacket
UserTxBuffer
__aeabi_f2uiz
sprintf
HAL_I2C_GetState
HAL_I2C_Master_Transmit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_OC_Start
ARM GAS  /tmp/ccL0lKDS.s 			page 116


HAL_ADC_Start_DMA
HAL_Delay
HAL_GPIO_ReadPin
HAL_FLASH_Unlock
HAL_FLASH_Program
HAL_FLASH_Lock
HAL_IWDG_Refresh
