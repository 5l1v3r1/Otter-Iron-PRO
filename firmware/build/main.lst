ARM GAS  /tmp/ccIZXVel.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB57:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*
   3:Src/main.c    ****  * Otter-Iron  -  Stm32f072 based soldering iron.
   4:Src/main.c    ****  * Copyright (C) 2020 Jan Henrik Hemsing
   5:Src/main.c    ****  *
   6:Src/main.c    ****  * This program is free software: you can redistribute it and/or modify it
   7:Src/main.c    ****  * under the terms of the GNU General Public License as published by the Free
   8:Src/main.c    ****  * Software Foundation, either version 3 of the License, or (at your option)
   9:Src/main.c    ****  * any later version.
  10:Src/main.c    ****  *
  11:Src/main.c    ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  12:Src/main.c    ****  * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
  13:Src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  14:Src/main.c    ****  * more details.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * You should have received a copy of the GNU General Public License along with
  17:Src/main.c    ****  * this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "font.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** // Enable serial printing via CDC, quite buggy
  24:Src/main.c    **** //#define ENABLESERIAL
  25:Src/main.c    **** // Enable Current display, shows up after a few millisecconds instead of temp-target
  26:Src/main.c    **** #define DISPLAYCURRENT
  27:Src/main.c    **** 
  28:Src/main.c    **** #define FILT(a, b, c) ((a) * (c) + (b) * ((1.0f) - (c)))
  29:Src/main.c    **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  30:Src/main.c    **** 
  31:Src/main.c    **** #define TTIP_AVG_FILTER 0.99f
  32:Src/main.c    **** #define DISP_AVG_FILTER 0.9f
  33:Src/main.c    **** #define MIN_DUTY 0
  34:Src/main.c    **** uint16_t MAX_DUTY = 150;
ARM GAS  /tmp/ccIZXVel.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** ADC_HandleTypeDef hadc;
  37:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  38:Src/main.c    **** 
  39:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  40:Src/main.c    **** I2C_HandleTypeDef hi2c2;
  41:Src/main.c    **** 
  42:Src/main.c    **** TIM_HandleTypeDef htim1;
  43:Src/main.c    **** TIM_HandleTypeDef htim3;
  44:Src/main.c    **** 
  45:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  46:Src/main.c    **** 
  47:Src/main.c    **** USBD_HandleTypeDef USBD_Device;
  48:Src/main.c    **** 
  49:Src/main.c    **** void SystemClock_Config(void);
  50:Src/main.c    **** static void MX_GPIO_Init(void);
  51:Src/main.c    **** static void MX_ADC_Init(void);
  52:Src/main.c    **** static void MX_DMA_Init(void);
  53:Src/main.c    **** static void MX_I2C1_Init(void);
  54:Src/main.c    **** static void MX_I2C2_Init(void);
  55:Src/main.c    **** static void MX_TIM1_Init(void);
  56:Src/main.c    **** static void TIM3_Init(void);
  57:Src/main.c    **** static void MX_IWDG_Init(void);
  58:Src/main.c    **** 
  59:Src/main.c    **** void reg(void);
  60:Src/main.c    **** void disp_init(void);
  61:Src/main.c    **** void refresh(void);
  62:Src/main.c    **** void clear_screen(void);
  63:Src/main.c    **** void set_screen(void);
  64:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color);
  65:Src/main.c    **** void draw_char(unsigned char  c, uint8_t x, uint8_t y, uint8_t brightness);
  66:Src/main.c    **** void draw_string(const unsigned char * str, uint8_t x, uint8_t y, uint8_t brightness);
  67:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color);
  68:Src/main.c    **** void USB_printfloat(float _buf);
  69:Src/main.c    **** 
  70:Src/main.c    **** struct status_t{
  71:Src/main.c    ****   float ttip;
  72:Src/main.c    ****   float ttipavg;
  73:Src/main.c    ****   float uin;
  74:Src/main.c    ****   float iin;
  75:Src/main.c    ****   float iinavg;
  76:Src/main.c    ****   float imax;
  77:Src/main.c    ****   float tref;
  78:Src/main.c    ****   uint8_t writeFlash;
  79:Src/main.c    ****   uint8_t button[2];
  80:Src/main.c    ****   float drawlineavg;
  81:Src/main.c    **** #ifdef DISPLAYCURRENT
  82:Src/main.c    ****   uint8_t timeout;
  83:Src/main.c    **** #endif
  84:Src/main.c    **** }s = {.writeFlash = 0, .imax = 4.0f};
  85:Src/main.c    **** 
  86:Src/main.c    **** struct reg_t{
  87:Src/main.c    ****   float target;
  88:Src/main.c    ****   float error;
  89:Src/main.c    ****   float errorprior;
  90:Src/main.c    ****   float ierror;
  91:Src/main.c    ****   float imax;
ARM GAS  /tmp/ccIZXVel.s 			page 3


  92:Src/main.c    ****   float derror;
  93:Src/main.c    ****   int16_t duty;
  94:Src/main.c    ****   float cycletime;
  95:Src/main.c    ****   float Kp;
  96:Src/main.c    ****   float Ki;
  97:Src/main.c    ****   float Kd;
  98:Src/main.c    ****   float deadband;
  99:Src/main.c    **** }r = {.Kp = 0.2f,.Ki = 0.01f,.Kd = 0.0f,.cycletime = 0.00025f,.imax=200.0f,.target=220.0f,.deadband
 100:Src/main.c    **** //}r = {.Kp = 0.3f,.Ki = 0.13f,.Kd = 0.3f,.cycletime = 0.0005f,.imax=200.0f,.target=220.0f,.deadban
 101:Src/main.c    **** 
 102:Src/main.c    **** struct tipcal_t{
 103:Src/main.c    ****   float offset;
 104:Src/main.c    ****   float coefficient;
 105:Src/main.c    **** } tipcal = {.offset = 120, .coefficient = 92};
 106:Src/main.c    **** 
 107:Src/main.c    **** static uint16_t ADC_raw[4];
 108:Src/main.c    **** 
 109:Src/main.c    **** extern uint8_t UserTxBuffer[APP_TX_DATA_SIZE];/* Received Data over UART (CDC interface) are stored
 110:Src/main.c    **** uint32_t sendDataUSB;
 111:Src/main.c    **** 
 112:Src/main.c    **** int main(void)
 113:Src/main.c    **** {
 114:Src/main.c    ****   HAL_Init();
 115:Src/main.c    **** 
 116:Src/main.c    ****   SystemClock_Config();
 117:Src/main.c    **** 
 118:Src/main.c    ****   MX_GPIO_Init();
 119:Src/main.c    ****   MX_DMA_Init();
 120:Src/main.c    ****   MX_ADC_Init();
 121:Src/main.c    ****   MX_I2C1_Init();
 122:Src/main.c    ****   MX_I2C2_Init();
 123:Src/main.c    ****   MX_TIM1_Init();
 124:Src/main.c    ****   TIM3_Init();
 125:Src/main.c    **** 
 126:Src/main.c    **** 
 127:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 128:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 129:Src/main.c    **** 
 130:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_raw, 4);
 131:Src/main.c    **** 
 132:Src/main.c    ****   HAL_Delay(50);
 133:Src/main.c    ****   disp_init();
 134:Src/main.c    ****   HAL_Delay(150);
 135:Src/main.c    ****   clear_screen();
 136:Src/main.c    ****   //DFU bootloader
 137:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 138:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 139:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 8 ,1);
 140:Src/main.c    ****     refresh();
 141:Src/main.c    ****     HAL_Delay(40);
 142:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 143:Src/main.c    ****     NVIC_SystemReset();
 144:Src/main.c    ****   } else {
 145:Src/main.c    ****     draw_string("Otter-Iron", 15, 1 ,1);
 146:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 147:Src/main.c    ****     refresh();
 148:Src/main.c    **** #ifdef ENABLESERIAL
ARM GAS  /tmp/ccIZXVel.s 			page 4


 149:Src/main.c    ****     //start USB CDC
 150:Src/main.c    ****     USBD_Init(&USBD_Device, &VCP_Desc, 0);
 151:Src/main.c    ****     USBD_RegisterClass(&USBD_Device, &USBD_CDC);
 152:Src/main.c    ****     USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 153:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 154:Src/main.c    ****     USBD_Start(&USBD_Device);
 155:Src/main.c    **** #endif
 156:Src/main.c    **** #ifdef DISPLAYCURRENT
 157:Src/main.c    ****       s.timeout = 20;
 158:Src/main.c    **** #endif
 159:Src/main.c    ****   }
 160:Src/main.c    **** 
 161:Src/main.c    ****   HAL_Delay(1000);
 162:Src/main.c    ****   MX_IWDG_Init();
 163:Src/main.c    **** 
 164:Src/main.c    ****   r.target = *((uint16_t *) 0x0800e400);
 165:Src/main.c    ****   if(r.target > 400) r.target = 220;  //initial temp set
 166:Src/main.c    **** 
 167:Src/main.c    ****   while (1)
 168:Src/main.c    ****   {
 169:Src/main.c    ****     HAL_Delay(50);
 170:Src/main.c    **** 
 171:Src/main.c    ****     //UI
 172:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B1_Pin);
 173:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 174:Src/main.c    **** 
 175:Src/main.c    ****     if(s.button[0] == 1){
 176:Src/main.c    ****       r.target -= 5;
 177:Src/main.c    ****       s.writeFlash = 1;
 178:Src/main.c    ****       HAL_Delay(40);
 179:Src/main.c    ****     }
 180:Src/main.c    **** 
 181:Src/main.c    ****     if(s.button[1] == 1){
 182:Src/main.c    ****       r.target += 5;
 183:Src/main.c    ****       s.writeFlash = 1;
 184:Src/main.c    ****       HAL_Delay(40);
 185:Src/main.c    ****     }
 186:Src/main.c    **** 
 187:Src/main.c    ****     r.target = CLAMP(r.target, 20, 400);
 188:Src/main.c    **** 
 189:Src/main.c    ****     if(s.writeFlash == 1){
 190:Src/main.c    ****       HAL_FLASH_Unlock();
 191:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 192:Src/main.c    ****       FLASH->AR = 0x0800e400;
 193:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 194:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 195:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 196:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 197:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 198:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 199:Src/main.c    ****         HAL_FLASH_Lock();
 200:Src/main.c    ****         s.writeFlash = 0;
 201:Src/main.c    ****       }
 202:Src/main.c    ****       #ifdef DISPLAYCURRENT
 203:Src/main.c    ****             s.timeout = 12;
 204:Src/main.c    ****       #endif
 205:Src/main.c    ****     }
ARM GAS  /tmp/ccIZXVel.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    **** #ifdef ENABLESERIAL
 208:Src/main.c    ****     // send temperature via USB CDC
 209:Src/main.c    ****     USB_printfloat(r.error);
 210:Src/main.c    **** #endif
 211:Src/main.c    **** 
 212:Src/main.c    ****     //super shitty display code
 213:Src/main.c    ****     char str1[10] = "          ";
 214:Src/main.c    ****     char str2[10] = "          ";
 215:Src/main.c    ****     char str3[10] = "          ";
 216:Src/main.c    ****     char str4[10] = "          ";
 217:Src/main.c    ****     sprintf(str1, "%d C   ", (uint16_t)r.target);
 218:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 219:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 220:Src/main.c    ****     sprintf(str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.iinavg)*10.0f));
 221:Src/main.c    **** 
 222:Src/main.c    ****     clear_screen();
 223:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 224:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 225:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 226:Src/main.c    **** #ifdef DISPLAYCURRENT
 227:Src/main.c    ****     if(s.timeout == 0){
 228:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 229:Src/main.c    ****     } else {
 230:Src/main.c    ****       s.timeout--;
 231:Src/main.c    ****     }
 232:Src/main.c    **** #endif
 233:Src/main.c    ****     s.drawlineavg = (s.drawlineavg * DISP_AVG_FILTER) + (CLAMP(r.error*3.0f,0,30)*(1.0-DISP_AVG_FIL
 234:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 235:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 236:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 237:Src/main.c    ****     }
 238:Src/main.c    **** 
 239:Src/main.c    ****     refresh();
 240:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 241:Src/main.c    ****   }
 242:Src/main.c    **** }
 243:Src/main.c    **** 
 244:Src/main.c    **** // Main PID+two-way controller and ADC readout
 245:Src/main.c    **** void reg(void) {
 246:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 247:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 248:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 249:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 250:Src/main.c    **** 
 251:Src/main.c    ****   s.ttipavg = FILT(s.ttipavg, s.ttip, TTIP_AVG_FILTER);
 252:Src/main.c    **** 
 253:Src/main.c    ****   // Check if within deadband, decide on two-way or PID control
 254:Src/main.c    ****   if(s.ttipavg >= r.target-r.deadband && s.ttipavg <= r.target+r.deadband){
 255:Src/main.c    ****     r.error = r.target - s.ttipavg;
 256:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 257:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 258:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 259:Src/main.c    ****     r.duty = (r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror)*MAX_DUTY;
 260:Src/main.c    ****     r.errorprior = r.error;
 261:Src/main.c    ****   } else {
 262:Src/main.c    ****     if(s.ttipavg <= r.target){
ARM GAS  /tmp/ccIZXVel.s 			page 6


 263:Src/main.c    ****       r.duty = MAX_DUTY;
 264:Src/main.c    ****       r.error = 12.0;
 265:Src/main.c    ****     } else {
 266:Src/main.c    ****       r.duty = MIN_DUTY;
 267:Src/main.c    ****       r.error = 0.0;
 268:Src/main.c    ****     }
 269:Src/main.c    ****   }
 270:Src/main.c    **** 
 271:Src/main.c    ****   r.duty = CLAMP(r.duty, MIN_DUTY, MAX_DUTY); // Clamp to duty cycle
 272:Src/main.c    **** 
 273:Src/main.c    ****   if(s.iin > s.imax && r.duty > 100){ // Current limiting
 274:Src/main.c    ****     MAX_DUTY = r.duty - 1;
 275:Src/main.c    ****     r.duty -= 100;
 276:Src/main.c    ****   } else {
 277:Src/main.c    ****     MAX_DUTY++;
 278:Src/main.c    ****     if(MAX_DUTY >= 3900) MAX_DUTY = 3900;
 279:Src/main.c    ****   }
 280:Src/main.c    **** 
 281:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r.duty);
 282:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4090);
 283:Src/main.c    **** }
 284:Src/main.c    **** 
 285:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //send USB cdc data
 286:Src/main.c    **** {
 287:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 288:Src/main.c    ****   {
 289:Src/main.c    ****     sendDataUSB = 0;
 290:Src/main.c    **** 
 291:Src/main.c    ****     USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[0], APP_TX_DATA_SIZE);
 292:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 293:Src/main.c    ****   }
 294:Src/main.c    **** }
 295:Src/main.c    **** 
 296:Src/main.c    **** void USB_printfloat(float _buf){
 297:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 298:Src/main.c    ****   sprintf(UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_buf)*10.0f));
 299:Src/main.c    ****   sendDataUSB = 1;
 300:Src/main.c    **** }
 301:Src/main.c    **** 
 302:Src/main.c    **** 
 303:Src/main.c    **** // init code sequence by Ralim, thanks alot!
 304:Src/main.c    **** #define DEVICEADDR_OLED   (0x3c<<1)
 305:Src/main.c    **** #define OLED_WIDTH        96
 306:Src/main.c    **** #define FRAMEBUFFER_START 17
 307:Src/main.c    **** uint8_t screenBuffer[16 + (OLED_WIDTH * 2) + 10];  // The data buffer
 308:Src/main.c    **** const uint8_t REFRESH_COMMANDS[17] = { 0x80, 0xAF, 0x80, 0x21, 0x80, 0x20, 0x80, 0x7F, 0x80, 0xC0, 
 309:Src/main.c    **** uint8_t OLED_Setup_Array[] = {
 310:Src/main.c    **** 0x80, 0xAE, /*Display off*/
 311:Src/main.c    **** 0x80, 0xD5, /*Set display clock divide ratio / osc freq*/
 312:Src/main.c    **** 0x80, 0x52, /*Divide ratios*/
 313:Src/main.c    **** 0x80, 0xA8, /*Set Multiplex Ratio*/
 314:Src/main.c    **** 0x80, 0x0F, /*16 == max brightness,39==dimmest*/
 315:Src/main.c    **** 0x80, 0xC0, /*Set COM Scan direction*/
 316:Src/main.c    **** 0x80, 0xD3, /*Set vertical Display offset*/
 317:Src/main.c    **** 0x80, 0x00, /*0 Offset*/
 318:Src/main.c    **** 0x80, 0x40, /*Set Display start line to 0*/
 319:Src/main.c    **** 0x80, 0xA0, /*Set Segment remap to normal*/
ARM GAS  /tmp/ccIZXVel.s 			page 7


 320:Src/main.c    **** 0x80, 0x8D, /*Charge Pump*/
 321:Src/main.c    **** 0x80, 0x14, /*Charge Pump settings*/
 322:Src/main.c    **** 0x80, 0xDA, /*Set VCOM Pins hardware config*/
 323:Src/main.c    **** 0x80, 0x02, /*Combination 2*/
 324:Src/main.c    **** 0x80, 0x81, /*Contrast*/
 325:Src/main.c    **** 0x80, 0x33, /*^51*/
 326:Src/main.c    **** 0x80, 0xD9, /*Set pre-charge period*/
 327:Src/main.c    **** 0x80, 0xF1, /*Pre charge period*/
 328:Src/main.c    **** 0x80, 0xDB, /*Adjust VCOMH regulator ouput*/
 329:Src/main.c    **** 0x80, 0x30, /*VCOM level*/
 330:Src/main.c    **** 0x80, 0xA4, /*Enable the display GDDR*/
 331:Src/main.c    **** 0x80, 0XA6, /*Normal display*/
 332:Src/main.c    **** 0x80, 0x20, /*Memory Mode*/
 333:Src/main.c    **** 0x80, 0x00, /*Wrap memory*/
 334:Src/main.c    **** 0x80, 0xAF /*Display on*/
 335:Src/main.c    **** };
 336:Src/main.c    **** //not Ralim anymore
 337:Src/main.c    **** void disp_init(void) {
 338:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 339:Src/main.c    ****   uint16_t _cnt = 0;
 340:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 341:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 342:Src/main.c    **** }
 343:Src/main.c    **** 
 344:Src/main.c    **** void refresh(void) {
 345:Src/main.c    ****   uint16_t _cnt = 0;
 346:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 347:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 348:Src/main.c    **** }
 349:Src/main.c    **** 
 350:Src/main.c    **** void clear_screen(void) {
 351:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 352:Src/main.c    **** }
 353:Src/main.c    **** void set_screen(void) {
 354:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 355:Src/main.c    **** }
 356:Src/main.c    **** 
 357:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color){
 358:Src/main.c    ****   for(int i = 0; i <= h; i++){
 359:Src/main.c    ****     write_pixel(x, y+i, color);
 360:Src/main.c    ****   }
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color){
 364:Src/main.c    ****   if(x>95 || y >15){
 365:Src/main.c    ****     return;
 366:Src/main.c    ****   }
 367:Src/main.c    ****   if(color == 1){
 368:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 369:Src/main.c    ****   } else if (color == 0){
 370:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 371:Src/main.c    ****   }
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** #define CHAR_WIDTH 6
 375:Src/main.c    **** #define CHAR_HEIGHT 8
 376:Src/main.c    **** void draw_char(unsigned char c, uint8_t x, uint8_t y, uint8_t brightness) {
ARM GAS  /tmp/ccIZXVel.s 			page 8


 377:Src/main.c    ****     c = c & 0x7F;
 378:Src/main.c    ****     if (c < ' ') {
 379:Src/main.c    ****         c = 0;
 380:Src/main.c    ****     } else {
 381:Src/main.c    ****         c -= ' ';
 382:Src/main.c    ****     }
 383:Src/main.c    ****     uint8_t * chr = font[c];
 384:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 385:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 386:Src/main.c    ****             if (chr[j] & (1<<i)) {
 387:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 388:Src/main.c    ****             } else {
 389:Src/main.c    ****                 write_pixel(x+j, y+i, 0);
 390:Src/main.c    ****             }
 391:Src/main.c    ****         }
 392:Src/main.c    ****     }
 393:Src/main.c    **** }
 394:Src/main.c    **** 
 395:Src/main.c    **** void draw_string(const unsigned char* str, uint8_t x, uint8_t y, uint8_t brightness) {
 396:Src/main.c    ****     while (*str) {
 397:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 398:Src/main.c    ****         x += CHAR_WIDTH;
 399:Src/main.c    ****     }
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** void SystemClock_Config(void)
 403:Src/main.c    **** {
 404:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 405:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 406:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 407:Src/main.c    **** 
 408:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 409:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 410:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 411:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 412:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 413:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 414:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 415:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 416:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 417:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 418:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 419:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 420:Src/main.c    **** 
 421:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 422:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 423:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 424:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 425:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 426:Src/main.c    **** 
 427:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 428:Src/main.c    **** 
 429:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 430:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 431:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 432:Src/main.c    **** 
 433:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
ARM GAS  /tmp/ccIZXVel.s 			page 9


 434:Src/main.c    **** }
 435:Src/main.c    **** 
 436:Src/main.c    **** static void MX_ADC_Init(void)
 437:Src/main.c    **** {
 438:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 439:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 440:Src/main.c    **** 
 441:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 442:Src/main.c    **** 
 443:Src/main.c    ****   hadc.Instance = ADC1;
 444:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 445:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 446:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 447:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 448:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 449:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 450:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 451:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 452:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 453:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 454:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 455:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 456:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 457:Src/main.c    ****   HAL_ADC_Init(&hadc);
 458:Src/main.c    **** 
 459:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 460:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 461:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 462:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 463:Src/main.c    **** 
 464:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 465:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 466:Src/main.c    **** 
 467:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 468:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 469:Src/main.c    **** 
 470:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 471:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 472:Src/main.c    **** 
 473:Src/main.c    ****   HAL_ADC_MspInit(&hadc);
 474:Src/main.c    **** }
 475:Src/main.c    **** 
 476:Src/main.c    **** static void MX_I2C1_Init(void)
 477:Src/main.c    **** {
 478:Src/main.c    **** 
 479:Src/main.c    ****   hi2c1.Instance = I2C1;
 480:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 481:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 482:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 483:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 484:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 485:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 486:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 487:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 488:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 489:Src/main.c    **** 
 490:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
ARM GAS  /tmp/ccIZXVel.s 			page 10


 491:Src/main.c    **** 
 492:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 493:Src/main.c    **** }
 494:Src/main.c    **** 
 495:Src/main.c    **** static void MX_I2C2_Init(void)
 496:Src/main.c    **** {
 497:Src/main.c    **** 
 498:Src/main.c    ****   hi2c2.Instance = I2C2;
 499:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 500:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 501:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 502:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 503:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 504:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 505:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 506:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 507:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 508:Src/main.c    **** 
 509:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 510:Src/main.c    **** 
 511:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 512:Src/main.c    **** }
 513:Src/main.c    **** 
 514:Src/main.c    **** static void MX_IWDG_Init(void)
 515:Src/main.c    **** {
 516:Src/main.c    ****   hiwdg.Instance = IWDG;
 517:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 518:Src/main.c    ****   hiwdg.Init.Window = 4095;
 519:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 520:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 521:Src/main.c    **** }
 522:Src/main.c    **** 
 523:Src/main.c    **** static void TIM3_Init(void)
 524:Src/main.c    **** {
 525:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 526:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 527:Src/main.c    **** 
 528:Src/main.c    ****   /*
 529:Src/main.c    ****        + Period = 10000 - 1
 530:Src/main.c    ****        + Prescaler = ((8000000/2)/10000) - 1
 531:Src/main.c    **** 
 532:Src/main.c    ****   */
 533:Src/main.c    ****   htim3.Instance = TIM3;
 534:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 535:Src/main.c    ****   htim3.Init.Prescaler = 399;
 536:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 537:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 538:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 539:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 540:Src/main.c    ****   {
 541:Src/main.c    ****     /* Initialization Error */
 542:Src/main.c    ****     Error_Handler();
 543:Src/main.c    ****   }
 544:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 545:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 546:Src/main.c    **** }
 547:Src/main.c    **** 
ARM GAS  /tmp/ccIZXVel.s 			page 11


 548:Src/main.c    **** static void MX_TIM1_Init(void)
 549:Src/main.c    **** {
 550:Src/main.c    **** 
 551:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 552:Src/main.c    **** 
 553:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 554:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 555:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 556:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 557:Src/main.c    **** 
 558:Src/main.c    ****   htim1.Instance = TIM1;
 559:Src/main.c    ****   htim1.Init.Prescaler = 8; // 2048
 560:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 561:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 562:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 563:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 564:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 565:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 566:Src/main.c    **** 
 567:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 568:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 569:Src/main.c    **** 
 570:Src/main.c    ****   HAL_TIM_PWM_Init(&htim1);
 571:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 572:Src/main.c    **** 
 573:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 574:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 575:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 576:Src/main.c    **** 
 577:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 578:Src/main.c    ****   sConfigOC.Pulse = 0;
 579:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 580:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 581:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 582:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 583:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 584:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 585:Src/main.c    **** 
 586:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 587:Src/main.c    ****   sConfigOC.Pulse = 10;
 588:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 589:Src/main.c    **** 
 590:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 591:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 592:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 593:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 594:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 595:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 596:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 597:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 598:Src/main.c    **** 
 599:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 600:Src/main.c    **** }
 601:Src/main.c    **** /*
 602:Src/main.c    **** static void MX_TIM2_Init(void)
 603:Src/main.c    **** {
 604:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
ARM GAS  /tmp/ccIZXVel.s 			page 12


 605:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 606:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 607:Src/main.c    **** 
 608:Src/main.c    ****   htim2.Instance = TIM2;
 609:Src/main.c    ****   htim2.Init.Prescaler = 2096;
 610:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 611:Src/main.c    ****   htim2.Init.Period = 4096;
 612:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 613:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 614:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 615:Src/main.c    **** 
 616:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 617:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 618:Src/main.c    **** 
 619:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 620:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 621:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 622:Src/main.c    **** 
 623:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 624:Src/main.c    ****   sConfigOC.Pulse = 30;
 625:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 626:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 627:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 628:Src/main.c    **** 
 629:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 630:Src/main.c    **** 
 631:Src/main.c    **** }
 632:Src/main.c    **** */
 633:Src/main.c    **** 
 634:Src/main.c    **** static void MX_DMA_Init(void)
 635:Src/main.c    **** {
 636:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 637:Src/main.c    **** 
 638:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 639:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 640:Src/main.c    **** 
 641:Src/main.c    ****   HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 642:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 643:Src/main.c    ****   /*
 644:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 645:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 646:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 647:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 648:Src/main.c    ****   */
 649:Src/main.c    **** 
 650:Src/main.c    **** }
 651:Src/main.c    **** 
 652:Src/main.c    **** static void MX_GPIO_Init(void)
 653:Src/main.c    **** {
  25              		.loc 1 653 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
ARM GAS  /tmp/ccIZXVel.s 			page 13


  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
 654:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 654 0
  39 0004 1022     		movs	r2, #16
  40 0006 0021     		movs	r1, #0
  41 0008 04A8     		add	r0, sp, #16
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
  44              	.LBB8:
 655:Src/main.c    **** 
 656:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  45              		.loc 1 656 0
  46 000e 1D4B     		ldr	r3, .L2
  47 0010 5969     		ldr	r1, [r3, #20]
  48 0012 8020     		movs	r0, #128
  49 0014 8002     		lsls	r0, r0, #10
  50 0016 0143     		orrs	r1, r0
  51 0018 5961     		str	r1, [r3, #20]
  52 001a 5A69     		ldr	r2, [r3, #20]
  53 001c 0240     		ands	r2, r0
  54 001e 0092     		str	r2, [sp]
  55 0020 009A     		ldr	r2, [sp]
  56              	.LBE8:
  57              	.LBB9:
 657:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  58              		.loc 1 657 0
  59 0022 5969     		ldr	r1, [r3, #20]
  60 0024 8020     		movs	r0, #128
  61 0026 C002     		lsls	r0, r0, #11
  62 0028 0143     		orrs	r1, r0
  63 002a 5961     		str	r1, [r3, #20]
  64 002c 5A69     		ldr	r2, [r3, #20]
  65 002e 0240     		ands	r2, r0
  66 0030 0192     		str	r2, [sp, #4]
  67 0032 019A     		ldr	r2, [sp, #4]
  68              	.LBE9:
  69              	.LBB10:
 658:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  70              		.loc 1 658 0
  71 0034 5A69     		ldr	r2, [r3, #20]
  72 0036 8021     		movs	r1, #128
  73 0038 0903     		lsls	r1, r1, #12
  74 003a 0A43     		orrs	r2, r1
  75 003c 5A61     		str	r2, [r3, #20]
  76 003e 5B69     		ldr	r3, [r3, #20]
  77 0040 0B40     		ands	r3, r1
  78 0042 0293     		str	r3, [sp, #8]
  79 0044 029B     		ldr	r3, [sp, #8]
  80              	.LBE10:
 659:Src/main.c    **** 
 660:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  81              		.loc 1 660 0
  82 0046 1823     		movs	r3, #24
ARM GAS  /tmp/ccIZXVel.s 			page 14


  83 0048 0393     		str	r3, [sp, #12]
 661:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 662:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  84              		.loc 1 662 0
  85 004a 0225     		movs	r5, #2
  86 004c 0595     		str	r5, [sp, #20]
 663:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  87              		.loc 1 663 0
  88 004e 9020     		movs	r0, #144
  89 0050 03A9     		add	r1, sp, #12
  90 0052 C005     		lsls	r0, r0, #23
  91 0054 FFF7FEFF 		bl	HAL_GPIO_Init
  92              	.LVL1:
 664:Src/main.c    **** 
 665:Src/main.c    ****   GPIO_InitStruct.Pin = B1_1_Pin;
  93              		.loc 1 665 0
  94 0058 8023     		movs	r3, #128
  95 005a 9B01     		lsls	r3, r3, #6
  96 005c 0393     		str	r3, [sp, #12]
 666:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  97              		.loc 1 666 0
  98 005e 0024     		movs	r4, #0
  99 0060 0494     		str	r4, [sp, #16]
 667:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 100              		.loc 1 667 0
 101 0062 0595     		str	r5, [sp, #20]
 668:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 102              		.loc 1 668 0
 103 0064 03A9     		add	r1, sp, #12
 104 0066 0848     		ldr	r0, .L2+4
 105 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL2:
 669:Src/main.c    **** 
 670:Src/main.c    **** 
 671:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
 107              		.loc 1 671 0
 108 006c 8023     		movs	r3, #128
 109 006e 5B01     		lsls	r3, r3, #5
 110 0070 0393     		str	r3, [sp, #12]
 672:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 111              		.loc 1 672 0
 112 0072 0494     		str	r4, [sp, #16]
 673:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 673 0
 114 0074 0594     		str	r4, [sp, #20]
 674:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 115              		.loc 1 674 0
 116 0076 03A9     		add	r1, sp, #12
 117 0078 0448     		ldr	r0, .L2+8
 118 007a FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL3:
 675:Src/main.c    **** 
 676:Src/main.c    **** }
 120              		.loc 1 676 0
 121 007e 09B0     		add	sp, sp, #36
 122              		@ sp needed
 123 0080 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccIZXVel.s 			page 15


 124              	.L3:
 125 0082 C046     		.align	2
 126              	.L2:
 127 0084 00100240 		.word	1073876992
 128 0088 00080048 		.word	1207961600
 129 008c 00040048 		.word	1207960576
 130              		.cfi_endproc
 131              	.LFE57:
 133              		.section	.text.MX_DMA_Init,"ax",%progbits
 134              		.align	1
 135              		.syntax unified
 136              		.code	16
 137              		.thumb_func
 138              		.fpu softvfp
 140              	MX_DMA_Init:
 141              	.LFB56:
 635:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 142              		.loc 1 635 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146 0000 00B5     		push	{lr}
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 4
 149              		.cfi_offset 14, -4
 150 0002 83B0     		sub	sp, sp, #12
 151              	.LCFI3:
 152              		.cfi_def_cfa_offset 16
 153              	.LBB11:
 636:Src/main.c    **** 
 154              		.loc 1 636 0
 155 0004 0D4A     		ldr	r2, .L5
 156 0006 5169     		ldr	r1, [r2, #20]
 157 0008 0123     		movs	r3, #1
 158 000a 1943     		orrs	r1, r3
 159 000c 5161     		str	r1, [r2, #20]
 160 000e 5269     		ldr	r2, [r2, #20]
 161 0010 1340     		ands	r3, r2
 162 0012 0193     		str	r3, [sp, #4]
 163 0014 019B     		ldr	r3, [sp, #4]
 164              	.LBE11:
 638:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 165              		.loc 1 638 0
 166 0016 0022     		movs	r2, #0
 167 0018 0021     		movs	r1, #0
 168 001a 0920     		movs	r0, #9
 169 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 170              	.LVL4:
 639:Src/main.c    **** 
 171              		.loc 1 639 0
 172 0020 0920     		movs	r0, #9
 173 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 174              	.LVL5:
 641:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 175              		.loc 1 641 0
 176 0026 0022     		movs	r2, #0
 177 0028 0021     		movs	r1, #0
ARM GAS  /tmp/ccIZXVel.s 			page 16


 178 002a 1020     		movs	r0, #16
 179 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 180              	.LVL6:
 642:Src/main.c    ****   /*
 181              		.loc 1 642 0
 182 0030 1020     		movs	r0, #16
 183 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 184              	.LVL7:
 650:Src/main.c    **** 
 185              		.loc 1 650 0
 186 0036 03B0     		add	sp, sp, #12
 187              		@ sp needed
 188 0038 00BD     		pop	{pc}
 189              	.L6:
 190 003a C046     		.align	2
 191              	.L5:
 192 003c 00100240 		.word	1073876992
 193              		.cfi_endproc
 194              	.LFE56:
 196              		.section	.text.MX_ADC_Init,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.code	16
 200              		.thumb_func
 201              		.fpu softvfp
 203              	MX_ADC_Init:
 204              	.LFB50:
 437:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 205              		.loc 1 437 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 24
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 70B5     		push	{r4, r5, r6, lr}
 210              	.LCFI4:
 211              		.cfi_def_cfa_offset 16
 212              		.cfi_offset 4, -16
 213              		.cfi_offset 5, -12
 214              		.cfi_offset 6, -8
 215              		.cfi_offset 14, -4
 216 0002 86B0     		sub	sp, sp, #24
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 40
 219              	.LBB12:
 438:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 220              		.loc 1 438 0
 221 0004 274B     		ldr	r3, .L8
 222 0006 5A69     		ldr	r2, [r3, #20]
 223 0008 0126     		movs	r6, #1
 224 000a 3243     		orrs	r2, r6
 225 000c 5A61     		str	r2, [r3, #20]
 226 000e 5A69     		ldr	r2, [r3, #20]
 227 0010 3240     		ands	r2, r6
 228 0012 0192     		str	r2, [sp, #4]
 229 0014 019A     		ldr	r2, [sp, #4]
 230              	.LBE12:
 231              	.LBB13:
 439:Src/main.c    **** 
ARM GAS  /tmp/ccIZXVel.s 			page 17


 232              		.loc 1 439 0
 233 0016 9A69     		ldr	r2, [r3, #24]
 234 0018 8021     		movs	r1, #128
 235 001a 8900     		lsls	r1, r1, #2
 236 001c 0A43     		orrs	r2, r1
 237 001e 9A61     		str	r2, [r3, #24]
 238 0020 9B69     		ldr	r3, [r3, #24]
 239 0022 0B40     		ands	r3, r1
 240 0024 0293     		str	r3, [sp, #8]
 241 0026 029B     		ldr	r3, [sp, #8]
 242              	.LBE13:
 441:Src/main.c    **** 
 243              		.loc 1 441 0
 244 0028 0C22     		movs	r2, #12
 245 002a 0021     		movs	r1, #0
 246 002c 03A8     		add	r0, sp, #12
 247 002e FFF7FEFF 		bl	memset
 248              	.LVL8:
 443:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 249              		.loc 1 443 0
 250 0032 1D4C     		ldr	r4, .L8+4
 251 0034 1D4B     		ldr	r3, .L8+8
 252 0036 2360     		str	r3, [r4]
 444:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 253              		.loc 1 444 0
 254 0038 0025     		movs	r5, #0
 255 003a 6560     		str	r5, [r4, #4]
 445:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 256              		.loc 1 445 0
 257 003c A560     		str	r5, [r4, #8]
 446:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 258              		.loc 1 446 0
 259 003e E560     		str	r5, [r4, #12]
 447:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 260              		.loc 1 447 0
 261 0040 2661     		str	r6, [r4, #16]
 448:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 262              		.loc 1 448 0
 263 0042 0823     		movs	r3, #8
 264 0044 6361     		str	r3, [r4, #20]
 449:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 265              		.loc 1 449 0
 266 0046 A561     		str	r5, [r4, #24]
 450:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 267              		.loc 1 450 0
 268 0048 E561     		str	r5, [r4, #28]
 451:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 269              		.loc 1 451 0
 270 004a 2562     		str	r5, [r4, #32]
 452:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 271              		.loc 1 452 0
 272 004c 6562     		str	r5, [r4, #36]
 453:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 273              		.loc 1 453 0
 274 004e 3833     		adds	r3, r3, #56
 275 0050 A362     		str	r3, [r4, #40]
 454:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
ARM GAS  /tmp/ccIZXVel.s 			page 18


 276              		.loc 1 454 0
 277 0052 8023     		movs	r3, #128
 278 0054 DB00     		lsls	r3, r3, #3
 279 0056 E362     		str	r3, [r4, #44]
 455:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 280              		.loc 1 455 0
 281 0058 2663     		str	r6, [r4, #48]
 456:Src/main.c    ****   HAL_ADC_Init(&hadc);
 282              		.loc 1 456 0
 283 005a 6663     		str	r6, [r4, #52]
 457:Src/main.c    **** 
 284              		.loc 1 457 0
 285 005c 2000     		movs	r0, r4
 286 005e FFF7FEFF 		bl	HAL_ADC_Init
 287              	.LVL9:
 459:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 288              		.loc 1 459 0
 289 0062 0395     		str	r5, [sp, #12]
 460:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 290              		.loc 1 460 0
 291 0064 8023     		movs	r3, #128
 292 0066 5B01     		lsls	r3, r3, #5
 293 0068 0493     		str	r3, [sp, #16]
 461:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 294              		.loc 1 461 0
 295 006a 0623     		movs	r3, #6
 296 006c 0593     		str	r3, [sp, #20]
 462:Src/main.c    **** 
 297              		.loc 1 462 0
 298 006e 03A9     		add	r1, sp, #12
 299 0070 2000     		movs	r0, r4
 300 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 301              	.LVL10:
 464:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 302              		.loc 1 464 0
 303 0076 0396     		str	r6, [sp, #12]
 465:Src/main.c    **** 
 304              		.loc 1 465 0
 305 0078 03A9     		add	r1, sp, #12
 306 007a 2000     		movs	r0, r4
 307 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 308              	.LVL11:
 467:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 309              		.loc 1 467 0
 310 0080 0223     		movs	r3, #2
 311 0082 0393     		str	r3, [sp, #12]
 468:Src/main.c    **** 
 312              		.loc 1 468 0
 313 0084 03A9     		add	r1, sp, #12
 314 0086 2000     		movs	r0, r4
 315 0088 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 316              	.LVL12:
 470:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 317              		.loc 1 470 0
 318 008c 0523     		movs	r3, #5
 319 008e 0393     		str	r3, [sp, #12]
 471:Src/main.c    **** 
ARM GAS  /tmp/ccIZXVel.s 			page 19


 320              		.loc 1 471 0
 321 0090 03A9     		add	r1, sp, #12
 322 0092 2000     		movs	r0, r4
 323 0094 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 324              	.LVL13:
 473:Src/main.c    **** }
 325              		.loc 1 473 0
 326 0098 2000     		movs	r0, r4
 327 009a FFF7FEFF 		bl	HAL_ADC_MspInit
 328              	.LVL14:
 474:Src/main.c    **** 
 329              		.loc 1 474 0
 330 009e 06B0     		add	sp, sp, #24
 331              		@ sp needed
 332 00a0 70BD     		pop	{r4, r5, r6, pc}
 333              	.L9:
 334 00a2 C046     		.align	2
 335              	.L8:
 336 00a4 00100240 		.word	1073876992
 337 00a8 00000000 		.word	hadc
 338 00ac 00240140 		.word	1073816576
 339              		.cfi_endproc
 340              	.LFE50:
 342              		.section	.text.MX_I2C1_Init,"ax",%progbits
 343              		.align	1
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 347              		.fpu softvfp
 349              	MX_I2C1_Init:
 350              	.LFB51:
 477:Src/main.c    **** 
 351              		.loc 1 477 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355 0000 10B5     		push	{r4, lr}
 356              	.LCFI6:
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 4, -8
 359              		.cfi_offset 14, -4
 479:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 360              		.loc 1 479 0
 361 0002 0D4C     		ldr	r4, .L11
 362 0004 0D4B     		ldr	r3, .L11+4
 363 0006 2360     		str	r3, [r4]
 480:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 364              		.loc 1 480 0
 365 0008 0D4B     		ldr	r3, .L11+8
 366 000a 6360     		str	r3, [r4, #4]
 481:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 367              		.loc 1 481 0
 368 000c 0023     		movs	r3, #0
 369 000e A360     		str	r3, [r4, #8]
 482:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 370              		.loc 1 482 0
 371 0010 0122     		movs	r2, #1
ARM GAS  /tmp/ccIZXVel.s 			page 20


 372 0012 E260     		str	r2, [r4, #12]
 483:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 373              		.loc 1 483 0
 374 0014 2361     		str	r3, [r4, #16]
 484:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 375              		.loc 1 484 0
 376 0016 6361     		str	r3, [r4, #20]
 485:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 377              		.loc 1 485 0
 378 0018 A361     		str	r3, [r4, #24]
 486:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 379              		.loc 1 486 0
 380 001a E361     		str	r3, [r4, #28]
 487:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 381              		.loc 1 487 0
 382 001c 2362     		str	r3, [r4, #32]
 488:Src/main.c    **** 
 383              		.loc 1 488 0
 384 001e 2000     		movs	r0, r4
 385 0020 FFF7FEFF 		bl	HAL_I2C_Init
 386              	.LVL15:
 490:Src/main.c    **** 
 387              		.loc 1 490 0
 388 0024 0021     		movs	r1, #0
 389 0026 2000     		movs	r0, r4
 390 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 391              	.LVL16:
 492:Src/main.c    **** }
 392              		.loc 1 492 0
 393 002c 0021     		movs	r1, #0
 394 002e 2000     		movs	r0, r4
 395 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 396              	.LVL17:
 493:Src/main.c    **** 
 397              		.loc 1 493 0
 398              		@ sp needed
 399 0034 10BD     		pop	{r4, pc}
 400              	.L12:
 401 0036 C046     		.align	2
 402              	.L11:
 403 0038 00000000 		.word	hi2c1
 404 003c 00540040 		.word	1073763328
 405 0040 0E090020 		.word	536873230
 406              		.cfi_endproc
 407              	.LFE51:
 409              		.section	.text.MX_I2C2_Init,"ax",%progbits
 410              		.align	1
 411              		.syntax unified
 412              		.code	16
 413              		.thumb_func
 414              		.fpu softvfp
 416              	MX_I2C2_Init:
 417              	.LFB52:
 496:Src/main.c    **** 
 418              		.loc 1 496 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccIZXVel.s 			page 21


 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422 0000 10B5     		push	{r4, lr}
 423              	.LCFI7:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 4, -8
 426              		.cfi_offset 14, -4
 498:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 427              		.loc 1 498 0
 428 0002 0D4C     		ldr	r4, .L14
 429 0004 0D4B     		ldr	r3, .L14+4
 430 0006 2360     		str	r3, [r4]
 499:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 431              		.loc 1 499 0
 432 0008 0D4B     		ldr	r3, .L14+8
 433 000a 6360     		str	r3, [r4, #4]
 500:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 434              		.loc 1 500 0
 435 000c 0023     		movs	r3, #0
 436 000e A360     		str	r3, [r4, #8]
 501:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 437              		.loc 1 501 0
 438 0010 0122     		movs	r2, #1
 439 0012 E260     		str	r2, [r4, #12]
 502:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 440              		.loc 1 502 0
 441 0014 2361     		str	r3, [r4, #16]
 503:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 442              		.loc 1 503 0
 443 0016 6361     		str	r3, [r4, #20]
 504:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 444              		.loc 1 504 0
 445 0018 A361     		str	r3, [r4, #24]
 505:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 446              		.loc 1 505 0
 447 001a E361     		str	r3, [r4, #28]
 506:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 448              		.loc 1 506 0
 449 001c 2362     		str	r3, [r4, #32]
 507:Src/main.c    **** 
 450              		.loc 1 507 0
 451 001e 2000     		movs	r0, r4
 452 0020 FFF7FEFF 		bl	HAL_I2C_Init
 453              	.LVL18:
 509:Src/main.c    **** 
 454              		.loc 1 509 0
 455 0024 0021     		movs	r1, #0
 456 0026 2000     		movs	r0, r4
 457 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 458              	.LVL19:
 511:Src/main.c    **** }
 459              		.loc 1 511 0
 460 002c 0021     		movs	r1, #0
 461 002e 2000     		movs	r0, r4
 462 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 463              	.LVL20:
 512:Src/main.c    **** 
 464              		.loc 1 512 0
ARM GAS  /tmp/ccIZXVel.s 			page 22


 465              		@ sp needed
 466 0034 10BD     		pop	{r4, pc}
 467              	.L15:
 468 0036 C046     		.align	2
 469              	.L14:
 470 0038 00000000 		.word	hi2c2
 471 003c 00580040 		.word	1073764352
 472 0040 5D3E3020 		.word	540032605
 473              		.cfi_endproc
 474              	.LFE52:
 476              		.section	.text.TIM3_Init,"ax",%progbits
 477              		.align	1
 478              		.syntax unified
 479              		.code	16
 480              		.thumb_func
 481              		.fpu softvfp
 483              	TIM3_Init:
 484              	.LFB54:
 524:Src/main.c    ****   __HAL_RCC_TIM3_CLK_ENABLE();
 485              		.loc 1 524 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 24
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 10B5     		push	{r4, lr}
 490              	.LCFI8:
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 4, -8
 493              		.cfi_offset 14, -4
 494 0002 86B0     		sub	sp, sp, #24
 495              	.LCFI9:
 496              		.cfi_def_cfa_offset 32
 497              	.LBB14:
 525:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 498              		.loc 1 525 0
 499 0004 124A     		ldr	r2, .L17
 500 0006 D169     		ldr	r1, [r2, #28]
 501 0008 0223     		movs	r3, #2
 502 000a 1943     		orrs	r1, r3
 503 000c D161     		str	r1, [r2, #28]
 504 000e D269     		ldr	r2, [r2, #28]
 505 0010 1340     		ands	r3, r2
 506 0012 0193     		str	r3, [sp, #4]
 507 0014 019B     		ldr	r3, [sp, #4]
 508              	.LBE14:
 526:Src/main.c    **** 
 509              		.loc 1 526 0
 510 0016 1022     		movs	r2, #16
 511 0018 0021     		movs	r1, #0
 512 001a 02A8     		add	r0, sp, #8
 513 001c FFF7FEFF 		bl	memset
 514              	.LVL21:
 533:Src/main.c    ****   htim3.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 515              		.loc 1 533 0
 516 0020 0C4C     		ldr	r4, .L17+4
 517 0022 0D4B     		ldr	r3, .L17+8
 518 0024 2360     		str	r3, [r4]
 534:Src/main.c    ****   htim3.Init.Prescaler = 399;
ARM GAS  /tmp/ccIZXVel.s 			page 23


 519              		.loc 1 534 0
 520 0026 0D4B     		ldr	r3, .L17+12
 521 0028 E360     		str	r3, [r4, #12]
 535:Src/main.c    ****   htim3.Init.ClockDivision = 0;
 522              		.loc 1 535 0
 523 002a 9023     		movs	r3, #144
 524 002c FF33     		adds	r3, r3, #255
 525 002e 6360     		str	r3, [r4, #4]
 536:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 526              		.loc 1 536 0
 527 0030 0023     		movs	r3, #0
 528 0032 2361     		str	r3, [r4, #16]
 537:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 529              		.loc 1 537 0
 530 0034 A360     		str	r3, [r4, #8]
 538:Src/main.c    ****   if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 531              		.loc 1 538 0
 532 0036 A361     		str	r3, [r4, #24]
 539:Src/main.c    ****   {
 533              		.loc 1 539 0
 534 0038 2000     		movs	r0, r4
 535 003a FFF7FEFF 		bl	HAL_TIM_Base_Init
 536              	.LVL22:
 544:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 537              		.loc 1 544 0
 538 003e 8023     		movs	r3, #128
 539 0040 5B01     		lsls	r3, r3, #5
 540 0042 0293     		str	r3, [sp, #8]
 545:Src/main.c    **** }
 541              		.loc 1 545 0
 542 0044 02A9     		add	r1, sp, #8
 543 0046 2000     		movs	r0, r4
 544 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 545              	.LVL23:
 546:Src/main.c    **** 
 546              		.loc 1 546 0
 547 004c 06B0     		add	sp, sp, #24
 548              		@ sp needed
 549 004e 10BD     		pop	{r4, pc}
 550              	.L18:
 551              		.align	2
 552              	.L17:
 553 0050 00100240 		.word	1073876992
 554 0054 00000000 		.word	htim3
 555 0058 00040040 		.word	1073742848
 556 005c 0F270000 		.word	9999
 557              		.cfi_endproc
 558              	.LFE54:
 560              		.section	.text.MX_TIM1_Init,"ax",%progbits
 561              		.align	1
 562              		.syntax unified
 563              		.code	16
 564              		.thumb_func
 565              		.fpu softvfp
 567              	MX_TIM1_Init:
 568              	.LFB55:
 549:Src/main.c    **** 
ARM GAS  /tmp/ccIZXVel.s 			page 24


 569              		.loc 1 549 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 88
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573 0000 70B5     		push	{r4, r5, r6, lr}
 574              	.LCFI10:
 575              		.cfi_def_cfa_offset 16
 576              		.cfi_offset 4, -16
 577              		.cfi_offset 5, -12
 578              		.cfi_offset 6, -8
 579              		.cfi_offset 14, -4
 580 0002 96B0     		sub	sp, sp, #88
 581              	.LCFI11:
 582              		.cfi_def_cfa_offset 104
 583              	.LBB15:
 551:Src/main.c    **** 
 584              		.loc 1 551 0
 585 0004 334A     		ldr	r2, .L20
 586 0006 9169     		ldr	r1, [r2, #24]
 587 0008 8020     		movs	r0, #128
 588 000a 0001     		lsls	r0, r0, #4
 589 000c 0143     		orrs	r1, r0
 590 000e 9161     		str	r1, [r2, #24]
 591 0010 9369     		ldr	r3, [r2, #24]
 592 0012 0340     		ands	r3, r0
 593 0014 0193     		str	r3, [sp, #4]
 594 0016 019B     		ldr	r3, [sp, #4]
 595              	.LBE15:
 553:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 596              		.loc 1 553 0
 597 0018 1022     		movs	r2, #16
 598 001a 0021     		movs	r1, #0
 599 001c 12A8     		add	r0, sp, #72
 600 001e FFF7FEFF 		bl	memset
 601              	.LVL24:
 554:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 602              		.loc 1 554 0
 603 0022 0822     		movs	r2, #8
 604 0024 0021     		movs	r1, #0
 605 0026 10A8     		add	r0, sp, #64
 606 0028 FFF7FEFF 		bl	memset
 607              	.LVL25:
 555:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 608              		.loc 1 555 0
 609 002c 1C22     		movs	r2, #28
 610 002e 0021     		movs	r1, #0
 611 0030 09A8     		add	r0, sp, #36
 612 0032 FFF7FEFF 		bl	memset
 613              	.LVL26:
 556:Src/main.c    **** 
 614              		.loc 1 556 0
 615 0036 1C22     		movs	r2, #28
 616 0038 0021     		movs	r1, #0
 617 003a 02A8     		add	r0, sp, #8
 618 003c FFF7FEFF 		bl	memset
 619              	.LVL27:
 558:Src/main.c    ****   htim1.Init.Prescaler = 8; // 2048
ARM GAS  /tmp/ccIZXVel.s 			page 25


 620              		.loc 1 558 0
 621 0040 254D     		ldr	r5, .L20+4
 622 0042 264B     		ldr	r3, .L20+8
 623 0044 2B60     		str	r3, [r5]
 559:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 624              		.loc 1 559 0
 625 0046 0823     		movs	r3, #8
 626 0048 6B60     		str	r3, [r5, #4]
 560:Src/main.c    ****   htim1.Init.Period = 4096; // 4096
 627              		.loc 1 560 0
 628 004a 0024     		movs	r4, #0
 629 004c AC60     		str	r4, [r5, #8]
 561:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 630              		.loc 1 561 0
 631 004e 8026     		movs	r6, #128
 632 0050 7601     		lsls	r6, r6, #5
 633 0052 EE60     		str	r6, [r5, #12]
 562:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 634              		.loc 1 562 0
 635 0054 2C61     		str	r4, [r5, #16]
 563:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 636              		.loc 1 563 0
 637 0056 6C61     		str	r4, [r5, #20]
 564:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 638              		.loc 1 564 0
 639 0058 7833     		adds	r3, r3, #120
 640 005a AB61     		str	r3, [r5, #24]
 565:Src/main.c    **** 
 641              		.loc 1 565 0
 642 005c 2800     		movs	r0, r5
 643 005e FFF7FEFF 		bl	HAL_TIM_Base_Init
 644              	.LVL28:
 567:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 645              		.loc 1 567 0
 646 0062 1296     		str	r6, [sp, #72]
 568:Src/main.c    **** 
 647              		.loc 1 568 0
 648 0064 12A9     		add	r1, sp, #72
 649 0066 2800     		movs	r0, r5
 650 0068 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 651              	.LVL29:
 570:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 652              		.loc 1 570 0
 653 006c 2800     		movs	r0, r5
 654 006e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 655              	.LVL30:
 571:Src/main.c    **** 
 656              		.loc 1 571 0
 657 0072 2800     		movs	r0, r5
 658 0074 FFF7FEFF 		bl	HAL_TIM_OC_Init
 659              	.LVL31:
 573:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 660              		.loc 1 573 0
 661 0078 1094     		str	r4, [sp, #64]
 574:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 662              		.loc 1 574 0
 663 007a 1194     		str	r4, [sp, #68]
ARM GAS  /tmp/ccIZXVel.s 			page 26


 575:Src/main.c    **** 
 664              		.loc 1 575 0
 665 007c 10A9     		add	r1, sp, #64
 666 007e 2800     		movs	r0, r5
 667 0080 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 668              	.LVL32:
 577:Src/main.c    ****   sConfigOC.Pulse = 0;
 669              		.loc 1 577 0
 670 0084 6023     		movs	r3, #96
 671 0086 0993     		str	r3, [sp, #36]
 578:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 672              		.loc 1 578 0
 673 0088 0A94     		str	r4, [sp, #40]
 579:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 674              		.loc 1 579 0
 675 008a 0B94     		str	r4, [sp, #44]
 580:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 676              		.loc 1 580 0
 677 008c 0C94     		str	r4, [sp, #48]
 581:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 678              		.loc 1 581 0
 679 008e 0D94     		str	r4, [sp, #52]
 582:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 680              		.loc 1 582 0
 681 0090 0E94     		str	r4, [sp, #56]
 583:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 682              		.loc 1 583 0
 683 0092 0F94     		str	r4, [sp, #60]
 584:Src/main.c    **** 
 684              		.loc 1 584 0
 685 0094 0022     		movs	r2, #0
 686 0096 09A9     		add	r1, sp, #36
 687 0098 2800     		movs	r0, r5
 688 009a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 689              	.LVL33:
 586:Src/main.c    ****   sConfigOC.Pulse = 10;
 690              		.loc 1 586 0
 691 009e 7023     		movs	r3, #112
 692 00a0 0993     		str	r3, [sp, #36]
 587:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 693              		.loc 1 587 0
 694 00a2 663B     		subs	r3, r3, #102
 695 00a4 0A93     		str	r3, [sp, #40]
 588:Src/main.c    **** 
 696              		.loc 1 588 0
 697 00a6 0C22     		movs	r2, #12
 698 00a8 09A9     		add	r1, sp, #36
 699 00aa 2800     		movs	r0, r5
 700 00ac FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 701              	.LVL34:
 590:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 702              		.loc 1 590 0
 703 00b0 0294     		str	r4, [sp, #8]
 591:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 704              		.loc 1 591 0
 705 00b2 0394     		str	r4, [sp, #12]
 592:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
ARM GAS  /tmp/ccIZXVel.s 			page 27


 706              		.loc 1 592 0
 707 00b4 0494     		str	r4, [sp, #16]
 593:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 708              		.loc 1 593 0
 709 00b6 0594     		str	r4, [sp, #20]
 594:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 710              		.loc 1 594 0
 711 00b8 0694     		str	r4, [sp, #24]
 595:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 712              		.loc 1 595 0
 713 00ba 8023     		movs	r3, #128
 714 00bc 9B01     		lsls	r3, r3, #6
 715 00be 0793     		str	r3, [sp, #28]
 596:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 716              		.loc 1 596 0
 717 00c0 0894     		str	r4, [sp, #32]
 597:Src/main.c    **** 
 718              		.loc 1 597 0
 719 00c2 02A9     		add	r1, sp, #8
 720 00c4 2800     		movs	r0, r5
 721 00c6 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 722              	.LVL35:
 599:Src/main.c    **** }
 723              		.loc 1 599 0
 724 00ca 2800     		movs	r0, r5
 725 00cc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 726              	.LVL36:
 600:Src/main.c    **** /*
 727              		.loc 1 600 0
 728 00d0 16B0     		add	sp, sp, #88
 729              		@ sp needed
 730 00d2 70BD     		pop	{r4, r5, r6, pc}
 731              	.L21:
 732              		.align	2
 733              	.L20:
 734 00d4 00100240 		.word	1073876992
 735 00d8 00000000 		.word	htim1
 736 00dc 002C0140 		.word	1073818624
 737              		.cfi_endproc
 738              	.LFE55:
 740              		.section	.text.MX_IWDG_Init,"ax",%progbits
 741              		.align	1
 742              		.syntax unified
 743              		.code	16
 744              		.thumb_func
 745              		.fpu softvfp
 747              	MX_IWDG_Init:
 748              	.LFB53:
 515:Src/main.c    ****   hiwdg.Instance = IWDG;
 749              		.loc 1 515 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753 0000 10B5     		push	{r4, lr}
 754              	.LCFI12:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 4, -8
ARM GAS  /tmp/ccIZXVel.s 			page 28


 757              		.cfi_offset 14, -4
 516:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 758              		.loc 1 516 0
 759 0002 0548     		ldr	r0, .L23
 760 0004 054B     		ldr	r3, .L23+4
 761 0006 0360     		str	r3, [r0]
 517:Src/main.c    ****   hiwdg.Init.Window = 4095;
 762              		.loc 1 517 0
 763 0008 0023     		movs	r3, #0
 764 000a 4360     		str	r3, [r0, #4]
 518:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 765              		.loc 1 518 0
 766 000c 044B     		ldr	r3, .L23+8
 767 000e C360     		str	r3, [r0, #12]
 519:Src/main.c    ****   HAL_IWDG_Init(&hiwdg);
 768              		.loc 1 519 0
 769 0010 8360     		str	r3, [r0, #8]
 520:Src/main.c    **** }
 770              		.loc 1 520 0
 771 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 772              	.LVL37:
 521:Src/main.c    **** 
 773              		.loc 1 521 0
 774              		@ sp needed
 775 0016 10BD     		pop	{r4, pc}
 776              	.L24:
 777              		.align	2
 778              	.L23:
 779 0018 00000000 		.word	hiwdg
 780 001c 00300040 		.word	1073754112
 781 0020 FF0F0000 		.word	4095
 782              		.cfi_endproc
 783              	.LFE53:
 785              		.global	__aeabi_ui2f
 786              		.global	__aeabi_f2d
 787              		.global	__aeabi_ddiv
 788              		.global	__aeabi_dmul
 789              		.global	__aeabi_dsub
 790              		.global	__aeabi_d2f
 791              		.global	__aeabi_i2f
 792              		.global	__aeabi_fsub
 793              		.global	__aeabi_fmul
 794              		.global	__aeabi_fdiv
 795              		.global	__aeabi_fadd
 796              		.global	__aeabi_i2d
 797              		.global	__aeabi_dadd
 798              		.global	__aeabi_fcmpge
 799              		.global	__aeabi_fcmple
 800              		.global	__aeabi_fcmpgt
 801              		.global	__aeabi_fcmplt
 802              		.global	__aeabi_f2iz
 803              		.section	.text.reg,"ax",%progbits
 804              		.align	1
 805              		.global	reg
 806              		.syntax unified
 807              		.code	16
 808              		.thumb_func
ARM GAS  /tmp/ccIZXVel.s 			page 29


 809              		.fpu softvfp
 811              	reg:
 812              	.LFB38:
 245:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 813              		.loc 1 245 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 8
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 818              	.LCFI13:
 819              		.cfi_def_cfa_offset 20
 820              		.cfi_offset 4, -20
 821              		.cfi_offset 5, -16
 822              		.cfi_offset 6, -12
 823              		.cfi_offset 7, -8
 824              		.cfi_offset 14, -4
 825 0002 C646     		mov	lr, r8
 826 0004 00B5     		push	{lr}
 827              	.LCFI14:
 828              		.cfi_def_cfa_offset 24
 829              		.cfi_offset 8, -24
 830 0006 82B0     		sub	sp, sp, #8
 831              	.LCFI15:
 832              		.cfi_def_cfa_offset 32
 246:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 833              		.loc 1 246 0
 834 0008 944F     		ldr	r7, .L48
 835 000a F888     		ldrh	r0, [r7, #6]
 836 000c FFF7FEFF 		bl	__aeabi_ui2f
 837              	.LVL38:
 838 0010 FFF7FEFF 		bl	__aeabi_f2d
 839              	.LVL39:
 840 0014 0022     		movs	r2, #0
 841 0016 924B     		ldr	r3, .L48+4
 842 0018 FFF7FEFF 		bl	__aeabi_ddiv
 843              	.LVL40:
 844 001c 914A     		ldr	r2, .L48+8
 845 001e 924B     		ldr	r3, .L48+12
 846 0020 FFF7FEFF 		bl	__aeabi_dmul
 847              	.LVL41:
 848 0024 0022     		movs	r2, #0
 849 0026 914B     		ldr	r3, .L48+16
 850 0028 FFF7FEFF 		bl	__aeabi_dsub
 851              	.LVL42:
 852 002c 904A     		ldr	r2, .L48+20
 853 002e 914B     		ldr	r3, .L48+24
 854 0030 FFF7FEFF 		bl	__aeabi_ddiv
 855              	.LVL43:
 856 0034 FFF7FEFF 		bl	__aeabi_d2f
 857              	.LVL44:
 858 0038 051C     		adds	r5, r0, #0
 859 003a 8F4C     		ldr	r4, .L48+28
 860 003c A061     		str	r0, [r4, #24]
 247:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 861              		.loc 1 247 0
 862 003e 7888     		ldrh	r0, [r7, #2]
 863 0040 8E4E     		ldr	r6, .L48+32
ARM GAS  /tmp/ccIZXVel.s 			page 30


 864 0042 3368     		ldr	r3, [r6]
 865 0044 9846     		mov	r8, r3
 866 0046 FFF7FEFF 		bl	__aeabi_i2f
 867              	.LVL45:
 868 004a 4146     		mov	r1, r8
 869 004c FFF7FEFF 		bl	__aeabi_fsub
 870              	.LVL46:
 871 0050 7168     		ldr	r1, [r6, #4]
 872 0052 FFF7FEFF 		bl	__aeabi_fmul
 873              	.LVL47:
 874 0056 8A49     		ldr	r1, .L48+36
 875 0058 FFF7FEFF 		bl	__aeabi_fdiv
 876              	.LVL48:
 877 005c 011C     		adds	r1, r0, #0
 878 005e 281C     		adds	r0, r5, #0
 879 0060 FFF7FEFF 		bl	__aeabi_fadd
 880              	.LVL49:
 881 0064 051C     		adds	r5, r0, #0
 882 0066 2060     		str	r0, [r4]
 248:Src/main.c    ****   s.iin = FILT(s.iin, ((ADC_raw[0]/4095.0)*3.3*1.659)/(0.01*(2370/33)), TTIP_AVG_FILTER);
 883              		.loc 1 248 0
 884 0068 B888     		ldrh	r0, [r7, #4]
 885 006a FFF7FEFF 		bl	__aeabi_i2d
 886              	.LVL50:
 887 006e 0022     		movs	r2, #0
 888 0070 7B4B     		ldr	r3, .L48+4
 889 0072 FFF7FEFF 		bl	__aeabi_ddiv
 890              	.LVL51:
 891 0076 7B4A     		ldr	r2, .L48+8
 892 0078 7B4B     		ldr	r3, .L48+12
 893 007a FFF7FEFF 		bl	__aeabi_dmul
 894              	.LVL52:
 895 007e 794A     		ldr	r2, .L48+8
 896 0080 804B     		ldr	r3, .L48+40
 897 0082 FFF7FEFF 		bl	__aeabi_dmul
 898              	.LVL53:
 899 0086 FFF7FEFF 		bl	__aeabi_d2f
 900              	.LVL54:
 901 008a A060     		str	r0, [r4, #8]
 249:Src/main.c    **** 
 902              		.loc 1 249 0
 903 008c 7E49     		ldr	r1, .L48+44
 904 008e E068     		ldr	r0, [r4, #12]
 905 0090 FFF7FEFF 		bl	__aeabi_fmul
 906              	.LVL55:
 907 0094 FFF7FEFF 		bl	__aeabi_f2d
 908              	.LVL56:
 909 0098 0090     		str	r0, [sp]
 910 009a 0191     		str	r1, [sp, #4]
 911 009c 3888     		ldrh	r0, [r7]
 912 009e FFF7FEFF 		bl	__aeabi_i2d
 913              	.LVL57:
 914 00a2 0022     		movs	r2, #0
 915 00a4 6E4B     		ldr	r3, .L48+4
 916 00a6 FFF7FEFF 		bl	__aeabi_ddiv
 917              	.LVL58:
 918 00aa 6E4A     		ldr	r2, .L48+8
ARM GAS  /tmp/ccIZXVel.s 			page 31


 919 00ac 6E4B     		ldr	r3, .L48+12
 920 00ae FFF7FEFF 		bl	__aeabi_dmul
 921              	.LVL59:
 922 00b2 764A     		ldr	r2, .L48+48
 923 00b4 764B     		ldr	r3, .L48+52
 924 00b6 FFF7FEFF 		bl	__aeabi_dmul
 925              	.LVL60:
 926 00ba 764A     		ldr	r2, .L48+56
 927 00bc 764B     		ldr	r3, .L48+60
 928 00be FFF7FEFF 		bl	__aeabi_ddiv
 929              	.LVL61:
 930 00c2 0022     		movs	r2, #0
 931 00c4 754B     		ldr	r3, .L48+64
 932 00c6 FFF7FEFF 		bl	__aeabi_dmul
 933              	.LVL62:
 934 00ca 0200     		movs	r2, r0
 935 00cc 0B00     		movs	r3, r1
 936 00ce 0098     		ldr	r0, [sp]
 937 00d0 0199     		ldr	r1, [sp, #4]
 938 00d2 FFF7FEFF 		bl	__aeabi_dadd
 939              	.LVL63:
 940 00d6 FFF7FEFF 		bl	__aeabi_d2f
 941              	.LVL64:
 942 00da E060     		str	r0, [r4, #12]
 251:Src/main.c    **** 
 943              		.loc 1 251 0
 944 00dc 6A49     		ldr	r1, .L48+44
 945 00de 6068     		ldr	r0, [r4, #4]
 946 00e0 FFF7FEFF 		bl	__aeabi_fmul
 947              	.LVL65:
 948 00e4 061C     		adds	r6, r0, #0
 949 00e6 6E49     		ldr	r1, .L48+68
 950 00e8 281C     		adds	r0, r5, #0
 951 00ea FFF7FEFF 		bl	__aeabi_fmul
 952              	.LVL66:
 953 00ee 011C     		adds	r1, r0, #0
 954 00f0 301C     		adds	r0, r6, #0
 955 00f2 FFF7FEFF 		bl	__aeabi_fadd
 956              	.LVL67:
 957 00f6 051C     		adds	r5, r0, #0
 958 00f8 6060     		str	r0, [r4, #4]
 254:Src/main.c    ****     r.error = r.target - s.ttipavg;
 959              		.loc 1 254 0
 960 00fa 6A4B     		ldr	r3, .L48+72
 961 00fc 1C68     		ldr	r4, [r3]
 962 00fe DE6A     		ldr	r6, [r3, #44]
 963 0100 311C     		adds	r1, r6, #0
 964 0102 201C     		adds	r0, r4, #0
 965 0104 FFF7FEFF 		bl	__aeabi_fsub
 966              	.LVL68:
 967 0108 011C     		adds	r1, r0, #0
 968 010a 281C     		adds	r0, r5, #0
 969 010c FFF7FEFF 		bl	__aeabi_fcmpge
 970              	.LVL69:
 971 0110 0028     		cmp	r0, #0
 972 0112 58D0     		beq	.L26
 254:Src/main.c    ****     r.error = r.target - s.ttipavg;
ARM GAS  /tmp/ccIZXVel.s 			page 32


 973              		.loc 1 254 0 is_stmt 0 discriminator 1
 974 0114 311C     		adds	r1, r6, #0
 975 0116 201C     		adds	r0, r4, #0
 976 0118 FFF7FEFF 		bl	__aeabi_fadd
 977              	.LVL70:
 978 011c 011C     		adds	r1, r0, #0
 979 011e 281C     		adds	r0, r5, #0
 980 0120 FFF7FEFF 		bl	__aeabi_fcmple
 981              	.LVL71:
 982 0124 0028     		cmp	r0, #0
 983 0126 4ED0     		beq	.L26
 255:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 984              		.loc 1 255 0 is_stmt 1
 985 0128 291C     		adds	r1, r5, #0
 986 012a 201C     		adds	r0, r4, #0
 987 012c FFF7FEFF 		bl	__aeabi_fsub
 988              	.LVL72:
 989 0130 051C     		adds	r5, r0, #0
 990 0132 5C4F     		ldr	r7, .L48+72
 991 0134 7860     		str	r0, [r7, #4]
 256:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 992              		.loc 1 256 0
 993 0136 FC68     		ldr	r4, [r7, #12]
 994 0138 FE69     		ldr	r6, [r7, #28]
 995 013a 311C     		adds	r1, r6, #0
 996 013c FFF7FEFF 		bl	__aeabi_fmul
 997              	.LVL73:
 998 0140 011C     		adds	r1, r0, #0
 999 0142 201C     		adds	r0, r4, #0
 1000 0144 FFF7FEFF 		bl	__aeabi_fadd
 1001              	.LVL74:
 1002 0148 041C     		adds	r4, r0, #0
 257:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 1003              		.loc 1 257 0
 1004 014a 3F69     		ldr	r7, [r7, #16]
 1005 014c 391C     		adds	r1, r7, #0
 1006 014e FFF7FEFF 		bl	__aeabi_fcmpgt
 1007              	.LVL75:
 1008 0152 0028     		cmp	r0, #0
 1009 0154 09D1     		bne	.L29
 257:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 1010              		.loc 1 257 0 is_stmt 0 discriminator 2
 1011 0156 8023     		movs	r3, #128
 1012 0158 1B06     		lsls	r3, r3, #24
 1013 015a F918     		adds	r1, r7, r3
 1014 015c 0F1C     		adds	r7, r1, #0
 1015 015e 201C     		adds	r0, r4, #0
 1016 0160 FFF7FEFF 		bl	__aeabi_fcmplt
 1017              	.LVL76:
 1018 0164 0028     		cmp	r0, #0
 1019 0166 00D1     		bne	.L29
 1020 0168 271C     		adds	r7, r4, #0
 1021              	.L29:
 257:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 1022              		.loc 1 257 0 discriminator 8
 1023 016a 4E4C     		ldr	r4, .L48+72
 1024 016c E760     		str	r7, [r4, #12]
ARM GAS  /tmp/ccIZXVel.s 			page 33


 258:Src/main.c    ****     r.duty = (r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror)*MAX_DUTY;
 1025              		.loc 1 258 0 is_stmt 1 discriminator 8
 1026 016e A168     		ldr	r1, [r4, #8]
 1027 0170 281C     		adds	r0, r5, #0
 1028 0172 FFF7FEFF 		bl	__aeabi_fsub
 1029              	.LVL77:
 1030 0176 311C     		adds	r1, r6, #0
 1031 0178 FFF7FEFF 		bl	__aeabi_fdiv
 1032              	.LVL78:
 1033 017c 061C     		adds	r6, r0, #0
 1034 017e 6061     		str	r0, [r4, #20]
 259:Src/main.c    ****     r.errorprior = r.error;
 1035              		.loc 1 259 0 discriminator 8
 1036 0180 216A     		ldr	r1, [r4, #32]
 1037 0182 281C     		adds	r0, r5, #0
 1038 0184 FFF7FEFF 		bl	__aeabi_fmul
 1039              	.LVL79:
 1040 0188 0090     		str	r0, [sp]
 1041 018a 391C     		adds	r1, r7, #0
 1042 018c 606A     		ldr	r0, [r4, #36]
 1043 018e FFF7FEFF 		bl	__aeabi_fmul
 1044              	.LVL80:
 1045 0192 011C     		adds	r1, r0, #0
 1046 0194 0098     		ldr	r0, [sp]
 1047 0196 FFF7FEFF 		bl	__aeabi_fadd
 1048              	.LVL81:
 1049 019a 071C     		adds	r7, r0, #0
 1050 019c A16A     		ldr	r1, [r4, #40]
 1051 019e 301C     		adds	r0, r6, #0
 1052 01a0 FFF7FEFF 		bl	__aeabi_fmul
 1053              	.LVL82:
 1054 01a4 011C     		adds	r1, r0, #0
 1055 01a6 381C     		adds	r0, r7, #0
 1056 01a8 FFF7FEFF 		bl	__aeabi_fadd
 1057              	.LVL83:
 1058 01ac 061C     		adds	r6, r0, #0
 1059 01ae 3E4B     		ldr	r3, .L48+76
 1060 01b0 1888     		ldrh	r0, [r3]
 1061 01b2 FFF7FEFF 		bl	__aeabi_i2f
 1062              	.LVL84:
 1063 01b6 311C     		adds	r1, r6, #0
 1064 01b8 FFF7FEFF 		bl	__aeabi_fmul
 1065              	.LVL85:
 1066 01bc FFF7FEFF 		bl	__aeabi_f2iz
 1067              	.LVL86:
 1068 01c0 2083     		strh	r0, [r4, #24]
 260:Src/main.c    ****   } else {
 1069              		.loc 1 260 0 discriminator 8
 1070 01c2 A560     		str	r5, [r4, #8]
 1071 01c4 0BE0     		b	.L31
 1072              	.L26:
 262:Src/main.c    ****       r.duty = MAX_DUTY;
 1073              		.loc 1 262 0
 1074 01c6 211C     		adds	r1, r4, #0
 1075 01c8 281C     		adds	r0, r5, #0
 1076 01ca FFF7FEFF 		bl	__aeabi_fcmple
 1077              	.LVL87:
ARM GAS  /tmp/ccIZXVel.s 			page 34


 1078 01ce 0028     		cmp	r0, #0
 1079 01d0 31D0     		beq	.L45
 263:Src/main.c    ****       r.error = 12.0;
 1080              		.loc 1 263 0
 1081 01d2 344B     		ldr	r3, .L48+72
 1082 01d4 344A     		ldr	r2, .L48+76
 1083 01d6 1288     		ldrh	r2, [r2]
 1084 01d8 1A83     		strh	r2, [r3, #24]
 264:Src/main.c    ****     } else {
 1085              		.loc 1 264 0
 1086 01da 344A     		ldr	r2, .L48+80
 1087 01dc 5A60     		str	r2, [r3, #4]
 1088              	.L31:
 271:Src/main.c    **** 
 1089              		.loc 1 271 0
 1090 01de 314B     		ldr	r3, .L48+72
 1091 01e0 1822     		movs	r2, #24
 1092 01e2 9B5E     		ldrsh	r3, [r3, r2]
 1093 01e4 304A     		ldr	r2, .L48+76
 1094 01e6 1488     		ldrh	r4, [r2]
 1095 01e8 A342     		cmp	r3, r4
 1096 01ea 2CDC     		bgt	.L34
 271:Src/main.c    **** 
 1097              		.loc 1 271 0 is_stmt 0 discriminator 1
 1098 01ec 1D1C     		adds	r5, r3, #0
 1099 01ee 002B     		cmp	r3, #0
 1100 01f0 27DB     		blt	.L46
 1101              	.L35:
 1102 01f2 2DB2     		sxth	r5, r5
 1103              	.L36:
 271:Src/main.c    **** 
 1104              		.loc 1 271 0 discriminator 4
 1105 01f4 2B4B     		ldr	r3, .L48+72
 1106 01f6 1D83     		strh	r5, [r3, #24]
 273:Src/main.c    ****     MAX_DUTY = r.duty - 1;
 1107              		.loc 1 273 0 is_stmt 1 discriminator 4
 1108 01f8 1F4B     		ldr	r3, .L48+28
 1109 01fa D868     		ldr	r0, [r3, #12]
 1110 01fc 5969     		ldr	r1, [r3, #20]
 1111 01fe FFF7FEFF 		bl	__aeabi_fcmpgt
 1112              	.LVL88:
 1113 0202 0028     		cmp	r0, #0
 1114 0204 01D0     		beq	.L37
 273:Src/main.c    ****     MAX_DUTY = r.duty - 1;
 1115              		.loc 1 273 0 is_stmt 0 discriminator 1
 1116 0206 642D     		cmp	r5, #100
 1117 0208 1FDC     		bgt	.L47
 1118              	.L37:
 277:Src/main.c    ****     if(MAX_DUTY >= 3900) MAX_DUTY = 3900;
 1119              		.loc 1 277 0 is_stmt 1
 1120 020a 0134     		adds	r4, r4, #1
 1121 020c A4B2     		uxth	r4, r4
 1122 020e 264B     		ldr	r3, .L48+76
 1123 0210 1C80     		strh	r4, [r3]
 278:Src/main.c    ****   }
 1124              		.loc 1 278 0
 1125 0212 274B     		ldr	r3, .L48+84
ARM GAS  /tmp/ccIZXVel.s 			page 35


 1126 0214 9C42     		cmp	r4, r3
 1127 0216 02D9     		bls	.L39
 278:Src/main.c    ****   }
 1128              		.loc 1 278 0 is_stmt 0 discriminator 1
 1129 0218 234B     		ldr	r3, .L48+76
 1130 021a 264A     		ldr	r2, .L48+88
 1131 021c 1A80     		strh	r2, [r3]
 1132              	.L39:
 281:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4090);
 1133              		.loc 1 281 0 is_stmt 1
 1134 021e 264B     		ldr	r3, .L48+92
 1135 0220 1B68     		ldr	r3, [r3]
 1136 0222 204A     		ldr	r2, .L48+72
 1137 0224 1821     		movs	r1, #24
 1138 0226 525E     		ldrsh	r2, [r2, r1]
 1139 0228 5A63     		str	r2, [r3, #52]
 282:Src/main.c    **** }
 1140              		.loc 1 282 0
 1141 022a 244A     		ldr	r2, .L48+96
 1142 022c 1A64     		str	r2, [r3, #64]
 283:Src/main.c    **** 
 1143              		.loc 1 283 0
 1144 022e 02B0     		add	sp, sp, #8
 1145              		@ sp needed
 1146 0230 04BC     		pop	{r2}
 1147 0232 9046     		mov	r8, r2
 1148 0234 F0BD     		pop	{r4, r5, r6, r7, pc}
 1149              	.L45:
 266:Src/main.c    ****       r.error = 0.0;
 1150              		.loc 1 266 0
 1151 0236 1B4B     		ldr	r3, .L48+72
 1152 0238 0022     		movs	r2, #0
 1153 023a 1A83     		strh	r2, [r3, #24]
 267:Src/main.c    ****     }
 1154              		.loc 1 267 0
 1155 023c 0022     		movs	r2, #0
 1156 023e 5A60     		str	r2, [r3, #4]
 1157 0240 CDE7     		b	.L31
 1158              	.L46:
 271:Src/main.c    **** 
 1159              		.loc 1 271 0 discriminator 1
 1160 0242 0025     		movs	r5, #0
 1161 0244 D5E7     		b	.L35
 1162              	.L34:
 271:Src/main.c    **** 
 1163              		.loc 1 271 0 is_stmt 0 discriminator 2
 1164 0246 25B2     		sxth	r5, r4
 1165 0248 D4E7     		b	.L36
 1166              	.L47:
 274:Src/main.c    ****     r.duty -= 100;
 1167              		.loc 1 274 0 is_stmt 1
 1168 024a ADB2     		uxth	r5, r5
 1169 024c 6A1E     		subs	r2, r5, #1
 1170 024e 164B     		ldr	r3, .L48+76
 1171 0250 1A80     		strh	r2, [r3]
 275:Src/main.c    ****   } else {
 1172              		.loc 1 275 0
ARM GAS  /tmp/ccIZXVel.s 			page 36


 1173 0252 643D     		subs	r5, r5, #100
 1174 0254 134B     		ldr	r3, .L48+72
 1175 0256 1D83     		strh	r5, [r3, #24]
 1176 0258 E1E7     		b	.L39
 1177              	.L49:
 1178 025a C046     		.align	2
 1179              	.L48:
 1180 025c 00000000 		.word	.LANCHOR0
 1181 0260 00FEAF40 		.word	1085275648
 1182 0264 66666666 		.word	1717986918
 1183 0268 66660A40 		.word	1074423398
 1184 026c 0000E03F 		.word	1071644672
 1185 0270 7B14AE47 		.word	1202590843
 1186 0274 E17A843F 		.word	1065646817
 1187 0278 00000000 		.word	.LANCHOR1
 1188 027c 00000000 		.word	.LANCHOR2
 1189 0280 00007A44 		.word	1148846080
 1190 0284 66661A40 		.word	1075471974
 1191 0288 A4707D3F 		.word	1065185444
 1192 028c 25068195 		.word	-1786706395
 1193 0290 438BFA3F 		.word	1073384259
 1194 0294 B81E85EB 		.word	-343597384
 1195 0298 51B8E63F 		.word	1072085073
 1196 029c E07A843F 		.word	1065646816
 1197 02a0 00D7233C 		.word	1008981760
 1198 02a4 00000000 		.word	.LANCHOR3
 1199 02a8 00000000 		.word	.LANCHOR4
 1200 02ac 00004041 		.word	1094713344
 1201 02b0 3B0F0000 		.word	3899
 1202 02b4 3C0F0000 		.word	3900
 1203 02b8 00000000 		.word	htim1
 1204 02bc FA0F0000 		.word	4090
 1205              		.cfi_endproc
 1206              	.LFE38:
 1208              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1209              		.align	1
 1210              		.global	HAL_TIM_PeriodElapsedCallback
 1211              		.syntax unified
 1212              		.code	16
 1213              		.thumb_func
 1214              		.fpu softvfp
 1216              	HAL_TIM_PeriodElapsedCallback:
 1217              	.LFB39:
 286:Src/main.c    ****   if(sendDataUSB) // WIP need to fix this, should me timer based only
 1218              		.loc 1 286 0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              	.LVL89:
 1223 0000 10B5     		push	{r4, lr}
 1224              	.LCFI16:
 1225              		.cfi_def_cfa_offset 8
 1226              		.cfi_offset 4, -8
 1227              		.cfi_offset 14, -4
 287:Src/main.c    ****   {
 1228              		.loc 1 287 0
 1229 0002 094B     		ldr	r3, .L53
ARM GAS  /tmp/ccIZXVel.s 			page 37


 1230 0004 1B68     		ldr	r3, [r3]
 1231 0006 002B     		cmp	r3, #0
 1232 0008 00D1     		bne	.L52
 1233              	.LVL90:
 1234              	.L50:
 294:Src/main.c    **** 
 1235              		.loc 1 294 0
 1236              		@ sp needed
 1237 000a 10BD     		pop	{r4, pc}
 1238              	.LVL91:
 1239              	.L52:
 289:Src/main.c    **** 
 1240              		.loc 1 289 0
 1241 000c 064B     		ldr	r3, .L53
 1242 000e 0022     		movs	r2, #0
 1243 0010 1A60     		str	r2, [r3]
 291:Src/main.c    ****     USBD_CDC_TransmitPacket(&USBD_Device);
 1244              		.loc 1 291 0
 1245 0012 8032     		adds	r2, r2, #128
 1246 0014 054C     		ldr	r4, .L53+4
 1247 0016 9200     		lsls	r2, r2, #2
 1248 0018 0549     		ldr	r1, .L53+8
 1249 001a 2000     		movs	r0, r4
 1250              	.LVL92:
 1251 001c FFF7FEFF 		bl	USBD_CDC_SetTxBuffer
 1252              	.LVL93:
 292:Src/main.c    ****   }
 1253              		.loc 1 292 0
 1254 0020 2000     		movs	r0, r4
 1255 0022 FFF7FEFF 		bl	USBD_CDC_TransmitPacket
 1256              	.LVL94:
 294:Src/main.c    **** 
 1257              		.loc 1 294 0
 1258 0026 F0E7     		b	.L50
 1259              	.L54:
 1260              		.align	2
 1261              	.L53:
 1262 0028 00000000 		.word	sendDataUSB
 1263 002c 00000000 		.word	USBD_Device
 1264 0030 00000000 		.word	UserTxBuffer
 1265              		.cfi_endproc
 1266              	.LFE39:
 1268              		.global	__aeabi_f2uiz
 1269              		.section	.text.USB_printfloat,"ax",%progbits
 1270              		.align	1
 1271              		.global	USB_printfloat
 1272              		.syntax unified
 1273              		.code	16
 1274              		.thumb_func
 1275              		.fpu softvfp
 1277              	USB_printfloat:
 1278              	.LFB40:
 296:Src/main.c    ****   memset(UserTxBuffer, 0, APP_TX_DATA_SIZE);
 1279              		.loc 1 296 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccIZXVel.s 			page 38


 1283              	.LVL95:
 1284 0000 70B5     		push	{r4, r5, r6, lr}
 1285              	.LCFI17:
 1286              		.cfi_def_cfa_offset 16
 1287              		.cfi_offset 4, -16
 1288              		.cfi_offset 5, -12
 1289              		.cfi_offset 6, -8
 1290              		.cfi_offset 14, -4
 1291 0002 061C     		adds	r6, r0, #0
 297:Src/main.c    ****   sprintf(UserTxBuffer, "%d.%d \r\n", (uint16_t)_buf,(uint16_t)((_buf-(uint16_t)_buf)*10.0f));
 1292              		.loc 1 297 0
 1293 0004 104D     		ldr	r5, .L56
 1294 0006 8022     		movs	r2, #128
 1295 0008 9200     		lsls	r2, r2, #2
 1296 000a 0021     		movs	r1, #0
 1297 000c 2800     		movs	r0, r5
 1298              	.LVL96:
 1299 000e FFF7FEFF 		bl	memset
 1300              	.LVL97:
 298:Src/main.c    ****   sendDataUSB = 1;
 1301              		.loc 1 298 0
 1302 0012 301C     		adds	r0, r6, #0
 1303 0014 FFF7FEFF 		bl	__aeabi_f2uiz
 1304              	.LVL98:
 1305 0018 84B2     		uxth	r4, r0
 1306 001a 2000     		movs	r0, r4
 1307 001c FFF7FEFF 		bl	__aeabi_i2f
 1308              	.LVL99:
 1309 0020 011C     		adds	r1, r0, #0
 1310 0022 301C     		adds	r0, r6, #0
 1311 0024 FFF7FEFF 		bl	__aeabi_fsub
 1312              	.LVL100:
 1313 0028 0849     		ldr	r1, .L56+4
 1314 002a FFF7FEFF 		bl	__aeabi_fmul
 1315              	.LVL101:
 1316 002e FFF7FEFF 		bl	__aeabi_f2uiz
 1317              	.LVL102:
 1318 0032 83B2     		uxth	r3, r0
 1319 0034 2200     		movs	r2, r4
 1320 0036 0649     		ldr	r1, .L56+8
 1321 0038 2800     		movs	r0, r5
 1322 003a FFF7FEFF 		bl	sprintf
 1323              	.LVL103:
 299:Src/main.c    **** }
 1324              		.loc 1 299 0
 1325 003e 054B     		ldr	r3, .L56+12
 1326 0040 0122     		movs	r2, #1
 1327 0042 1A60     		str	r2, [r3]
 300:Src/main.c    **** 
 1328              		.loc 1 300 0
 1329              		@ sp needed
 1330              	.LVL104:
 1331 0044 70BD     		pop	{r4, r5, r6, pc}
 1332              	.L57:
 1333 0046 C046     		.align	2
 1334              	.L56:
 1335 0048 00000000 		.word	UserTxBuffer
ARM GAS  /tmp/ccIZXVel.s 			page 39


 1336 004c 00002041 		.word	1092616192
 1337 0050 00000000 		.word	.LC16
 1338 0054 00000000 		.word	sendDataUSB
 1339              		.cfi_endproc
 1340              	.LFE40:
 1342              		.section	.text.disp_init,"ax",%progbits
 1343              		.align	1
 1344              		.global	disp_init
 1345              		.syntax unified
 1346              		.code	16
 1347              		.thumb_func
 1348              		.fpu softvfp
 1350              	disp_init:
 1351              	.LFB41:
 337:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 1352              		.loc 1 337 0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356 0000 10B5     		push	{r4, lr}
 1357              	.LCFI18:
 1358              		.cfi_def_cfa_offset 8
 1359              		.cfi_offset 4, -8
 1360              		.cfi_offset 14, -4
 1361 0002 82B0     		sub	sp, sp, #8
 1362              	.LCFI19:
 1363              		.cfi_def_cfa_offset 16
 338:Src/main.c    ****   uint16_t _cnt = 0;
 1364              		.loc 1 338 0
 1365 0004 1122     		movs	r2, #17
 1366 0006 0E49     		ldr	r1, .L62
 1367 0008 0E48     		ldr	r0, .L62+4
 1368 000a FFF7FEFF 		bl	memcpy
 1369              	.LVL105:
 339:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1370              		.loc 1 339 0
 1371 000e 0024     		movs	r4, #0
 1372              	.LVL106:
 1373              	.L59:
 340:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1374              		.loc 1 340 0 discriminator 1
 1375 0010 0D48     		ldr	r0, .L62+8
 1376 0012 FFF7FEFF 		bl	HAL_I2C_GetState
 1377              	.LVL107:
 1378 0016 2028     		cmp	r0, #32
 1379 0018 06D0     		beq	.L60
 340:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1380              		.loc 1 340 0 is_stmt 0 discriminator 2
 1381 001a 631C     		adds	r3, r4, #1
 1382 001c 9BB2     		uxth	r3, r3
 1383              	.LVL108:
 1384 001e 0B4A     		ldr	r2, .L62+12
 1385 0020 9442     		cmp	r4, r2
 1386 0022 01D8     		bhi	.L60
 340:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1387              		.loc 1 340 0
 1388 0024 1C00     		movs	r4, r3
ARM GAS  /tmp/ccIZXVel.s 			page 40


 1389 0026 F3E7     		b	.L59
 1390              	.LVL109:
 1391              	.L60:
 341:Src/main.c    **** }
 1392              		.loc 1 341 0 is_stmt 1
 1393 0028 FA23     		movs	r3, #250
 1394 002a 9B00     		lsls	r3, r3, #2
 1395 002c 0093     		str	r3, [sp]
 1396 002e 3223     		movs	r3, #50
 1397 0030 074A     		ldr	r2, .L62+16
 1398 0032 7821     		movs	r1, #120
 1399 0034 0448     		ldr	r0, .L62+8
 1400 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1401              	.LVL110:
 342:Src/main.c    **** 
 1402              		.loc 1 342 0
 1403 003a 02B0     		add	sp, sp, #8
 1404              		@ sp needed
 1405 003c 10BD     		pop	{r4, pc}
 1406              	.L63:
 1407 003e C046     		.align	2
 1408              	.L62:
 1409 0040 00000000 		.word	.LANCHOR5
 1410 0044 00000000 		.word	screenBuffer
 1411 0048 00000000 		.word	hi2c1
 1412 004c 10270000 		.word	10000
 1413 0050 00000000 		.word	.LANCHOR6
 1414              		.cfi_endproc
 1415              	.LFE41:
 1417              		.section	.text.refresh,"ax",%progbits
 1418              		.align	1
 1419              		.global	refresh
 1420              		.syntax unified
 1421              		.code	16
 1422              		.thumb_func
 1423              		.fpu softvfp
 1425              	refresh:
 1426              	.LFB42:
 344:Src/main.c    ****   uint16_t _cnt = 0;
 1427              		.loc 1 344 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431 0000 10B5     		push	{r4, lr}
 1432              	.LCFI20:
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 4, -8
 1435              		.cfi_offset 14, -4
 1436 0002 82B0     		sub	sp, sp, #8
 1437              	.LCFI21:
 1438              		.cfi_def_cfa_offset 16
 1439              	.LVL111:
 345:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1440              		.loc 1 345 0
 1441 0004 0024     		movs	r4, #0
 1442              	.LVL112:
 1443              	.L65:
ARM GAS  /tmp/ccIZXVel.s 			page 41


 346:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1444              		.loc 1 346 0 discriminator 1
 1445 0006 0B48     		ldr	r0, .L68
 1446 0008 FFF7FEFF 		bl	HAL_I2C_GetState
 1447              	.LVL113:
 1448 000c 2028     		cmp	r0, #32
 1449 000e 06D0     		beq	.L66
 346:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1450              		.loc 1 346 0 is_stmt 0 discriminator 2
 1451 0010 631C     		adds	r3, r4, #1
 1452 0012 9BB2     		uxth	r3, r3
 1453              	.LVL114:
 1454 0014 084A     		ldr	r2, .L68+4
 1455 0016 9442     		cmp	r4, r2
 1456 0018 01D8     		bhi	.L66
 346:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1457              		.loc 1 346 0
 1458 001a 1C00     		movs	r4, r3
 1459 001c F3E7     		b	.L65
 1460              	.LVL115:
 1461              	.L66:
 347:Src/main.c    **** }
 1462              		.loc 1 347 0 is_stmt 1
 1463 001e FA23     		movs	r3, #250
 1464 0020 9B00     		lsls	r3, r3, #2
 1465 0022 0093     		str	r3, [sp]
 1466 0024 D123     		movs	r3, #209
 1467 0026 054A     		ldr	r2, .L68+8
 1468 0028 7821     		movs	r1, #120
 1469 002a 0248     		ldr	r0, .L68
 1470 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1471              	.LVL116:
 348:Src/main.c    **** 
 1472              		.loc 1 348 0
 1473 0030 02B0     		add	sp, sp, #8
 1474              		@ sp needed
 1475 0032 10BD     		pop	{r4, pc}
 1476              	.L69:
 1477              		.align	2
 1478              	.L68:
 1479 0034 00000000 		.word	hi2c1
 1480 0038 10270000 		.word	10000
 1481 003c 00000000 		.word	screenBuffer
 1482              		.cfi_endproc
 1483              	.LFE42:
 1485              		.section	.text.clear_screen,"ax",%progbits
 1486              		.align	1
 1487              		.global	clear_screen
 1488              		.syntax unified
 1489              		.code	16
 1490              		.thumb_func
 1491              		.fpu softvfp
 1493              	clear_screen:
 1494              	.LFB43:
 350:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 1495              		.loc 1 350 0
 1496              		.cfi_startproc
ARM GAS  /tmp/ccIZXVel.s 			page 42


 1497              		@ args = 0, pretend = 0, frame = 0
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
 1499 0000 10B5     		push	{r4, lr}
 1500              	.LCFI22:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 4, -8
 1503              		.cfi_offset 14, -4
 351:Src/main.c    **** }
 1504              		.loc 1 351 0
 1505 0002 C022     		movs	r2, #192
 1506 0004 0021     		movs	r1, #0
 1507 0006 0248     		ldr	r0, .L71
 1508 0008 FFF7FEFF 		bl	memset
 1509              	.LVL117:
 352:Src/main.c    **** void set_screen(void) {
 1510              		.loc 1 352 0
 1511              		@ sp needed
 1512 000c 10BD     		pop	{r4, pc}
 1513              	.L72:
 1514 000e C046     		.align	2
 1515              	.L71:
 1516 0010 11000000 		.word	screenBuffer+17
 1517              		.cfi_endproc
 1518              	.LFE43:
 1520              		.section	.text.set_screen,"ax",%progbits
 1521              		.align	1
 1522              		.global	set_screen
 1523              		.syntax unified
 1524              		.code	16
 1525              		.thumb_func
 1526              		.fpu softvfp
 1528              	set_screen:
 1529              	.LFB44:
 353:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 1530              		.loc 1 353 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
 1534 0000 10B5     		push	{r4, lr}
 1535              	.LCFI23:
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 4, -8
 1538              		.cfi_offset 14, -4
 354:Src/main.c    **** }
 1539              		.loc 1 354 0
 1540 0002 C022     		movs	r2, #192
 1541 0004 FF21     		movs	r1, #255
 1542 0006 0248     		ldr	r0, .L74
 1543 0008 FFF7FEFF 		bl	memset
 1544              	.LVL118:
 355:Src/main.c    **** 
 1545              		.loc 1 355 0
 1546              		@ sp needed
 1547 000c 10BD     		pop	{r4, pc}
 1548              	.L75:
 1549 000e C046     		.align	2
 1550              	.L74:
ARM GAS  /tmp/ccIZXVel.s 			page 43


 1551 0010 11000000 		.word	screenBuffer+17
 1552              		.cfi_endproc
 1553              	.LFE44:
 1555              		.section	.text.write_pixel,"ax",%progbits
 1556              		.align	1
 1557              		.global	write_pixel
 1558              		.syntax unified
 1559              		.code	16
 1560              		.thumb_func
 1561              		.fpu softvfp
 1563              	write_pixel:
 1564              	.LFB46:
 363:Src/main.c    ****   if(x>95 || y >15){
 1565              		.loc 1 363 0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 0
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 1569              	.LVL119:
 1570 0000 30B5     		push	{r4, r5, lr}
 1571              	.LCFI24:
 1572              		.cfi_def_cfa_offset 12
 1573              		.cfi_offset 4, -12
 1574              		.cfi_offset 5, -8
 1575              		.cfi_offset 14, -4
 364:Src/main.c    ****     return;
 1576              		.loc 1 364 0
 1577 0002 5F28     		cmp	r0, #95
 1578 0004 1BDC     		bgt	.L76
 364:Src/main.c    ****     return;
 1579              		.loc 1 364 0 is_stmt 0 discriminator 1
 1580 0006 0F29     		cmp	r1, #15
 1581 0008 19DC     		bgt	.L76
 367:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1582              		.loc 1 367 0 is_stmt 1
 1583 000a 012A     		cmp	r2, #1
 1584 000c 18D0     		beq	.L79
 369:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1585              		.loc 1 369 0
 1586 000e 002A     		cmp	r2, #0
 1587 0010 15D1     		bne	.L76
 370:Src/main.c    ****   }
 1588              		.loc 1 370 0
 1589 0012 CC17     		asrs	r4, r1, #31
 1590 0014 0723     		movs	r3, #7
 1591 0016 1A00     		movs	r2, r3
 1592              	.LVL120:
 1593 0018 2240     		ands	r2, r4
 1594 001a 5218     		adds	r2, r2, r1
 1595 001c D210     		asrs	r2, r2, #3
 1596 001e 5500     		lsls	r5, r2, #1
 1597 0020 AA18     		adds	r2, r5, r2
 1598 0022 5501     		lsls	r5, r2, #5
 1599 0024 2818     		adds	r0, r5, r0
 1600              	.LVL121:
 1601 0026 1130     		adds	r0, r0, #17
 1602 0028 640F     		lsrs	r4, r4, #29
 1603 002a 0919     		adds	r1, r1, r4
ARM GAS  /tmp/ccIZXVel.s 			page 44


 1604              	.LVL122:
 1605 002c 1940     		ands	r1, r3
 1606 002e 091B     		subs	r1, r1, r4
 1607 0030 09B2     		sxth	r1, r1
 1608 0032 0122     		movs	r2, #1
 1609 0034 8A40     		lsls	r2, r2, r1
 1610 0036 0E49     		ldr	r1, .L80
 1611 0038 0B5C     		ldrb	r3, [r1, r0]
 1612 003a 9343     		bics	r3, r2
 1613 003c 0B54     		strb	r3, [r1, r0]
 1614              	.L76:
 372:Src/main.c    **** 
 1615              		.loc 1 372 0
 1616              		@ sp needed
 1617 003e 30BD     		pop	{r4, r5, pc}
 1618              	.LVL123:
 1619              	.L79:
 368:Src/main.c    ****   } else if (color == 0){
 1620              		.loc 1 368 0
 1621 0040 CC17     		asrs	r4, r1, #31
 1622 0042 0723     		movs	r3, #7
 1623 0044 1A00     		movs	r2, r3
 1624              	.LVL124:
 1625 0046 2240     		ands	r2, r4
 1626 0048 5218     		adds	r2, r2, r1
 1627 004a D210     		asrs	r2, r2, #3
 1628 004c 5500     		lsls	r5, r2, #1
 1629 004e AA18     		adds	r2, r5, r2
 1630 0050 5501     		lsls	r5, r2, #5
 1631 0052 2818     		adds	r0, r5, r0
 1632              	.LVL125:
 1633 0054 1130     		adds	r0, r0, #17
 1634 0056 640F     		lsrs	r4, r4, #29
 1635 0058 0919     		adds	r1, r1, r4
 1636              	.LVL126:
 1637 005a 0B40     		ands	r3, r1
 1638 005c 1B1B     		subs	r3, r3, r4
 1639 005e 1BB2     		sxth	r3, r3
 1640 0060 0122     		movs	r2, #1
 1641 0062 9A40     		lsls	r2, r2, r3
 1642 0064 0249     		ldr	r1, .L80
 1643 0066 0B5C     		ldrb	r3, [r1, r0]
 1644 0068 1343     		orrs	r3, r2
 1645 006a 0B54     		strb	r3, [r1, r0]
 1646 006c E7E7     		b	.L76
 1647              	.L81:
 1648 006e C046     		.align	2
 1649              	.L80:
 1650 0070 00000000 		.word	screenBuffer
 1651              		.cfi_endproc
 1652              	.LFE46:
 1654              		.section	.text.draw_v_line,"ax",%progbits
 1655              		.align	1
 1656              		.global	draw_v_line
 1657              		.syntax unified
 1658              		.code	16
 1659              		.thumb_func
ARM GAS  /tmp/ccIZXVel.s 			page 45


 1660              		.fpu softvfp
 1662              	draw_v_line:
 1663              	.LFB45:
 357:Src/main.c    ****   for(int i = 0; i <= h; i++){
 1664              		.loc 1 357 0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 8
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
 1668              	.LVL127:
 1669 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1670              	.LCFI25:
 1671              		.cfi_def_cfa_offset 20
 1672              		.cfi_offset 4, -20
 1673              		.cfi_offset 5, -16
 1674              		.cfi_offset 6, -12
 1675              		.cfi_offset 7, -8
 1676              		.cfi_offset 14, -4
 1677 0002 83B0     		sub	sp, sp, #12
 1678              	.LCFI26:
 1679              		.cfi_def_cfa_offset 32
 1680 0004 0600     		movs	r6, r0
 1681 0006 0D00     		movs	r5, r1
 1682 0008 1700     		movs	r7, r2
 1683 000a 0193     		str	r3, [sp, #4]
 1684              	.LVL128:
 1685              	.LBB16:
 358:Src/main.c    ****     write_pixel(x, y+i, color);
 1686              		.loc 1 358 0
 1687 000c 0024     		movs	r4, #0
 1688 000e 06E0     		b	.L83
 1689              	.LVL129:
 1690              	.L84:
 359:Src/main.c    ****   }
 1691              		.loc 1 359 0 discriminator 3
 1692 0010 6119     		adds	r1, r4, r5
 1693 0012 09B2     		sxth	r1, r1
 1694 0014 019A     		ldr	r2, [sp, #4]
 1695 0016 3000     		movs	r0, r6
 1696 0018 FFF7FEFF 		bl	write_pixel
 1697              	.LVL130:
 358:Src/main.c    ****     write_pixel(x, y+i, color);
 1698              		.loc 1 358 0 discriminator 3
 1699 001c 0134     		adds	r4, r4, #1
 1700              	.LVL131:
 1701              	.L83:
 358:Src/main.c    ****     write_pixel(x, y+i, color);
 1702              		.loc 1 358 0 is_stmt 0 discriminator 1
 1703 001e A742     		cmp	r7, r4
 1704 0020 F6DA     		bge	.L84
 1705              	.LBE16:
 361:Src/main.c    **** 
 1706              		.loc 1 361 0 is_stmt 1
 1707 0022 03B0     		add	sp, sp, #12
 1708              		@ sp needed
 1709              	.LVL132:
 1710 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
 1711              		.cfi_endproc
ARM GAS  /tmp/ccIZXVel.s 			page 46


 1712              	.LFE45:
 1714              		.section	.text.draw_char,"ax",%progbits
 1715              		.align	1
 1716              		.global	draw_char
 1717              		.syntax unified
 1718              		.code	16
 1719              		.thumb_func
 1720              		.fpu softvfp
 1722              	draw_char:
 1723              	.LFB47:
 376:Src/main.c    ****     c = c & 0x7F;
 1724              		.loc 1 376 0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 0
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 1728              	.LVL133:
 1729 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1730              	.LCFI27:
 1731              		.cfi_def_cfa_offset 20
 1732              		.cfi_offset 4, -20
 1733              		.cfi_offset 5, -16
 1734              		.cfi_offset 6, -12
 1735              		.cfi_offset 7, -8
 1736              		.cfi_offset 14, -4
 1737 0002 C646     		mov	lr, r8
 1738 0004 00B5     		push	{lr}
 1739              	.LCFI28:
 1740              		.cfi_def_cfa_offset 24
 1741              		.cfi_offset 8, -24
 1742 0006 0F00     		movs	r7, r1
 1743 0008 9046     		mov	r8, r2
 377:Src/main.c    ****     if (c < ' ') {
 1744              		.loc 1 377 0
 1745 000a 7F23     		movs	r3, #127
 1746              	.LVL134:
 1747 000c 0340     		ands	r3, r0
 1748              	.LVL135:
 378:Src/main.c    ****         c = 0;
 1749              		.loc 1 378 0
 1750 000e 1F2B     		cmp	r3, #31
 1751 0010 08D9     		bls	.L92
 381:Src/main.c    ****     }
 1752              		.loc 1 381 0
 1753 0012 203B     		subs	r3, r3, #32
 1754              	.LVL136:
 1755 0014 DBB2     		uxtb	r3, r3
 1756              	.LVL137:
 1757              	.L86:
 383:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 1758              		.loc 1 383 0
 1759 0016 5A00     		lsls	r2, r3, #1
 1760              	.LVL138:
 1761 0018 D318     		adds	r3, r2, r3
 1762              	.LVL139:
 1763 001a 5E00     		lsls	r6, r3, #1
 1764 001c 114B     		ldr	r3, .L96
 1765 001e F618     		adds	r6, r6, r3
ARM GAS  /tmp/ccIZXVel.s 			page 47


 1766              	.LVL140:
 1767              	.LBB17:
 384:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1768              		.loc 1 384 0
 1769 0020 0025     		movs	r5, #0
 1770 0022 18E0     		b	.L87
 1771              	.LVL141:
 1772              	.L92:
 1773              	.LBE17:
 379:Src/main.c    ****     } else {
 1774              		.loc 1 379 0
 1775 0024 0023     		movs	r3, #0
 1776              	.LVL142:
 1777 0026 F6E7     		b	.L86
 1778              	.LVL143:
 1779              	.L88:
 1780              	.LBB20:
 1781              	.LBB18:
 389:Src/main.c    ****             }
 1782              		.loc 1 389 0
 1783 0028 4346     		mov	r3, r8
 1784 002a 1919     		adds	r1, r3, r4
 1785 002c 7819     		adds	r0, r7, r5
 1786 002e 0022     		movs	r2, #0
 1787 0030 FFF7FEFF 		bl	write_pixel
 1788              	.LVL144:
 1789              	.L89:
 385:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1790              		.loc 1 385 0 discriminator 2
 1791 0034 0134     		adds	r4, r4, #1
 1792              	.LVL145:
 1793 0036 E4B2     		uxtb	r4, r4
 1794              	.LVL146:
 1795              	.L91:
 385:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1796              		.loc 1 385 0 is_stmt 0 discriminator 1
 1797 0038 072C     		cmp	r4, #7
 1798 003a 0AD8     		bhi	.L94
 386:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 1799              		.loc 1 386 0 is_stmt 1
 1800 003c 735D     		ldrb	r3, [r6, r5]
 1801 003e 2341     		asrs	r3, r3, r4
 1802 0040 DB07     		lsls	r3, r3, #31
 1803 0042 F1D5     		bpl	.L88
 387:Src/main.c    ****             } else {
 1804              		.loc 1 387 0
 1805 0044 4346     		mov	r3, r8
 1806 0046 1919     		adds	r1, r3, r4
 1807 0048 7819     		adds	r0, r7, r5
 1808 004a 0122     		movs	r2, #1
 1809 004c FFF7FEFF 		bl	write_pixel
 1810              	.LVL147:
 1811 0050 F0E7     		b	.L89
 1812              	.L94:
 1813              	.LBE18:
 384:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1814              		.loc 1 384 0 discriminator 2
ARM GAS  /tmp/ccIZXVel.s 			page 48


 1815 0052 0135     		adds	r5, r5, #1
 1816              	.LVL148:
 1817 0054 EDB2     		uxtb	r5, r5
 1818              	.LVL149:
 1819              	.L87:
 384:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1820              		.loc 1 384 0 is_stmt 0 discriminator 1
 1821 0056 052D     		cmp	r5, #5
 1822 0058 01D8     		bhi	.L95
 1823              	.LBB19:
 385:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1824              		.loc 1 385 0 is_stmt 1
 1825 005a 0024     		movs	r4, #0
 1826 005c ECE7     		b	.L91
 1827              	.L95:
 1828              	.LBE19:
 1829              	.LBE20:
 393:Src/main.c    **** 
 1830              		.loc 1 393 0
 1831              		@ sp needed
 1832              	.LVL150:
 1833              	.LVL151:
 1834 005e 04BC     		pop	{r2}
 1835 0060 9046     		mov	r8, r2
 1836 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 1837              	.L97:
 1838              		.align	2
 1839              	.L96:
 1840 0064 00000000 		.word	font
 1841              		.cfi_endproc
 1842              	.LFE47:
 1844              		.section	.text.draw_string,"ax",%progbits
 1845              		.align	1
 1846              		.global	draw_string
 1847              		.syntax unified
 1848              		.code	16
 1849              		.thumb_func
 1850              		.fpu softvfp
 1852              	draw_string:
 1853              	.LFB48:
 395:Src/main.c    ****     while (*str) {
 1854              		.loc 1 395 0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 1858              	.LVL152:
 1859 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1860              	.LCFI29:
 1861              		.cfi_def_cfa_offset 24
 1862              		.cfi_offset 3, -24
 1863              		.cfi_offset 4, -20
 1864              		.cfi_offset 5, -16
 1865              		.cfi_offset 6, -12
 1866              		.cfi_offset 7, -8
 1867              		.cfi_offset 14, -4
 1868 0002 0700     		movs	r7, r0
 1869 0004 0C00     		movs	r4, r1
ARM GAS  /tmp/ccIZXVel.s 			page 49


 1870 0006 1600     		movs	r6, r2
 1871 0008 1D00     		movs	r5, r3
 396:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1872              		.loc 1 396 0
 1873 000a 07E0     		b	.L99
 1874              	.LVL153:
 1875              	.L100:
 397:Src/main.c    ****         x += CHAR_WIDTH;
 1876              		.loc 1 397 0
 1877 000c 0137     		adds	r7, r7, #1
 1878              	.LVL154:
 1879 000e 2B00     		movs	r3, r5
 1880 0010 3200     		movs	r2, r6
 1881 0012 2100     		movs	r1, r4
 1882 0014 FFF7FEFF 		bl	draw_char
 1883              	.LVL155:
 398:Src/main.c    ****     }
 1884              		.loc 1 398 0
 1885 0018 0634     		adds	r4, r4, #6
 1886              	.LVL156:
 1887 001a E4B2     		uxtb	r4, r4
 1888              	.LVL157:
 1889              	.L99:
 396:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1890              		.loc 1 396 0
 1891 001c 3878     		ldrb	r0, [r7]
 1892 001e 0028     		cmp	r0, #0
 1893 0020 F4D1     		bne	.L100
 400:Src/main.c    **** 
 1894              		.loc 1 400 0
 1895              		@ sp needed
 1896              	.LVL158:
 1897              	.LVL159:
 1898 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1899              		.cfi_endproc
 1900              	.LFE48:
 1902              		.section	.text.SystemClock_Config,"ax",%progbits
 1903              		.align	1
 1904              		.global	SystemClock_Config
 1905              		.syntax unified
 1906              		.code	16
 1907              		.thumb_func
 1908              		.fpu softvfp
 1910              	SystemClock_Config:
 1911              	.LFB49:
 403:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1912              		.loc 1 403 0
 1913              		.cfi_startproc
 1914              		@ args = 0, pretend = 0, frame = 96
 1915              		@ frame_needed = 0, uses_anonymous_args = 0
 1916 0000 10B5     		push	{r4, lr}
 1917              	.LCFI30:
 1918              		.cfi_def_cfa_offset 8
 1919              		.cfi_offset 4, -8
 1920              		.cfi_offset 14, -4
 1921 0002 98B0     		sub	sp, sp, #96
 1922              	.LCFI31:
ARM GAS  /tmp/ccIZXVel.s 			page 50


 1923              		.cfi_def_cfa_offset 104
 404:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1924              		.loc 1 404 0
 1925 0004 2C22     		movs	r2, #44
 1926 0006 0021     		movs	r1, #0
 1927 0008 0CA8     		add	r0, sp, #48
 1928 000a FFF7FEFF 		bl	memset
 1929              	.LVL160:
 405:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1930              		.loc 1 405 0
 1931 000e 1024     		movs	r4, #16
 1932 0010 1022     		movs	r2, #16
 1933 0012 0021     		movs	r1, #0
 1934 0014 07A8     		add	r0, sp, #28
 1935 0016 FFF7FEFF 		bl	memset
 1936              	.LVL161:
 406:Src/main.c    **** 
 1937              		.loc 1 406 0
 1938 001a 1C22     		movs	r2, #28
 1939 001c 0021     		movs	r1, #0
 1940 001e 6846     		mov	r0, sp
 1941 0020 FFF7FEFF 		bl	memset
 1942              	.LVL162:
 408:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 1943              		.loc 1 408 0
 1944 0024 3223     		movs	r3, #50
 1945 0026 0B93     		str	r3, [sp, #44]
 410:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1946              		.loc 1 410 0
 1947 0028 313B     		subs	r3, r3, #49
 1948 002a 0E93     		str	r3, [sp, #56]
 411:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1949              		.loc 1 411 0
 1950 002c 1393     		str	r3, [sp, #76]
 412:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1951              		.loc 1 412 0
 1952 002e 1093     		str	r3, [sp, #64]
 413:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1953              		.loc 1 413 0
 1954 0030 0F94     		str	r4, [sp, #60]
 414:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1955              		.loc 1 414 0
 1956 0032 1194     		str	r4, [sp, #68]
 415:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 1957              		.loc 1 415 0
 1958 0034 0E3C     		subs	r4, r4, #14
 1959 0036 1494     		str	r4, [sp, #80]
 416:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 1960              		.loc 1 416 0
 1961 0038 C022     		movs	r2, #192
 1962 003a 5202     		lsls	r2, r2, #9
 1963 003c 1592     		str	r2, [sp, #84]
 418:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1964              		.loc 1 418 0
 1965 003e 1793     		str	r3, [sp, #92]
 419:Src/main.c    **** 
 1966              		.loc 1 419 0
ARM GAS  /tmp/ccIZXVel.s 			page 51


 1967 0040 0BA8     		add	r0, sp, #44
 1968 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1969              	.LVL163:
 421:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 1970              		.loc 1 421 0
 1971 0046 0723     		movs	r3, #7
 1972 0048 0793     		str	r3, [sp, #28]
 423:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1973              		.loc 1 423 0
 1974 004a 0894     		str	r4, [sp, #32]
 424:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1975              		.loc 1 424 0
 1976 004c 0024     		movs	r4, #0
 1977 004e 0994     		str	r4, [sp, #36]
 425:Src/main.c    **** 
 1978              		.loc 1 425 0
 1979 0050 0A94     		str	r4, [sp, #40]
 427:Src/main.c    **** 
 1980              		.loc 1 427 0
 1981 0052 0121     		movs	r1, #1
 1982 0054 07A8     		add	r0, sp, #28
 1983 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1984              	.LVL164:
 429:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 1985              		.loc 1 429 0
 1986 005a 044B     		ldr	r3, .L102
 1987 005c 0093     		str	r3, [sp]
 430:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1988              		.loc 1 430 0
 1989 005e 0494     		str	r4, [sp, #16]
 431:Src/main.c    **** 
 1990              		.loc 1 431 0
 1991 0060 0694     		str	r4, [sp, #24]
 433:Src/main.c    **** }
 1992              		.loc 1 433 0
 1993 0062 6846     		mov	r0, sp
 1994 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1995              	.LVL165:
 434:Src/main.c    **** 
 1996              		.loc 1 434 0
 1997 0068 18B0     		add	sp, sp, #96
 1998              		@ sp needed
 1999 006a 10BD     		pop	{r4, pc}
 2000              	.L103:
 2001              		.align	2
 2002              	.L102:
 2003 006c 20000200 		.word	131104
 2004              		.cfi_endproc
 2005              	.LFE49:
 2007              		.section	.text.main,"ax",%progbits
 2008              		.align	1
 2009              		.global	main
 2010              		.syntax unified
 2011              		.code	16
 2012              		.thumb_func
 2013              		.fpu softvfp
 2015              	main:
ARM GAS  /tmp/ccIZXVel.s 			page 52


 2016              	.LFB37:
 113:Src/main.c    ****   HAL_Init();
 2017              		.loc 1 113 0
 2018              		.cfi_startproc
 2019              		@ args = 0, pretend = 0, frame = 56
 2020              		@ frame_needed = 0, uses_anonymous_args = 0
 2021 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2022              	.LCFI32:
 2023              		.cfi_def_cfa_offset 20
 2024              		.cfi_offset 4, -20
 2025              		.cfi_offset 5, -16
 2026              		.cfi_offset 6, -12
 2027              		.cfi_offset 7, -8
 2028              		.cfi_offset 14, -4
 2029 0002 C646     		mov	lr, r8
 2030 0004 00B5     		push	{lr}
 2031              	.LCFI33:
 2032              		.cfi_def_cfa_offset 24
 2033              		.cfi_offset 8, -24
 2034 0006 8EB0     		sub	sp, sp, #56
 2035              	.LCFI34:
 2036              		.cfi_def_cfa_offset 80
 114:Src/main.c    **** 
 2037              		.loc 1 114 0
 2038 0008 FFF7FEFF 		bl	HAL_Init
 2039              	.LVL166:
 116:Src/main.c    **** 
 2040              		.loc 1 116 0
 2041 000c FFF7FEFF 		bl	SystemClock_Config
 2042              	.LVL167:
 118:Src/main.c    ****   MX_DMA_Init();
 2043              		.loc 1 118 0
 2044 0010 FFF7FEFF 		bl	MX_GPIO_Init
 2045              	.LVL168:
 119:Src/main.c    ****   MX_ADC_Init();
 2046              		.loc 1 119 0
 2047 0014 FFF7FEFF 		bl	MX_DMA_Init
 2048              	.LVL169:
 120:Src/main.c    ****   MX_I2C1_Init();
 2049              		.loc 1 120 0
 2050 0018 FFF7FEFF 		bl	MX_ADC_Init
 2051              	.LVL170:
 121:Src/main.c    ****   MX_I2C2_Init();
 2052              		.loc 1 121 0
 2053 001c FFF7FEFF 		bl	MX_I2C1_Init
 2054              	.LVL171:
 122:Src/main.c    ****   MX_TIM1_Init();
 2055              		.loc 1 122 0
 2056 0020 FFF7FEFF 		bl	MX_I2C2_Init
 2057              	.LVL172:
 123:Src/main.c    ****   TIM3_Init();
 2058              		.loc 1 123 0
 2059 0024 FFF7FEFF 		bl	MX_TIM1_Init
 2060              	.LVL173:
 124:Src/main.c    **** 
 2061              		.loc 1 124 0
 2062 0028 FFF7FEFF 		bl	TIM3_Init
ARM GAS  /tmp/ccIZXVel.s 			page 53


 2063              	.LVL174:
 127:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 2064              		.loc 1 127 0
 2065 002c CE4C     		ldr	r4, .L132
 2066 002e 0021     		movs	r1, #0
 2067 0030 2000     		movs	r0, r4
 2068 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 2069              	.LVL175:
 128:Src/main.c    **** 
 2070              		.loc 1 128 0
 2071 0036 0C21     		movs	r1, #12
 2072 0038 2000     		movs	r0, r4
 2073 003a FFF7FEFF 		bl	HAL_TIM_OC_Start
 2074              	.LVL176:
 130:Src/main.c    **** 
 2075              		.loc 1 130 0
 2076 003e 0422     		movs	r2, #4
 2077 0040 CA49     		ldr	r1, .L132+4
 2078 0042 CB48     		ldr	r0, .L132+8
 2079 0044 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2080              	.LVL177:
 132:Src/main.c    ****   disp_init();
 2081              		.loc 1 132 0
 2082 0048 3220     		movs	r0, #50
 2083 004a FFF7FEFF 		bl	HAL_Delay
 2084              	.LVL178:
 133:Src/main.c    ****   HAL_Delay(150);
 2085              		.loc 1 133 0
 2086 004e FFF7FEFF 		bl	disp_init
 2087              	.LVL179:
 134:Src/main.c    ****   clear_screen();
 2088              		.loc 1 134 0
 2089 0052 9620     		movs	r0, #150
 2090 0054 FFF7FEFF 		bl	HAL_Delay
 2091              	.LVL180:
 135:Src/main.c    ****   //DFU bootloader
 2092              		.loc 1 135 0
 2093 0058 FFF7FEFF 		bl	clear_screen
 2094              	.LVL181:
 137:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 2095              		.loc 1 137 0
 2096 005c 9020     		movs	r0, #144
 2097 005e 0821     		movs	r1, #8
 2098 0060 C005     		lsls	r0, r0, #23
 2099 0062 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2100              	.LVL182:
 2101 0066 0028     		cmp	r0, #0
 2102 0068 24D0     		beq	.L105
 137:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 2103              		.loc 1 137 0 is_stmt 0 discriminator 1
 2104 006a 9020     		movs	r0, #144
 2105 006c 1021     		movs	r1, #16
 2106 006e C005     		lsls	r0, r0, #23
 2107 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2108              	.LVL183:
 2109 0074 0028     		cmp	r0, #0
 2110 0076 1DD0     		beq	.L105
ARM GAS  /tmp/ccIZXVel.s 			page 54


 138:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 8 ,1);
 2111              		.loc 1 138 0 is_stmt 1
 2112 0078 BE4C     		ldr	r4, .L132+12
 2113 007a 0123     		movs	r3, #1
 2114 007c 0122     		movs	r2, #1
 2115 007e 0121     		movs	r1, #1
 2116 0080 2000     		movs	r0, r4
 2117 0082 FFF7FEFF 		bl	draw_string
 2118              	.LVL184:
 139:Src/main.c    ****     refresh();
 2119              		.loc 1 139 0
 2120 0086 0123     		movs	r3, #1
 2121 0088 0822     		movs	r2, #8
 2122 008a 0121     		movs	r1, #1
 2123 008c 2000     		movs	r0, r4
 2124 008e FFF7FEFF 		bl	draw_string
 2125              	.LVL185:
 140:Src/main.c    ****     HAL_Delay(40);
 2126              		.loc 1 140 0
 2127 0092 FFF7FEFF 		bl	refresh
 2128              	.LVL186:
 141:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 2129              		.loc 1 141 0
 2130 0096 2820     		movs	r0, #40
 2131 0098 FFF7FEFF 		bl	HAL_Delay
 2132              	.LVL187:
 142:Src/main.c    ****     NVIC_SystemReset();
 2133              		.loc 1 142 0
 2134 009c B64B     		ldr	r3, .L132+16
 2135 009e B74A     		ldr	r2, .L132+20
 2136 00a0 1A60     		str	r2, [r3]
 2137              	.LBB31:
 2138              	.LBB32:
 2139              	.LBB33:
 2140              	.LBB34:
 2141              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
ARM GAS  /tmp/ccIZXVel.s 			page 55


  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
ARM GAS  /tmp/ccIZXVel.s 			page 56


  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIZXVel.s 			page 57


 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIZXVel.s 			page 58


 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccIZXVel.s 			page 59


 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIZXVel.s 			page 60


 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
ARM GAS  /tmp/ccIZXVel.s 			page 61


 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccIZXVel.s 			page 62


 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 2142              		.loc 2 429 0
 2143              		.syntax divided
 2144              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2145 00a2 BFF34F8F 		dsb 0xF
 2146              	@ 0 "" 2
 2147              		.thumb
 2148              		.syntax unified
 2149              	.LBE34:
 2150              	.LBE33:
 2151              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
ARM GAS  /tmp/ccIZXVel.s 			page 63


  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
ARM GAS  /tmp/ccIZXVel.s 			page 64


  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
ARM GAS  /tmp/ccIZXVel.s 			page 65


 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
ARM GAS  /tmp/ccIZXVel.s 			page 66


 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccIZXVel.s 			page 67


 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccIZXVel.s 			page 68


 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
ARM GAS  /tmp/ccIZXVel.s 			page 69


 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
ARM GAS  /tmp/ccIZXVel.s 			page 70


 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
ARM GAS  /tmp/ccIZXVel.s 			page 71


 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
ARM GAS  /tmp/ccIZXVel.s 			page 72


 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccIZXVel.s 			page 73


 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  /tmp/ccIZXVel.s 			page 74


 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/ccIZXVel.s 			page 75


 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 2152              		.loc 3 734 0
 2153 00a6 B64B     		ldr	r3, .L132+24
 2154 00a8 B64A     		ldr	r2, .L132+28
 2155 00aa DA60     		str	r2, [r3, #12]
 2156              	.LBB35:
 2157              	.LBB36:
 2158              		.loc 2 429 0
 2159              		.syntax divided
 2160              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2161 00ac BFF34F8F 		dsb 0xF
 2162              	@ 0 "" 2
 2163              		.thumb
 2164              		.syntax unified
 2165              	.L106:
 2166              	.LBE36:
 2167              	.LBE35:
 2168              	.LBB37:
 2169              	.LBB38:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2170              		.loc 2 375 0
 2171              		.syntax divided
 2172              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2173 00b0 C046     		nop
 2174              	@ 0 "" 2
 2175              		.thumb
 2176              		.syntax unified
 2177 00b2 FDE7     		b	.L106
 2178              	.L105:
 2179              	.LBE38:
 2180              	.LBE37:
 2181              	.LBE32:
 2182              	.LBE31:
 145:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 2183              		.loc 1 145 0
 2184 00b4 0123     		movs	r3, #1
 2185 00b6 0122     		movs	r2, #1
 2186 00b8 0F21     		movs	r1, #15
 2187 00ba B348     		ldr	r0, .L132+32
 2188 00bc FFF7FEFF 		bl	draw_string
 2189              	.LVL188:
 146:Src/main.c    ****     refresh();
 2190              		.loc 1 146 0
 2191 00c0 0123     		movs	r3, #1
 2192 00c2 0922     		movs	r2, #9
 2193 00c4 0A21     		movs	r1, #10
ARM GAS  /tmp/ccIZXVel.s 			page 76


 2194 00c6 B148     		ldr	r0, .L132+36
 2195 00c8 FFF7FEFF 		bl	draw_string
 2196              	.LVL189:
 147:Src/main.c    **** #ifdef ENABLESERIAL
 2197              		.loc 1 147 0
 2198 00cc FFF7FEFF 		bl	refresh
 2199              	.LVL190:
 157:Src/main.c    **** #endif
 2200              		.loc 1 157 0
 2201 00d0 AF4A     		ldr	r2, .L132+40
 2202 00d2 2423     		movs	r3, #36
 2203 00d4 1421     		movs	r1, #20
 2204 00d6 D154     		strb	r1, [r2, r3]
 161:Src/main.c    ****   MX_IWDG_Init();
 2205              		.loc 1 161 0
 2206 00d8 FA20     		movs	r0, #250
 2207 00da 8000     		lsls	r0, r0, #2
 2208 00dc FFF7FEFF 		bl	HAL_Delay
 2209              	.LVL191:
 162:Src/main.c    **** 
 2210              		.loc 1 162 0
 2211 00e0 FFF7FEFF 		bl	MX_IWDG_Init
 2212              	.LVL192:
 164:Src/main.c    ****   if(r.target > 400) r.target = 220;  //initial temp set
 2213              		.loc 1 164 0
 2214 00e4 AB4B     		ldr	r3, .L132+44
 2215 00e6 1888     		ldrh	r0, [r3]
 2216 00e8 FFF7FEFF 		bl	__aeabi_ui2f
 2217              	.LVL193:
 2218 00ec AA4B     		ldr	r3, .L132+48
 2219 00ee 1860     		str	r0, [r3]
 165:Src/main.c    **** 
 2220              		.loc 1 165 0
 2221 00f0 AA49     		ldr	r1, .L132+52
 2222 00f2 FFF7FEFF 		bl	__aeabi_fcmpgt
 2223              	.LVL194:
 2224 00f6 0028     		cmp	r0, #0
 2225 00f8 00D1     		bne	.LCB1891
 2226 00fa 82E1     		b	.L121	@long jump
 2227              	.LCB1891:
 165:Src/main.c    **** 
 2228              		.loc 1 165 0 is_stmt 0 discriminator 1
 2229 00fc A64B     		ldr	r3, .L132+48
 2230 00fe A84A     		ldr	r2, .L132+56
 2231 0100 1A60     		str	r2, [r3]
 2232 0102 7EE1     		b	.L121
 2233              	.L130:
 2234              	.LBB39:
 176:Src/main.c    ****       s.writeFlash = 1;
 2235              		.loc 1 176 0 is_stmt 1
 2236 0104 A44C     		ldr	r4, .L132+48
 2237 0106 A749     		ldr	r1, .L132+60
 2238 0108 2068     		ldr	r0, [r4]
 2239 010a FFF7FEFF 		bl	__aeabi_fsub
 2240              	.LVL195:
 2241 010e 2060     		str	r0, [r4]
 177:Src/main.c    ****       HAL_Delay(40);
ARM GAS  /tmp/ccIZXVel.s 			page 77


 2242              		.loc 1 177 0
 2243 0110 9F4B     		ldr	r3, .L132+40
 2244 0112 0122     		movs	r2, #1
 2245 0114 1A77     		strb	r2, [r3, #28]
 178:Src/main.c    ****     }
 2246              		.loc 1 178 0
 2247 0116 2820     		movs	r0, #40
 2248 0118 FFF7FEFF 		bl	HAL_Delay
 2249              	.LVL196:
 2250 011c 8CE1     		b	.L109
 2251              	.L131:
 182:Src/main.c    ****       s.writeFlash = 1;
 2252              		.loc 1 182 0
 2253 011e 9E4C     		ldr	r4, .L132+48
 2254 0120 A049     		ldr	r1, .L132+60
 2255 0122 2068     		ldr	r0, [r4]
 2256 0124 FFF7FEFF 		bl	__aeabi_fadd
 2257              	.LVL197:
 2258 0128 2060     		str	r0, [r4]
 183:Src/main.c    ****       HAL_Delay(40);
 2259              		.loc 1 183 0
 2260 012a 994B     		ldr	r3, .L132+40
 2261 012c 0122     		movs	r2, #1
 2262 012e 1A77     		strb	r2, [r3, #28]
 184:Src/main.c    ****     }
 2263              		.loc 1 184 0
 2264 0130 2820     		movs	r0, #40
 2265 0132 FFF7FEFF 		bl	HAL_Delay
 2266              	.LVL198:
 2267 0136 84E1     		b	.L110
 2268              	.L122:
 187:Src/main.c    **** 
 2269              		.loc 1 187 0
 2270 0138 984C     		ldr	r4, .L132+52
 2271              	.L111:
 187:Src/main.c    **** 
 2272              		.loc 1 187 0 is_stmt 0 discriminator 8
 2273 013a 974B     		ldr	r3, .L132+48
 2274 013c 1C60     		str	r4, [r3]
 189:Src/main.c    ****       HAL_FLASH_Unlock();
 2275              		.loc 1 189 0 is_stmt 1 discriminator 8
 2276 013e 944B     		ldr	r3, .L132+40
 2277 0140 1B7F     		ldrb	r3, [r3, #28]
 2278 0142 012B     		cmp	r3, #1
 2279 0144 00D1     		bne	.LCB1940
 2280 0146 ACE0     		b	.L127	@long jump
 2281              	.LCB1940:
 2282              	.L113:
 213:Src/main.c    ****     char str2[10] = "          ";
 2283              		.loc 1 213 0
 2284 0148 02AE     		add	r6, sp, #8
 2285 014a 974B     		ldr	r3, .L132+64
 2286 014c 3100     		movs	r1, r6
 2287 014e 1A00     		movs	r2, r3
 2288 0150 11CA     		ldmia	r2!, {r0, r4}
 2289 0152 11C1     		stmia	r1!, {r0, r4}
 2290 0154 1088     		ldrh	r0, [r2]
ARM GAS  /tmp/ccIZXVel.s 			page 78


 2291 0156 0880     		strh	r0, [r1]
 214:Src/main.c    ****     char str3[10] = "          ";
 2292              		.loc 1 214 0
 2293 0158 05AD     		add	r5, sp, #20
 2294 015a 2900     		movs	r1, r5
 2295 015c 1800     		movs	r0, r3
 2296 015e 90C8     		ldmia	r0!, {r4, r7}
 2297 0160 90C1     		stmia	r1!, {r4, r7}
 2298 0162 1088     		ldrh	r0, [r2]
 2299 0164 0880     		strh	r0, [r1]
 215:Src/main.c    ****     char str4[10] = "          ";
 2300              		.loc 1 215 0
 2301 0166 08A9     		add	r1, sp, #32
 2302 0168 1800     		movs	r0, r3
 2303 016a 90C8     		ldmia	r0!, {r4, r7}
 2304 016c 90C1     		stmia	r1!, {r4, r7}
 2305 016e 1088     		ldrh	r0, [r2]
 2306 0170 0880     		strh	r0, [r1]
 216:Src/main.c    ****     sprintf(str1, "%d C   ", (uint16_t)r.target);
 2307              		.loc 1 216 0
 2308 0172 0BA9     		add	r1, sp, #44
 2309 0174 8846     		mov	r8, r1
 2310 0176 11CB     		ldmia	r3!, {r0, r4}
 2311 0178 11C1     		stmia	r1!, {r0, r4}
 2312 017a 1388     		ldrh	r3, [r2]
 2313 017c 0B80     		strh	r3, [r1]
 217:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 2314              		.loc 1 217 0
 2315 017e 864B     		ldr	r3, .L132+48
 2316 0180 1868     		ldr	r0, [r3]
 2317 0182 FFF7FEFF 		bl	__aeabi_f2uiz
 2318              	.LVL199:
 2319 0186 82B2     		uxth	r2, r0
 2320 0188 8849     		ldr	r1, .L132+68
 2321 018a 3000     		movs	r0, r6
 2322 018c FFF7FEFF 		bl	sprintf
 2323              	.LVL200:
 218:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 2324              		.loc 1 218 0
 2325 0190 7F4C     		ldr	r4, .L132+40
 2326 0192 6768     		ldr	r7, [r4, #4]
 2327 0194 381C     		adds	r0, r7, #0
 2328 0196 FFF7FEFF 		bl	__aeabi_f2uiz
 2329              	.LVL201:
 2330 019a 83B2     		uxth	r3, r0
 2331 019c 0193     		str	r3, [sp, #4]
 2332 019e 1800     		movs	r0, r3
 2333 01a0 FFF7FEFF 		bl	__aeabi_i2f
 2334              	.LVL202:
 2335 01a4 011C     		adds	r1, r0, #0
 2336 01a6 381C     		adds	r0, r7, #0
 2337 01a8 FFF7FEFF 		bl	__aeabi_fsub
 2338              	.LVL203:
 2339 01ac 8049     		ldr	r1, .L132+72
 2340 01ae FFF7FEFF 		bl	__aeabi_fmul
 2341              	.LVL204:
 2342 01b2 FFF7FEFF 		bl	__aeabi_f2uiz
ARM GAS  /tmp/ccIZXVel.s 			page 79


 2343              	.LVL205:
 2344 01b6 83B2     		uxth	r3, r0
 2345 01b8 019A     		ldr	r2, [sp, #4]
 2346 01ba 7E49     		ldr	r1, .L132+76
 2347 01bc 2800     		movs	r0, r5
 2348 01be FFF7FEFF 		bl	sprintf
 2349              	.LVL206:
 219:Src/main.c    ****     sprintf(str4, "%d.%d A", (uint16_t)s.iinavg,(uint16_t)((s.iinavg-(uint16_t)s.iinavg)*10.0f));
 2350              		.loc 1 219 0
 2351 01c2 A768     		ldr	r7, [r4, #8]
 2352 01c4 381C     		adds	r0, r7, #0
 2353 01c6 FFF7FEFF 		bl	__aeabi_f2uiz
 2354              	.LVL207:
 2355 01ca 83B2     		uxth	r3, r0
 2356 01cc 0193     		str	r3, [sp, #4]
 2357 01ce 1800     		movs	r0, r3
 2358 01d0 FFF7FEFF 		bl	__aeabi_i2f
 2359              	.LVL208:
 2360 01d4 011C     		adds	r1, r0, #0
 2361 01d6 381C     		adds	r0, r7, #0
 2362 01d8 FFF7FEFF 		bl	__aeabi_fsub
 2363              	.LVL209:
 2364 01dc 7449     		ldr	r1, .L132+72
 2365 01de FFF7FEFF 		bl	__aeabi_fmul
 2366              	.LVL210:
 2367 01e2 FFF7FEFF 		bl	__aeabi_f2uiz
 2368              	.LVL211:
 2369 01e6 83B2     		uxth	r3, r0
 2370 01e8 019A     		ldr	r2, [sp, #4]
 2371 01ea 7349     		ldr	r1, .L132+80
 2372 01ec 08A8     		add	r0, sp, #32
 2373 01ee FFF7FEFF 		bl	sprintf
 2374              	.LVL212:
 220:Src/main.c    **** 
 2375              		.loc 1 220 0
 2376 01f2 2769     		ldr	r7, [r4, #16]
 2377 01f4 381C     		adds	r0, r7, #0
 2378 01f6 FFF7FEFF 		bl	__aeabi_f2uiz
 2379              	.LVL213:
 2380 01fa 83B2     		uxth	r3, r0
 2381 01fc 0193     		str	r3, [sp, #4]
 2382 01fe 1800     		movs	r0, r3
 2383 0200 FFF7FEFF 		bl	__aeabi_i2f
 2384              	.LVL214:
 2385 0204 011C     		adds	r1, r0, #0
 2386 0206 381C     		adds	r0, r7, #0
 2387 0208 FFF7FEFF 		bl	__aeabi_fsub
 2388              	.LVL215:
 2389 020c 6849     		ldr	r1, .L132+72
 2390 020e FFF7FEFF 		bl	__aeabi_fmul
 2391              	.LVL216:
 2392 0212 FFF7FEFF 		bl	__aeabi_f2uiz
 2393              	.LVL217:
 2394 0216 83B2     		uxth	r3, r0
 2395 0218 019A     		ldr	r2, [sp, #4]
 2396 021a 6849     		ldr	r1, .L132+84
 2397 021c 4046     		mov	r0, r8
ARM GAS  /tmp/ccIZXVel.s 			page 80


 2398 021e FFF7FEFF 		bl	sprintf
 2399              	.LVL218:
 222:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 2400              		.loc 1 222 0
 2401 0222 FFF7FEFF 		bl	clear_screen
 2402              	.LVL219:
 223:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 2403              		.loc 1 223 0
 2404 0226 0123     		movs	r3, #1
 2405 0228 0122     		movs	r2, #1
 2406 022a 0A21     		movs	r1, #10
 2407 022c 3000     		movs	r0, r6
 2408 022e FFF7FEFF 		bl	draw_string
 2409              	.LVL220:
 224:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 2410              		.loc 1 224 0
 2411 0232 0123     		movs	r3, #1
 2412 0234 0922     		movs	r2, #9
 2413 0236 0A21     		movs	r1, #10
 2414 0238 2800     		movs	r0, r5
 2415 023a FFF7FEFF 		bl	draw_string
 2416              	.LVL221:
 225:Src/main.c    **** #ifdef DISPLAYCURRENT
 2417              		.loc 1 225 0
 2418 023e 0123     		movs	r3, #1
 2419 0240 0122     		movs	r2, #1
 2420 0242 3C21     		movs	r1, #60
 2421 0244 08A8     		add	r0, sp, #32
 2422 0246 FFF7FEFF 		bl	draw_string
 2423              	.LVL222:
 227:Src/main.c    ****       draw_string(str4, 10, 1 ,1);
 2424              		.loc 1 227 0
 2425 024a 2423     		movs	r3, #36
 2426 024c E35C     		ldrb	r3, [r4, r3]
 2427 024e 002B     		cmp	r3, #0
 2428 0250 5AD0     		beq	.L128
 230:Src/main.c    ****     }
 2429              		.loc 1 230 0
 2430 0252 013B     		subs	r3, r3, #1
 2431 0254 4E49     		ldr	r1, .L132+40
 2432 0256 2422     		movs	r2, #36
 2433 0258 8B54     		strb	r3, [r1, r2]
 2434              	.L117:
 233:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2435              		.loc 1 233 0
 2436 025a 4D4B     		ldr	r3, .L132+40
 2437 025c 186A     		ldr	r0, [r3, #32]
 2438 025e 5849     		ldr	r1, .L132+88
 2439 0260 FFF7FEFF 		bl	__aeabi_fmul
 2440              	.LVL223:
 2441 0264 FFF7FEFF 		bl	__aeabi_f2d
 2442              	.LVL224:
 2443 0268 0600     		movs	r6, r0
 2444 026a 0F00     		movs	r7, r1
 2445 026c 4A4B     		ldr	r3, .L132+48
 2446 026e 5868     		ldr	r0, [r3, #4]
 2447 0270 5449     		ldr	r1, .L132+92
ARM GAS  /tmp/ccIZXVel.s 			page 81


 2448 0272 FFF7FEFF 		bl	__aeabi_fmul
 2449              	.LVL225:
 2450 0276 041C     		adds	r4, r0, #0
 2451 0278 5349     		ldr	r1, .L132+96
 2452 027a FFF7FEFF 		bl	__aeabi_fcmpgt
 2453              	.LVL226:
 2454 027e 0028     		cmp	r0, #0
 2455 0280 49D1     		bne	.L123
 233:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2456              		.loc 1 233 0 is_stmt 0 discriminator 2
 2457 0282 0021     		movs	r1, #0
 2458 0284 201C     		adds	r0, r4, #0
 2459 0286 FFF7FEFF 		bl	__aeabi_fcmplt
 2460              	.LVL227:
 2461 028a 0028     		cmp	r0, #0
 2462 028c 68D1     		bne	.L124
 233:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2463              		.loc 1 233 0 discriminator 5
 2464 028e 201C     		adds	r0, r4, #0
 2465 0290 FFF7FEFF 		bl	__aeabi_f2d
 2466              	.LVL228:
 2467 0294 0022     		movs	r2, #0
 2468 0296 4D4B     		ldr	r3, .L132+100
 2469 0298 FFF7FEFF 		bl	__aeabi_dmul
 2470              	.LVL229:
 2471 029c 0200     		movs	r2, r0
 2472 029e 0B00     		movs	r3, r1
 2473 02a0 3CE0     		b	.L118
 2474              	.L127:
 190:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 2475              		.loc 1 190 0 is_stmt 1
 2476 02a2 FFF7FEFF 		bl	HAL_FLASH_Unlock
 2477              	.LVL230:
 191:Src/main.c    ****       FLASH->AR = 0x0800e400;
 2478              		.loc 1 191 0
 2479 02a6 4A4B     		ldr	r3, .L132+104
 2480 02a8 1A69     		ldr	r2, [r3, #16]
 2481 02aa 0221     		movs	r1, #2
 2482 02ac 0A43     		orrs	r2, r1
 2483 02ae 1A61     		str	r2, [r3, #16]
 192:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 2484              		.loc 1 192 0
 2485 02b0 384A     		ldr	r2, .L132+44
 2486 02b2 5A61     		str	r2, [r3, #20]
 193:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 2487              		.loc 1 193 0
 2488 02b4 1A69     		ldr	r2, [r3, #16]
 2489 02b6 3E31     		adds	r1, r1, #62
 2490 02b8 0A43     		orrs	r2, r1
 2491 02ba 1A61     		str	r2, [r3, #16]
 2492              	.L114:
 194:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 2493              		.loc 1 194 0 discriminator 1
 2494 02bc 444B     		ldr	r3, .L132+104
 2495 02be DB68     		ldr	r3, [r3, #12]
 2496 02c0 DB07     		lsls	r3, r3, #31
 2497 02c2 FBD4     		bmi	.L114
ARM GAS  /tmp/ccIZXVel.s 			page 82


 195:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 2498              		.loc 1 195 0
 2499 02c4 424B     		ldr	r3, .L132+104
 2500 02c6 DB68     		ldr	r3, [r3, #12]
 2501 02c8 9B06     		lsls	r3, r3, #26
 2502 02ca 04D4     		bmi	.L129
 2503              	.L115:
 203:Src/main.c    ****       #endif
 2504              		.loc 1 203 0
 2505 02cc 304A     		ldr	r2, .L132+40
 2506 02ce 2423     		movs	r3, #36
 2507 02d0 0C21     		movs	r1, #12
 2508 02d2 D154     		strb	r1, [r2, r3]
 2509 02d4 38E7     		b	.L113
 2510              	.L129:
 196:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 2511              		.loc 1 196 0
 2512 02d6 3E4B     		ldr	r3, .L132+104
 2513 02d8 DA68     		ldr	r2, [r3, #12]
 2514 02da 2021     		movs	r1, #32
 2515 02dc 0A43     		orrs	r2, r1
 2516 02de DA60     		str	r2, [r3, #12]
 197:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 2517              		.loc 1 197 0
 2518 02e0 1A69     		ldr	r2, [r3, #16]
 2519 02e2 1E39     		subs	r1, r1, #30
 2520 02e4 8A43     		bics	r2, r1
 2521 02e6 1A61     		str	r2, [r3, #16]
 198:Src/main.c    ****         HAL_FLASH_Lock();
 2522              		.loc 1 198 0
 2523 02e8 2B4B     		ldr	r3, .L132+48
 2524 02ea 1868     		ldr	r0, [r3]
 2525 02ec FFF7FEFF 		bl	__aeabi_f2uiz
 2526              	.LVL231:
 2527 02f0 82B2     		uxth	r2, r0
 2528 02f2 0023     		movs	r3, #0
 2529 02f4 2749     		ldr	r1, .L132+44
 2530 02f6 0120     		movs	r0, #1
 2531 02f8 FFF7FEFF 		bl	HAL_FLASH_Program
 2532              	.LVL232:
 199:Src/main.c    ****         s.writeFlash = 0;
 2533              		.loc 1 199 0
 2534 02fc FFF7FEFF 		bl	HAL_FLASH_Lock
 2535              	.LVL233:
 200:Src/main.c    ****       }
 2536              		.loc 1 200 0
 2537 0300 0022     		movs	r2, #0
 2538 0302 234B     		ldr	r3, .L132+40
 2539 0304 1A77     		strb	r2, [r3, #28]
 2540 0306 E1E7     		b	.L115
 2541              	.L128:
 228:Src/main.c    ****     } else {
 2542              		.loc 1 228 0
 2543 0308 0133     		adds	r3, r3, #1
 2544 030a 0122     		movs	r2, #1
 2545 030c 0A21     		movs	r1, #10
 2546 030e 0BA8     		add	r0, sp, #44
ARM GAS  /tmp/ccIZXVel.s 			page 83


 2547 0310 FFF7FEFF 		bl	draw_string
 2548              	.LVL234:
 2549 0314 A1E7     		b	.L117
 2550              	.L123:
 233:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2551              		.loc 1 233 0
 2552 0316 C022     		movs	r2, #192
 2553 0318 D205     		lsls	r2, r2, #23
 2554 031a 2E4B     		ldr	r3, .L132+108
 2555              	.L118:
 233:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2556              		.loc 1 233 0 is_stmt 0 discriminator 8
 2557 031c 3000     		movs	r0, r6
 2558 031e 3900     		movs	r1, r7
 2559 0320 FFF7FEFF 		bl	__aeabi_dadd
 2560              	.LVL235:
 2561 0324 FFF7FEFF 		bl	__aeabi_d2f
 2562              	.LVL236:
 2563 0328 194C     		ldr	r4, .L132+40
 2564 032a 2062     		str	r0, [r4, #32]
 234:Src/main.c    ****     for(uint16_t i = 0; i <= (int)s.drawlineavg; i++){
 2565              		.loc 1 234 0 is_stmt 1 discriminator 8
 2566 032c 2449     		ldr	r1, .L132+88
 2567 032e 2069     		ldr	r0, [r4, #16]
 2568 0330 FFF7FEFF 		bl	__aeabi_fmul
 2569              	.LVL237:
 2570 0334 FFF7FEFF 		bl	__aeabi_f2d
 2571              	.LVL238:
 2572 0338 0600     		movs	r6, r0
 2573 033a 0F00     		movs	r7, r1
 2574 033c E068     		ldr	r0, [r4, #12]
 2575 033e FFF7FEFF 		bl	__aeabi_f2d
 2576              	.LVL239:
 2577 0342 0022     		movs	r2, #0
 2578 0344 214B     		ldr	r3, .L132+100
 2579 0346 FFF7FEFF 		bl	__aeabi_dmul
 2580              	.LVL240:
 2581 034a 0200     		movs	r2, r0
 2582 034c 0B00     		movs	r3, r1
 2583 034e 3000     		movs	r0, r6
 2584 0350 3900     		movs	r1, r7
 2585 0352 FFF7FEFF 		bl	__aeabi_dadd
 2586              	.LVL241:
 2587 0356 FFF7FEFF 		bl	__aeabi_d2f
 2588              	.LVL242:
 2589 035a 2061     		str	r0, [r4, #16]
 2590              	.LVL243:
 2591              	.LBB40:
 235:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2592              		.loc 1 235 0 discriminator 8
 2593 035c 0024     		movs	r4, #0
 2594 035e 45E0     		b	.L119
 2595              	.LVL244:
 2596              	.L124:
 2597              	.LBE40:
 233:Src/main.c    ****     s.iinavg = (s.iinavg * DISP_AVG_FILTER) + (s.iin*(1.0-DISP_AVG_FILTER));
 2598              		.loc 1 233 0
ARM GAS  /tmp/ccIZXVel.s 			page 84


 2599 0360 0022     		movs	r2, #0
 2600 0362 0023     		movs	r3, #0
 2601 0364 DAE7     		b	.L118
 2602              	.L133:
 2603 0366 C046     		.align	2
 2604              	.L132:
 2605 0368 00000000 		.word	htim1
 2606 036c 00000000 		.word	.LANCHOR0
 2607 0370 00000000 		.word	hadc
 2608 0374 00000000 		.word	.LC32
 2609 0378 F03F0020 		.word	536887280
 2610 037c EFBEADDE 		.word	-559038737
 2611 0380 00ED00E0 		.word	-536810240
 2612 0384 0400FA05 		.word	100270084
 2613 0388 10000000 		.word	.LC34
 2614 038c 1C000000 		.word	.LC36
 2615 0390 00000000 		.word	.LANCHOR1
 2616 0394 00E40008 		.word	134276096
 2617 0398 00000000 		.word	.LANCHOR3
 2618 039c 0000C843 		.word	1137180672
 2619 03a0 00005C43 		.word	1130102784
 2620 03a4 0000A040 		.word	1084227584
 2621 03a8 00000000 		.word	.LANCHOR7
 2622 03ac 2C000000 		.word	.LC42
 2623 03b0 00002041 		.word	1092616192
 2624 03b4 34000000 		.word	.LC44
 2625 03b8 3C000000 		.word	.LC46
 2626 03bc 44000000 		.word	.LC48
 2627 03c0 6666663F 		.word	1063675494
 2628 03c4 00004040 		.word	1077936128
 2629 03c8 0000F041 		.word	1106247680
 2630 03cc 9A99B93F 		.word	1069128090
 2631 03d0 00200240 		.word	1073881088
 2632 03d4 00000840 		.word	1074266112
 2633              	.LVL245:
 2634              	.L120:
 2635              	.LBB41:
 236:Src/main.c    ****     }
 2636              		.loc 1 236 0 discriminator 3
 2637 03d8 2000     		movs	r0, r4
 2638 03da 3C30     		adds	r0, r0, #60
 2639 03dc 00B2     		sxth	r0, r0
 2640 03de 0123     		movs	r3, #1
 2641 03e0 0822     		movs	r2, #8
 2642 03e2 0821     		movs	r1, #8
 2643 03e4 FFF7FEFF 		bl	draw_v_line
 2644              	.LVL246:
 235:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2645              		.loc 1 235 0 discriminator 3
 2646 03e8 0134     		adds	r4, r4, #1
 2647              	.LVL247:
 2648 03ea A4B2     		uxth	r4, r4
 2649              	.LVL248:
 2650              	.L119:
 235:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2651              		.loc 1 235 0 is_stmt 0 discriminator 1
 2652 03ec 1E4B     		ldr	r3, .L134
ARM GAS  /tmp/ccIZXVel.s 			page 85


 2653 03ee 186A     		ldr	r0, [r3, #32]
 2654 03f0 FFF7FEFF 		bl	__aeabi_f2iz
 2655              	.LVL249:
 2656 03f4 8442     		cmp	r4, r0
 2657 03f6 EFDD     		ble	.L120
 2658              	.LBE41:
 239:Src/main.c    ****     HAL_IWDG_Refresh(&hiwdg);
 2659              		.loc 1 239 0 is_stmt 1
 2660 03f8 FFF7FEFF 		bl	refresh
 2661              	.LVL250:
 240:Src/main.c    ****   }
 2662              		.loc 1 240 0
 2663 03fc 1B48     		ldr	r0, .L134+4
 2664 03fe FFF7FEFF 		bl	HAL_IWDG_Refresh
 2665              	.LVL251:
 2666              	.L121:
 169:Src/main.c    **** 
 2667              		.loc 1 169 0
 2668 0402 3220     		movs	r0, #50
 2669 0404 FFF7FEFF 		bl	HAL_Delay
 2670              	.LVL252:
 172:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin) | HAL_GPIO_ReadPin(GPIOC, B1_1_Pin);
 2671              		.loc 1 172 0
 2672 0408 9025     		movs	r5, #144
 2673 040a ED05     		lsls	r5, r5, #23
 2674 040c 0821     		movs	r1, #8
 2675 040e 2800     		movs	r0, r5
 2676 0410 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2677              	.LVL253:
 2678 0414 144C     		ldr	r4, .L134
 2679 0416 6077     		strb	r0, [r4, #29]
 173:Src/main.c    **** 
 2680              		.loc 1 173 0
 2681 0418 1021     		movs	r1, #16
 2682 041a 2800     		movs	r0, r5
 2683 041c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2684              	.LVL254:
 2685 0420 0500     		movs	r5, r0
 2686 0422 8021     		movs	r1, #128
 2687 0424 8901     		lsls	r1, r1, #6
 2688 0426 1248     		ldr	r0, .L134+8
 2689 0428 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2690              	.LVL255:
 2691 042c 0543     		orrs	r5, r0
 2692 042e A577     		strb	r5, [r4, #30]
 175:Src/main.c    ****       r.target -= 5;
 2693              		.loc 1 175 0
 2694 0430 637F     		ldrb	r3, [r4, #29]
 2695 0432 012B     		cmp	r3, #1
 2696 0434 00D1     		bne	.LCB2345
 2697 0436 65E6     		b	.L130	@long jump
 2698              	.LCB2345:
 2699              	.L109:
 181:Src/main.c    ****       r.target += 5;
 2700              		.loc 1 181 0
 2701 0438 0B4B     		ldr	r3, .L134
 2702 043a 9B7F     		ldrb	r3, [r3, #30]
ARM GAS  /tmp/ccIZXVel.s 			page 86


 2703 043c 012B     		cmp	r3, #1
 2704 043e 00D1     		bne	.LCB2350
 2705 0440 6DE6     		b	.L131	@long jump
 2706              	.LCB2350:
 2707              	.L110:
 187:Src/main.c    **** 
 2708              		.loc 1 187 0
 2709 0442 0C4B     		ldr	r3, .L134+12
 2710 0444 1C68     		ldr	r4, [r3]
 2711 0446 0C49     		ldr	r1, .L134+16
 2712 0448 201C     		adds	r0, r4, #0
 2713 044a FFF7FEFF 		bl	__aeabi_fcmpgt
 2714              	.LVL256:
 2715 044e 0028     		cmp	r0, #0
 2716 0450 00D0     		beq	.LCB2359
 2717 0452 71E6     		b	.L122	@long jump
 2718              	.LCB2359:
 187:Src/main.c    **** 
 2719              		.loc 1 187 0 is_stmt 0 discriminator 2
 2720 0454 0949     		ldr	r1, .L134+20
 2721 0456 201C     		adds	r0, r4, #0
 2722 0458 FFF7FEFF 		bl	__aeabi_fcmplt
 2723              	.LVL257:
 2724 045c 0028     		cmp	r0, #0
 2725 045e 00D1     		bne	.LCB2365
 2726 0460 6BE6     		b	.L111	@long jump
 2727              	.LCB2365:
 187:Src/main.c    **** 
 2728              		.loc 1 187 0
 2729 0462 064C     		ldr	r4, .L134+20
 2730 0464 69E6     		b	.L111
 2731              	.L135:
 2732 0466 C046     		.align	2
 2733              	.L134:
 2734 0468 00000000 		.word	.LANCHOR1
 2735 046c 00000000 		.word	hiwdg
 2736 0470 00080048 		.word	1207961600
 2737 0474 00000000 		.word	.LANCHOR3
 2738 0478 0000C843 		.word	1137180672
 2739 047c 0000A041 		.word	1101004800
 2740              	.LBE39:
 2741              		.cfi_endproc
 2742              	.LFE37:
 2744              		.section	.text.Error_Handler,"ax",%progbits
 2745              		.align	1
 2746              		.global	Error_Handler
 2747              		.syntax unified
 2748              		.code	16
 2749              		.thumb_func
 2750              		.fpu softvfp
 2752              	Error_Handler:
 2753              	.LFB58:
 677:Src/main.c    **** 
 678:Src/main.c    **** void Error_Handler(void)
 679:Src/main.c    **** {
 2754              		.loc 1 679 0 is_stmt 1
 2755              		.cfi_startproc
ARM GAS  /tmp/ccIZXVel.s 			page 87


 2756              		@ args = 0, pretend = 0, frame = 0
 2757              		@ frame_needed = 0, uses_anonymous_args = 0
 2758              		@ link register save eliminated.
 680:Src/main.c    **** 
 681:Src/main.c    **** }
 2759              		.loc 1 681 0
 2760              		@ sp needed
 2761 0000 7047     		bx	lr
 2762              		.cfi_endproc
 2763              	.LFE58:
 2765              		.global	OLED_Setup_Array
 2766              		.global	REFRESH_COMMANDS
 2767              		.comm	screenBuffer,218,4
 2768              		.comm	sendDataUSB,4,4
 2769              		.global	tipcal
 2770              		.global	r
 2771              		.global	s
 2772              		.comm	USBD_Device,548,4
 2773              		.comm	hiwdg,16,4
 2774              		.comm	htim3,64,4
 2775              		.comm	htim1,64,4
 2776              		.comm	hi2c2,76,4
 2777              		.comm	hi2c1,76,4
 2778              		.comm	hdma_adc,68,4
 2779              		.comm	hadc,76,4
 2780              		.global	MAX_DUTY
 2781              		.global	font
 2782              		.comm	UserTxBuffer,512,4
 2783              		.comm	UserRxBuffer,512,4
 2784              		.section	.rodata
 2785              		.align	2
 2786              		.set	.LANCHOR7,. + 0
 2787              	.LC40:
 2788 0000 20202020 		.ascii	"          \000"
 2788      20202020 
 2788      202000
 2789              		.section	.bss.ADC_raw,"aw",%nobits
 2790              		.align	2
 2791              		.set	.LANCHOR0,. + 0
 2794              	ADC_raw:
 2795 0000 00000000 		.space	8
 2795      00000000 
 2796              		.section	.data.MAX_DUTY,"aw",%progbits
 2797              		.align	1
 2798              		.set	.LANCHOR4,. + 0
 2801              	MAX_DUTY:
 2802 0000 9600     		.short	150
 2803              		.section	.data.OLED_Setup_Array,"aw",%progbits
 2804              		.align	2
 2805              		.set	.LANCHOR6,. + 0
 2808              	OLED_Setup_Array:
 2809 0000 80       		.byte	-128
 2810 0001 AE       		.byte	-82
 2811 0002 80       		.byte	-128
 2812 0003 D5       		.byte	-43
 2813 0004 80       		.byte	-128
 2814 0005 52       		.byte	82
ARM GAS  /tmp/ccIZXVel.s 			page 88


 2815 0006 80       		.byte	-128
 2816 0007 A8       		.byte	-88
 2817 0008 80       		.byte	-128
 2818 0009 0F       		.byte	15
 2819 000a 80       		.byte	-128
 2820 000b C0       		.byte	-64
 2821 000c 80       		.byte	-128
 2822 000d D3       		.byte	-45
 2823 000e 80       		.byte	-128
 2824 000f 00       		.byte	0
 2825 0010 80       		.byte	-128
 2826 0011 40       		.byte	64
 2827 0012 80       		.byte	-128
 2828 0013 A0       		.byte	-96
 2829 0014 80       		.byte	-128
 2830 0015 8D       		.byte	-115
 2831 0016 80       		.byte	-128
 2832 0017 14       		.byte	20
 2833 0018 80       		.byte	-128
 2834 0019 DA       		.byte	-38
 2835 001a 80       		.byte	-128
 2836 001b 02       		.byte	2
 2837 001c 80       		.byte	-128
 2838 001d 81       		.byte	-127
 2839 001e 80       		.byte	-128
 2840 001f 33       		.byte	51
 2841 0020 80       		.byte	-128
 2842 0021 D9       		.byte	-39
 2843 0022 80       		.byte	-128
 2844 0023 F1       		.byte	-15
 2845 0024 80       		.byte	-128
 2846 0025 DB       		.byte	-37
 2847 0026 80       		.byte	-128
 2848 0027 30       		.byte	48
 2849 0028 80       		.byte	-128
 2850 0029 A4       		.byte	-92
 2851 002a 80       		.byte	-128
 2852 002b A6       		.byte	-90
 2853 002c 80       		.byte	-128
 2854 002d 20       		.byte	32
 2855 002e 80       		.byte	-128
 2856 002f 00       		.byte	0
 2857 0030 80       		.byte	-128
 2858 0031 AF       		.byte	-81
 2859              		.section	.data.r,"aw",%progbits
 2860              		.align	2
 2861              		.set	.LANCHOR3,. + 0
 2864              	r:
 2865 0000 00005C43 		.word	1130102784
 2866 0004 00000000 		.space	12
 2866      00000000 
 2866      00000000 
 2867 0010 00004843 		.word	1128792064
 2868 0014 00000000 		.space	8
 2868      00000000 
 2869 001c 6F128339 		.word	964891247
 2870 0020 CDCC4C3E 		.word	1045220557
ARM GAS  /tmp/ccIZXVel.s 			page 89


 2871 0024 0AD7233C 		.word	1008981770
 2872 0028 00000000 		.word	0
 2873 002c 00002842 		.word	1109917696
 2874              		.section	.data.s,"aw",%progbits
 2875              		.align	2
 2876              		.set	.LANCHOR1,. + 0
 2879              	s:
 2880 0000 00000000 		.space	20
 2880      00000000 
 2880      00000000 
 2880      00000000 
 2880      00000000 
 2881 0014 00008040 		.word	1082130432
 2882 0018 00000000 		.space	4
 2883 001c 00       		.byte	0
 2884 001d 00000000 		.space	11
 2884      00000000 
 2884      000000
 2885              		.section	.data.tipcal,"aw",%progbits
 2886              		.align	2
 2887              		.set	.LANCHOR2,. + 0
 2890              	tipcal:
 2891 0000 0000F042 		.word	1123024896
 2892 0004 0000B842 		.word	1119354880
 2893              		.section	.rodata.REFRESH_COMMANDS,"a",%progbits
 2894              		.align	2
 2895              		.set	.LANCHOR5,. + 0
 2898              	REFRESH_COMMANDS:
 2899 0000 80       		.byte	-128
 2900 0001 AF       		.byte	-81
 2901 0002 80       		.byte	-128
 2902 0003 21       		.byte	33
 2903 0004 80       		.byte	-128
 2904 0005 20       		.byte	32
 2905 0006 80       		.byte	-128
 2906 0007 7F       		.byte	127
 2907 0008 80       		.byte	-128
 2908 0009 C0       		.byte	-64
 2909 000a 80       		.byte	-128
 2910 000b 22       		.byte	34
 2911 000c 80       		.byte	-128
 2912 000d 00       		.byte	0
 2913 000e 80       		.byte	-128
 2914 000f 01       		.byte	1
 2915 0010 40       		.byte	64
 2916              		.section	.rodata.USB_printfloat.str1.4,"aMS",%progbits,1
 2917              		.align	2
 2918              	.LC16:
 2919 0000 25642E25 		.ascii	"%d.%d \015\012\000"
 2919      64200D0A 
 2919      00
 2920              		.section	.rodata.font,"a",%progbits
 2921              		.align	2
 2924              	font:
 2925 0000 00       		.byte	0
 2926 0001 00       		.byte	0
 2927 0002 00       		.byte	0
ARM GAS  /tmp/ccIZXVel.s 			page 90


 2928 0003 00       		.byte	0
 2929 0004 00       		.byte	0
 2930 0005 00       		.byte	0
 2931 0006 2F       		.byte	47
 2932 0007 00       		.byte	0
 2933 0008 00       		.byte	0
 2934 0009 00       		.byte	0
 2935 000a 00       		.byte	0
 2936 000b 00       		.byte	0
 2937 000c 03       		.byte	3
 2938 000d 00       		.byte	0
 2939 000e 03       		.byte	3
 2940 000f 00       		.byte	0
 2941 0010 00       		.byte	0
 2942 0011 00       		.byte	0
 2943 0012 12       		.byte	18
 2944 0013 3F       		.byte	63
 2945 0014 12       		.byte	18
 2946 0015 12       		.byte	18
 2947 0016 3F       		.byte	63
 2948 0017 12       		.byte	18
 2949 0018 2E       		.byte	46
 2950 0019 2A       		.byte	42
 2951 001a 7F       		.byte	127
 2952 001b 2A       		.byte	42
 2953 001c 3A       		.byte	58
 2954 001d 00       		.byte	0
 2955 001e 23       		.byte	35
 2956 001f 13       		.byte	19
 2957 0020 08       		.byte	8
 2958 0021 04       		.byte	4
 2959 0022 32       		.byte	50
 2960 0023 31       		.byte	49
 2961 0024 10       		.byte	16
 2962 0025 2A       		.byte	42
 2963 0026 25       		.byte	37
 2964 0027 2A       		.byte	42
 2965 0028 10       		.byte	16
 2966 0029 20       		.byte	32
 2967 002a 02       		.byte	2
 2968 002b 01       		.byte	1
 2969 002c 00       		.byte	0
 2970 002d 00       		.byte	0
 2971 002e 00       		.byte	0
 2972 002f 00       		.byte	0
 2973 0030 1E       		.byte	30
 2974 0031 21       		.byte	33
 2975 0032 00       		.byte	0
 2976 0033 00       		.byte	0
 2977 0034 00       		.byte	0
 2978 0035 00       		.byte	0
 2979 0036 21       		.byte	33
 2980 0037 1E       		.byte	30
 2981 0038 00       		.byte	0
 2982 0039 00       		.byte	0
 2983 003a 00       		.byte	0
 2984 003b 00       		.byte	0
ARM GAS  /tmp/ccIZXVel.s 			page 91


 2985 003c 08       		.byte	8
 2986 003d 2A       		.byte	42
 2987 003e 1C       		.byte	28
 2988 003f 2A       		.byte	42
 2989 0040 08       		.byte	8
 2990 0041 08       		.byte	8
 2991 0042 08       		.byte	8
 2992 0043 08       		.byte	8
 2993 0044 3E       		.byte	62
 2994 0045 08       		.byte	8
 2995 0046 08       		.byte	8
 2996 0047 08       		.byte	8
 2997 0048 80       		.byte	-128
 2998 0049 60       		.byte	96
 2999 004a 00       		.byte	0
 3000 004b 00       		.byte	0
 3001 004c 00       		.byte	0
 3002 004d 00       		.byte	0
 3003 004e 08       		.byte	8
 3004 004f 08       		.byte	8
 3005 0050 08       		.byte	8
 3006 0051 08       		.byte	8
 3007 0052 08       		.byte	8
 3008 0053 00       		.byte	0
 3009 0054 30       		.byte	48
 3010 0055 30       		.byte	48
 3011 0056 00       		.byte	0
 3012 0057 00       		.byte	0
 3013 0058 00       		.byte	0
 3014 0059 00       		.byte	0
 3015 005a 20       		.byte	32
 3016 005b 10       		.byte	16
 3017 005c 08       		.byte	8
 3018 005d 04       		.byte	4
 3019 005e 02       		.byte	2
 3020 005f 00       		.byte	0
 3021 0060 1E       		.byte	30
 3022 0061 31       		.byte	49
 3023 0062 29       		.byte	41
 3024 0063 25       		.byte	37
 3025 0064 23       		.byte	35
 3026 0065 1E       		.byte	30
 3027 0066 22       		.byte	34
 3028 0067 21       		.byte	33
 3029 0068 3F       		.byte	63
 3030 0069 20       		.byte	32
 3031 006a 20       		.byte	32
 3032 006b 20       		.byte	32
 3033 006c 32       		.byte	50
 3034 006d 29       		.byte	41
 3035 006e 29       		.byte	41
 3036 006f 29       		.byte	41
 3037 0070 29       		.byte	41
 3038 0071 26       		.byte	38
 3039 0072 12       		.byte	18
 3040 0073 21       		.byte	33
 3041 0074 21       		.byte	33
ARM GAS  /tmp/ccIZXVel.s 			page 92


 3042 0075 25       		.byte	37
 3043 0076 25       		.byte	37
 3044 0077 1A       		.byte	26
 3045 0078 18       		.byte	24
 3046 0079 14       		.byte	20
 3047 007a 12       		.byte	18
 3048 007b 3F       		.byte	63
 3049 007c 10       		.byte	16
 3050 007d 10       		.byte	16
 3051 007e 17       		.byte	23
 3052 007f 25       		.byte	37
 3053 0080 25       		.byte	37
 3054 0081 25       		.byte	37
 3055 0082 25       		.byte	37
 3056 0083 19       		.byte	25
 3057 0084 1E       		.byte	30
 3058 0085 25       		.byte	37
 3059 0086 25       		.byte	37
 3060 0087 25       		.byte	37
 3061 0088 25       		.byte	37
 3062 0089 18       		.byte	24
 3063 008a 01       		.byte	1
 3064 008b 01       		.byte	1
 3065 008c 31       		.byte	49
 3066 008d 09       		.byte	9
 3067 008e 05       		.byte	5
 3068 008f 03       		.byte	3
 3069 0090 1A       		.byte	26
 3070 0091 25       		.byte	37
 3071 0092 25       		.byte	37
 3072 0093 25       		.byte	37
 3073 0094 25       		.byte	37
 3074 0095 1A       		.byte	26
 3075 0096 06       		.byte	6
 3076 0097 29       		.byte	41
 3077 0098 29       		.byte	41
 3078 0099 29       		.byte	41
 3079 009a 29       		.byte	41
 3080 009b 1E       		.byte	30
 3081 009c 24       		.byte	36
 3082 009d 00       		.byte	0
 3083 009e 00       		.byte	0
 3084 009f 00       		.byte	0
 3085 00a0 00       		.byte	0
 3086 00a1 00       		.byte	0
 3087 00a2 80       		.byte	-128
 3088 00a3 64       		.byte	100
 3089 00a4 00       		.byte	0
 3090 00a5 00       		.byte	0
 3091 00a6 00       		.byte	0
 3092 00a7 00       		.byte	0
 3093 00a8 08       		.byte	8
 3094 00a9 14       		.byte	20
 3095 00aa 22       		.byte	34
 3096 00ab 00       		.byte	0
 3097 00ac 00       		.byte	0
 3098 00ad 00       		.byte	0
ARM GAS  /tmp/ccIZXVel.s 			page 93


 3099 00ae 14       		.byte	20
 3100 00af 14       		.byte	20
 3101 00b0 14       		.byte	20
 3102 00b1 14       		.byte	20
 3103 00b2 14       		.byte	20
 3104 00b3 00       		.byte	0
 3105 00b4 22       		.byte	34
 3106 00b5 14       		.byte	20
 3107 00b6 08       		.byte	8
 3108 00b7 00       		.byte	0
 3109 00b8 00       		.byte	0
 3110 00b9 00       		.byte	0
 3111 00ba 02       		.byte	2
 3112 00bb 01       		.byte	1
 3113 00bc 01       		.byte	1
 3114 00bd 29       		.byte	41
 3115 00be 05       		.byte	5
 3116 00bf 02       		.byte	2
 3117 00c0 1E       		.byte	30
 3118 00c1 21       		.byte	33
 3119 00c2 2D       		.byte	45
 3120 00c3 2B       		.byte	43
 3121 00c4 2D       		.byte	45
 3122 00c5 0E       		.byte	14
 3123 00c6 3E       		.byte	62
 3124 00c7 09       		.byte	9
 3125 00c8 09       		.byte	9
 3126 00c9 09       		.byte	9
 3127 00ca 09       		.byte	9
 3128 00cb 3E       		.byte	62
 3129 00cc 3F       		.byte	63
 3130 00cd 25       		.byte	37
 3131 00ce 25       		.byte	37
 3132 00cf 25       		.byte	37
 3133 00d0 25       		.byte	37
 3134 00d1 1A       		.byte	26
 3135 00d2 1E       		.byte	30
 3136 00d3 21       		.byte	33
 3137 00d4 21       		.byte	33
 3138 00d5 21       		.byte	33
 3139 00d6 21       		.byte	33
 3140 00d7 12       		.byte	18
 3141 00d8 3F       		.byte	63
 3142 00d9 21       		.byte	33
 3143 00da 21       		.byte	33
 3144 00db 21       		.byte	33
 3145 00dc 12       		.byte	18
 3146 00dd 0C       		.byte	12
 3147 00de 3F       		.byte	63
 3148 00df 25       		.byte	37
 3149 00e0 25       		.byte	37
 3150 00e1 25       		.byte	37
 3151 00e2 25       		.byte	37
 3152 00e3 21       		.byte	33
 3153 00e4 3F       		.byte	63
 3154 00e5 05       		.byte	5
 3155 00e6 05       		.byte	5
ARM GAS  /tmp/ccIZXVel.s 			page 94


 3156 00e7 05       		.byte	5
 3157 00e8 05       		.byte	5
 3158 00e9 01       		.byte	1
 3159 00ea 1E       		.byte	30
 3160 00eb 21       		.byte	33
 3161 00ec 21       		.byte	33
 3162 00ed 21       		.byte	33
 3163 00ee 29       		.byte	41
 3164 00ef 1A       		.byte	26
 3165 00f0 3F       		.byte	63
 3166 00f1 04       		.byte	4
 3167 00f2 04       		.byte	4
 3168 00f3 04       		.byte	4
 3169 00f4 04       		.byte	4
 3170 00f5 3F       		.byte	63
 3171 00f6 21       		.byte	33
 3172 00f7 21       		.byte	33
 3173 00f8 3F       		.byte	63
 3174 00f9 21       		.byte	33
 3175 00fa 21       		.byte	33
 3176 00fb 21       		.byte	33
 3177 00fc 10       		.byte	16
 3178 00fd 20       		.byte	32
 3179 00fe 20       		.byte	32
 3180 00ff 20       		.byte	32
 3181 0100 20       		.byte	32
 3182 0101 1F       		.byte	31
 3183 0102 3F       		.byte	63
 3184 0103 04       		.byte	4
 3185 0104 0C       		.byte	12
 3186 0105 0A       		.byte	10
 3187 0106 11       		.byte	17
 3188 0107 20       		.byte	32
 3189 0108 3F       		.byte	63
 3190 0109 20       		.byte	32
 3191 010a 20       		.byte	32
 3192 010b 20       		.byte	32
 3193 010c 20       		.byte	32
 3194 010d 20       		.byte	32
 3195 010e 3F       		.byte	63
 3196 010f 02       		.byte	2
 3197 0110 04       		.byte	4
 3198 0111 04       		.byte	4
 3199 0112 02       		.byte	2
 3200 0113 3F       		.byte	63
 3201 0114 3F       		.byte	63
 3202 0115 02       		.byte	2
 3203 0116 04       		.byte	4
 3204 0117 08       		.byte	8
 3205 0118 10       		.byte	16
 3206 0119 3F       		.byte	63
 3207 011a 1E       		.byte	30
 3208 011b 21       		.byte	33
 3209 011c 21       		.byte	33
 3210 011d 21       		.byte	33
 3211 011e 21       		.byte	33
 3212 011f 1E       		.byte	30
ARM GAS  /tmp/ccIZXVel.s 			page 95


 3213 0120 3F       		.byte	63
 3214 0121 09       		.byte	9
 3215 0122 09       		.byte	9
 3216 0123 09       		.byte	9
 3217 0124 09       		.byte	9
 3218 0125 06       		.byte	6
 3219 0126 1E       		.byte	30
 3220 0127 21       		.byte	33
 3221 0128 29       		.byte	41
 3222 0129 31       		.byte	49
 3223 012a 21       		.byte	33
 3224 012b 1E       		.byte	30
 3225 012c 3F       		.byte	63
 3226 012d 09       		.byte	9
 3227 012e 09       		.byte	9
 3228 012f 09       		.byte	9
 3229 0130 19       		.byte	25
 3230 0131 26       		.byte	38
 3231 0132 12       		.byte	18
 3232 0133 25       		.byte	37
 3233 0134 25       		.byte	37
 3234 0135 25       		.byte	37
 3235 0136 25       		.byte	37
 3236 0137 18       		.byte	24
 3237 0138 01       		.byte	1
 3238 0139 01       		.byte	1
 3239 013a 01       		.byte	1
 3240 013b 3F       		.byte	63
 3241 013c 01       		.byte	1
 3242 013d 01       		.byte	1
 3243 013e 1F       		.byte	31
 3244 013f 20       		.byte	32
 3245 0140 20       		.byte	32
 3246 0141 20       		.byte	32
 3247 0142 20       		.byte	32
 3248 0143 1F       		.byte	31
 3249 0144 0F       		.byte	15
 3250 0145 10       		.byte	16
 3251 0146 20       		.byte	32
 3252 0147 20       		.byte	32
 3253 0148 10       		.byte	16
 3254 0149 0F       		.byte	15
 3255 014a 1F       		.byte	31
 3256 014b 20       		.byte	32
 3257 014c 10       		.byte	16
 3258 014d 10       		.byte	16
 3259 014e 20       		.byte	32
 3260 014f 1F       		.byte	31
 3261 0150 21       		.byte	33
 3262 0151 12       		.byte	18
 3263 0152 0C       		.byte	12
 3264 0153 0C       		.byte	12
 3265 0154 12       		.byte	18
 3266 0155 21       		.byte	33
 3267 0156 01       		.byte	1
 3268 0157 02       		.byte	2
 3269 0158 0C       		.byte	12
ARM GAS  /tmp/ccIZXVel.s 			page 96


 3270 0159 38       		.byte	56
 3271 015a 04       		.byte	4
 3272 015b 02       		.byte	2
 3273 015c 21       		.byte	33
 3274 015d 31       		.byte	49
 3275 015e 29       		.byte	41
 3276 015f 25       		.byte	37
 3277 0160 23       		.byte	35
 3278 0161 21       		.byte	33
 3279 0162 3F       		.byte	63
 3280 0163 21       		.byte	33
 3281 0164 00       		.byte	0
 3282 0165 00       		.byte	0
 3283 0166 00       		.byte	0
 3284 0167 00       		.byte	0
 3285 0168 02       		.byte	2
 3286 0169 04       		.byte	4
 3287 016a 08       		.byte	8
 3288 016b 10       		.byte	16
 3289 016c 20       		.byte	32
 3290 016d 00       		.byte	0
 3291 016e 21       		.byte	33
 3292 016f 3F       		.byte	63
 3293 0170 00       		.byte	0
 3294 0171 00       		.byte	0
 3295 0172 00       		.byte	0
 3296 0173 00       		.byte	0
 3297 0174 04       		.byte	4
 3298 0175 02       		.byte	2
 3299 0176 3F       		.byte	63
 3300 0177 02       		.byte	2
 3301 0178 04       		.byte	4
 3302 0179 00       		.byte	0
 3303 017a 40       		.byte	64
 3304 017b 40       		.byte	64
 3305 017c 40       		.byte	64
 3306 017d 40       		.byte	64
 3307 017e 40       		.byte	64
 3308 017f 40       		.byte	64
 3309 0180 01       		.byte	1
 3310 0181 02       		.byte	2
 3311 0182 00       		.byte	0
 3312 0183 00       		.byte	0
 3313 0184 00       		.byte	0
 3314 0185 00       		.byte	0
 3315 0186 10       		.byte	16
 3316 0187 30       		.byte	48
 3317 0188 2A       		.byte	42
 3318 0189 2A       		.byte	42
 3319 018a 3C       		.byte	60
 3320 018b 00       		.byte	0
 3321 018c 3F       		.byte	63
 3322 018d 24       		.byte	36
 3323 018e 24       		.byte	36
 3324 018f 24       		.byte	36
 3325 0190 18       		.byte	24
 3326 0191 00       		.byte	0
ARM GAS  /tmp/ccIZXVel.s 			page 97


 3327 0192 0C       		.byte	12
 3328 0193 14       		.byte	20
 3329 0194 22       		.byte	34
 3330 0195 22       		.byte	34
 3331 0196 00       		.byte	0
 3332 0197 00       		.byte	0
 3333 0198 18       		.byte	24
 3334 0199 24       		.byte	36
 3335 019a 24       		.byte	36
 3336 019b 24       		.byte	36
 3337 019c 3F       		.byte	63
 3338 019d 00       		.byte	0
 3339 019e 1C       		.byte	28
 3340 019f 2C       		.byte	44
 3341 01a0 2A       		.byte	42
 3342 01a1 2A       		.byte	42
 3343 01a2 24       		.byte	36
 3344 01a3 00       		.byte	0
 3345 01a4 3E       		.byte	62
 3346 01a5 05       		.byte	5
 3347 01a6 01       		.byte	1
 3348 01a7 00       		.byte	0
 3349 01a8 00       		.byte	0
 3350 01a9 00       		.byte	0
 3351 01aa 18       		.byte	24
 3352 01ab 28       		.byte	40
 3353 01ac A4       		.byte	-92
 3354 01ad A4       		.byte	-92
 3355 01ae 7C       		.byte	124
 3356 01af 00       		.byte	0
 3357 01b0 3F       		.byte	63
 3358 01b1 04       		.byte	4
 3359 01b2 04       		.byte	4
 3360 01b3 0C       		.byte	12
 3361 01b4 30       		.byte	48
 3362 01b5 00       		.byte	0
 3363 01b6 24       		.byte	36
 3364 01b7 3D       		.byte	61
 3365 01b8 20       		.byte	32
 3366 01b9 00       		.byte	0
 3367 01ba 00       		.byte	0
 3368 01bb 00       		.byte	0
 3369 01bc 20       		.byte	32
 3370 01bd 40       		.byte	64
 3371 01be 40       		.byte	64
 3372 01bf 3D       		.byte	61
 3373 01c0 00       		.byte	0
 3374 01c1 00       		.byte	0
 3375 01c2 3F       		.byte	63
 3376 01c3 0C       		.byte	12
 3377 01c4 12       		.byte	18
 3378 01c5 20       		.byte	32
 3379 01c6 00       		.byte	0
 3380 01c7 00       		.byte	0
 3381 01c8 1F       		.byte	31
 3382 01c9 20       		.byte	32
 3383 01ca 20       		.byte	32
ARM GAS  /tmp/ccIZXVel.s 			page 98


 3384 01cb 00       		.byte	0
 3385 01cc 00       		.byte	0
 3386 01cd 00       		.byte	0
 3387 01ce 3E       		.byte	62
 3388 01cf 02       		.byte	2
 3389 01d0 3C       		.byte	60
 3390 01d1 02       		.byte	2
 3391 01d2 3C       		.byte	60
 3392 01d3 00       		.byte	0
 3393 01d4 3E       		.byte	62
 3394 01d5 02       		.byte	2
 3395 01d6 02       		.byte	2
 3396 01d7 02       		.byte	2
 3397 01d8 3C       		.byte	60
 3398 01d9 00       		.byte	0
 3399 01da 0C       		.byte	12
 3400 01db 14       		.byte	20
 3401 01dc 22       		.byte	34
 3402 01dd 32       		.byte	50
 3403 01de 0C       		.byte	12
 3404 01df 00       		.byte	0
 3405 01e0 FC       		.byte	-4
 3406 01e1 24       		.byte	36
 3407 01e2 24       		.byte	36
 3408 01e3 24       		.byte	36
 3409 01e4 18       		.byte	24
 3410 01e5 00       		.byte	0
 3411 01e6 18       		.byte	24
 3412 01e7 24       		.byte	36
 3413 01e8 24       		.byte	36
 3414 01e9 24       		.byte	36
 3415 01ea FC       		.byte	-4
 3416 01eb 80       		.byte	-128
 3417 01ec 3C       		.byte	60
 3418 01ed 04       		.byte	4
 3419 01ee 02       		.byte	2
 3420 01ef 02       		.byte	2
 3421 01f0 00       		.byte	0
 3422 01f1 00       		.byte	0
 3423 01f2 24       		.byte	36
 3424 01f3 2C       		.byte	44
 3425 01f4 2A       		.byte	42
 3426 01f5 2A       		.byte	42
 3427 01f6 10       		.byte	16
 3428 01f7 00       		.byte	0
 3429 01f8 02       		.byte	2
 3430 01f9 1F       		.byte	31
 3431 01fa 22       		.byte	34
 3432 01fb 20       		.byte	32
 3433 01fc 00       		.byte	0
 3434 01fd 00       		.byte	0
 3435 01fe 1E       		.byte	30
 3436 01ff 20       		.byte	32
 3437 0200 20       		.byte	32
 3438 0201 20       		.byte	32
 3439 0202 1E       		.byte	30
 3440 0203 00       		.byte	0
ARM GAS  /tmp/ccIZXVel.s 			page 99


 3441 0204 06       		.byte	6
 3442 0205 18       		.byte	24
 3443 0206 20       		.byte	32
 3444 0207 18       		.byte	24
 3445 0208 06       		.byte	6
 3446 0209 00       		.byte	0
 3447 020a 1E       		.byte	30
 3448 020b 30       		.byte	48
 3449 020c 1C       		.byte	28
 3450 020d 30       		.byte	48
 3451 020e 0E       		.byte	14
 3452 020f 00       		.byte	0
 3453 0210 22       		.byte	34
 3454 0211 14       		.byte	20
 3455 0212 08       		.byte	8
 3456 0213 14       		.byte	20
 3457 0214 22       		.byte	34
 3458 0215 00       		.byte	0
 3459 0216 0C       		.byte	12
 3460 0217 10       		.byte	16
 3461 0218 A0       		.byte	-96
 3462 0219 A0       		.byte	-96
 3463 021a 7C       		.byte	124
 3464 021b 00       		.byte	0
 3465 021c 22       		.byte	34
 3466 021d 32       		.byte	50
 3467 021e 2A       		.byte	42
 3468 021f 26       		.byte	38
 3469 0220 22       		.byte	34
 3470 0221 22       		.byte	34
 3471 0222 0C       		.byte	12
 3472 0223 3F       		.byte	63
 3473 0224 21       		.byte	33
 3474 0225 00       		.byte	0
 3475 0226 00       		.byte	0
 3476 0227 00       		.byte	0
 3477 0228 3F       		.byte	63
 3478 0229 00       		.byte	0
 3479 022a 00       		.byte	0
 3480 022b 00       		.byte	0
 3481 022c 00       		.byte	0
 3482 022d 00       		.byte	0
 3483 022e 21       		.byte	33
 3484 022f 3F       		.byte	63
 3485 0230 0C       		.byte	12
 3486 0231 00       		.byte	0
 3487 0232 00       		.byte	0
 3488 0233 00       		.byte	0
 3489 0234 02       		.byte	2
 3490 0235 01       		.byte	1
 3491 0236 02       		.byte	2
 3492 0237 01       		.byte	1
 3493 0238 00       		.byte	0
 3494 0239 00       		.byte	0
 3495 023a 00       		.byte	0
 3496 023b 00       		.byte	0
 3497 023c 00       		.byte	0
ARM GAS  /tmp/ccIZXVel.s 			page 100


 3498 023d 00       		.byte	0
 3499 023e 00       		.byte	0
 3500 023f 00       		.byte	0
 3501              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3502              		.align	2
 3503              	.LC32:
 3504 0000 64667564 		.ascii	"dfudfudfudfudfu\000"
 3504      66756466 
 3504      75646675 
 3504      64667500 
 3505              	.LC34:
 3506 0010 4F747465 		.ascii	"Otter-Iron\000"
 3506      722D4972 
 3506      6F6E00
 3507 001b 00       		.space	1
 3508              	.LC36:
 3509 001c 6279204A 		.ascii	"by Jan Henrik\000"
 3509      616E2048 
 3509      656E7269 
 3509      6B00
 3510 002a 0000     		.space	2
 3511              	.LC42:
 3512 002c 25642043 		.ascii	"%d C   \000"
 3512      20202000 
 3513              	.LC44:
 3514 0034 25642E25 		.ascii	"%d.%d C\000"
 3514      64204300 
 3515              	.LC46:
 3516 003c 25642E25 		.ascii	"%d.%d V\000"
 3516      64205600 
 3517              	.LC48:
 3518 0044 25642E25 		.ascii	"%d.%d A\000"
 3518      64204100 
 3519              		.text
 3520              	.Letext0:
 3521              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 3522              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 3523              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 3524              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 3525              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 3526              		.file 9 "/usr/include/newlib/sys/lock.h"
 3527              		.file 10 "/usr/include/newlib/sys/_types.h"
 3528              		.file 11 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 3529              		.file 12 "/usr/include/newlib/sys/reent.h"
 3530              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 3531              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 3532              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 3533              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 3534              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 3535              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 3536              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 3537              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_iwdg.h"
 3538              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 3539              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 3540              		.file 23 "/usr/include/newlib/stdlib.h"
 3541              		.file 24 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 3542              		.file 25 "Inc/usbd_desc.h"
ARM GAS  /tmp/ccIZXVel.s 			page 101


 3543              		.file 26 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 3544              		.file 27 "Inc/usbd_cdc_interface.h"
 3545              		.file 28 "Inc/font.h"
 3546              		.file 29 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 3547              		.file 30 "Inc/main.h"
 3548              		.file 31 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 3549              		.file 32 "/usr/include/newlib/string.h"
 3550              		.file 33 "<built-in>"
 3551              		.file 34 "/usr/include/newlib/stdio.h"
 3552              		.file 35 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 3553              		.file 36 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_flash.h"
ARM GAS  /tmp/ccIZXVel.s 			page 102


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccIZXVel.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccIZXVel.s:127    .text.MX_GPIO_Init:0000000000000084 $d
     /tmp/ccIZXVel.s:134    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:140    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccIZXVel.s:192    .text.MX_DMA_Init:000000000000003c $d
     /tmp/ccIZXVel.s:197    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:203    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccIZXVel.s:336    .text.MX_ADC_Init:00000000000000a4 $d
                            *COM*:000000000000004c hadc
     /tmp/ccIZXVel.s:343    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:349    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccIZXVel.s:403    .text.MX_I2C1_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c1
     /tmp/ccIZXVel.s:410    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:416    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccIZXVel.s:470    .text.MX_I2C2_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c2
     /tmp/ccIZXVel.s:477    .text.TIM3_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:483    .text.TIM3_Init:0000000000000000 TIM3_Init
     /tmp/ccIZXVel.s:553    .text.TIM3_Init:0000000000000050 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccIZXVel.s:561    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:567    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccIZXVel.s:734    .text.MX_TIM1_Init:00000000000000d4 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccIZXVel.s:741    .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/ccIZXVel.s:747    .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/ccIZXVel.s:779    .text.MX_IWDG_Init:0000000000000018 $d
                            *COM*:0000000000000010 hiwdg
     /tmp/ccIZXVel.s:804    .text.reg:0000000000000000 $t
     /tmp/ccIZXVel.s:811    .text.reg:0000000000000000 reg
     /tmp/ccIZXVel.s:1180   .text.reg:000000000000025c $d
     /tmp/ccIZXVel.s:1209   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccIZXVel.s:1216   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccIZXVel.s:1262   .text.HAL_TIM_PeriodElapsedCallback:0000000000000028 $d
                            *COM*:0000000000000004 sendDataUSB
                            *COM*:0000000000000224 USBD_Device
                            *COM*:0000000000000200 UserTxBuffer
     /tmp/ccIZXVel.s:1270   .text.USB_printfloat:0000000000000000 $t
     /tmp/ccIZXVel.s:1277   .text.USB_printfloat:0000000000000000 USB_printfloat
     /tmp/ccIZXVel.s:1335   .text.USB_printfloat:0000000000000048 $d
     /tmp/ccIZXVel.s:1343   .text.disp_init:0000000000000000 $t
     /tmp/ccIZXVel.s:1350   .text.disp_init:0000000000000000 disp_init
     /tmp/ccIZXVel.s:1409   .text.disp_init:0000000000000040 $d
                            *COM*:00000000000000da screenBuffer
     /tmp/ccIZXVel.s:1418   .text.refresh:0000000000000000 $t
     /tmp/ccIZXVel.s:1425   .text.refresh:0000000000000000 refresh
     /tmp/ccIZXVel.s:1479   .text.refresh:0000000000000034 $d
     /tmp/ccIZXVel.s:1486   .text.clear_screen:0000000000000000 $t
     /tmp/ccIZXVel.s:1493   .text.clear_screen:0000000000000000 clear_screen
     /tmp/ccIZXVel.s:1516   .text.clear_screen:0000000000000010 $d
     /tmp/ccIZXVel.s:1521   .text.set_screen:0000000000000000 $t
     /tmp/ccIZXVel.s:1528   .text.set_screen:0000000000000000 set_screen
     /tmp/ccIZXVel.s:1551   .text.set_screen:0000000000000010 $d
ARM GAS  /tmp/ccIZXVel.s 			page 103


     /tmp/ccIZXVel.s:1556   .text.write_pixel:0000000000000000 $t
     /tmp/ccIZXVel.s:1563   .text.write_pixel:0000000000000000 write_pixel
     /tmp/ccIZXVel.s:1650   .text.write_pixel:0000000000000070 $d
     /tmp/ccIZXVel.s:1655   .text.draw_v_line:0000000000000000 $t
     /tmp/ccIZXVel.s:1662   .text.draw_v_line:0000000000000000 draw_v_line
     /tmp/ccIZXVel.s:1715   .text.draw_char:0000000000000000 $t
     /tmp/ccIZXVel.s:1722   .text.draw_char:0000000000000000 draw_char
     /tmp/ccIZXVel.s:1840   .text.draw_char:0000000000000064 $d
     /tmp/ccIZXVel.s:2924   .rodata.font:0000000000000000 font
     /tmp/ccIZXVel.s:1845   .text.draw_string:0000000000000000 $t
     /tmp/ccIZXVel.s:1852   .text.draw_string:0000000000000000 draw_string
     /tmp/ccIZXVel.s:1903   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccIZXVel.s:1910   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccIZXVel.s:2003   .text.SystemClock_Config:000000000000006c $d
     /tmp/ccIZXVel.s:2008   .text.main:0000000000000000 $t
     /tmp/ccIZXVel.s:2015   .text.main:0000000000000000 main
     /tmp/ccIZXVel.s:2605   .text.main:0000000000000368 $d
     /tmp/ccIZXVel.s:2637   .text.main:00000000000003d8 $t
     /tmp/ccIZXVel.s:2734   .text.main:0000000000000468 $d
     /tmp/ccIZXVel.s:2745   .text.Error_Handler:0000000000000000 $t
     /tmp/ccIZXVel.s:2752   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccIZXVel.s:2808   .data.OLED_Setup_Array:0000000000000000 OLED_Setup_Array
     /tmp/ccIZXVel.s:2898   .rodata.REFRESH_COMMANDS:0000000000000000 REFRESH_COMMANDS
     /tmp/ccIZXVel.s:2890   .data.tipcal:0000000000000000 tipcal
     /tmp/ccIZXVel.s:2864   .data.r:0000000000000000 r
     /tmp/ccIZXVel.s:2879   .data.s:0000000000000000 s
                            *COM*:0000000000000044 hdma_adc
     /tmp/ccIZXVel.s:2801   .data.MAX_DUTY:0000000000000000 MAX_DUTY
                            *COM*:0000000000000200 UserRxBuffer
     /tmp/ccIZXVel.s:2785   .rodata:0000000000000000 $d
     /tmp/ccIZXVel.s:2790   .bss.ADC_raw:0000000000000000 $d
     /tmp/ccIZXVel.s:2794   .bss.ADC_raw:0000000000000000 ADC_raw
     /tmp/ccIZXVel.s:2797   .data.MAX_DUTY:0000000000000000 $d
     /tmp/ccIZXVel.s:2804   .data.OLED_Setup_Array:0000000000000000 $d
     /tmp/ccIZXVel.s:2860   .data.r:0000000000000000 $d
     /tmp/ccIZXVel.s:2875   .data.s:0000000000000000 $d
     /tmp/ccIZXVel.s:2886   .data.tipcal:0000000000000000 $d
     /tmp/ccIZXVel.s:2894   .rodata.REFRESH_COMMANDS:0000000000000000 $d
     /tmp/ccIZXVel.s:2917   .rodata.USB_printfloat.str1.4:0000000000000000 $d
     /tmp/ccIZXVel.s:2921   .rodata.font:0000000000000000 $d
     /tmp/ccIZXVel.s:3502   .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_MspInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
ARM GAS  /tmp/ccIZXVel.s 			page 104


HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_IWDG_Init
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_i2d
__aeabi_dadd
__aeabi_fcmpge
__aeabi_fcmple
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_f2iz
USBD_CDC_SetTxBuffer
USBD_CDC_TransmitPacket
__aeabi_f2uiz
sprintf
memcpy
HAL_I2C_GetState
HAL_I2C_Master_Transmit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_OC_Start
HAL_ADC_Start_DMA
HAL_Delay
HAL_GPIO_ReadPin
HAL_FLASH_Unlock
HAL_FLASH_Program
HAL_FLASH_Lock
HAL_IWDG_Refresh
